define(["./shared"],(function(t){"use strict";var e=i;function i(t){return!function(t){return"undefined"==typeof window||"undefined"==typeof document?"not a browser":Array.prototype&&Array.prototype.every&&Array.prototype.filter&&Array.prototype.forEach&&Array.prototype.indexOf&&Array.prototype.lastIndexOf&&Array.prototype.map&&Array.prototype.some&&Array.prototype.reduce&&Array.prototype.reduceRight&&Array.isArray?Function.prototype&&Function.prototype.bind?Object.keys&&Object.create&&Object.getPrototypeOf&&Object.getOwnPropertyNames&&Object.isSealed&&Object.isFrozen&&Object.isExtensible&&Object.getOwnPropertyDescriptor&&Object.defineProperty&&Object.defineProperties&&Object.seal&&Object.freeze&&Object.preventExtensions?"JSON"in window&&"parse"in JSON&&"stringify"in JSON?function(){if(!("Worker"in window&&"Blob"in window&&"URL"in window))return!1;var t,e,i=new Blob([""],{type:"text/javascript"}),o=URL.createObjectURL(i);try{e=new Worker(o),t=!0}catch(e){t=!1}return e&&e.terminate(),URL.revokeObjectURL(o),t}()?"Uint8ClampedArray"in window?ArrayBuffer.isView?function(){var t=document.createElement("canvas");t.width=t.height=1;var e=t.getContext("2d");if(!e)return!1;var i=e.getImageData(0,0,1,1);return i&&i.width===t.width}()?(void 0===o[e=t&&t.failIfMajorPerformanceCaveat]&&(o[e]=function(t){var e,o=function(t){var e=document.createElement("canvas"),o=Object.create(i.webGLContextAttributes);return o.failIfMajorPerformanceCaveat=t,e.getContext("webgl",o)||e.getContext("experimental-webgl",o)}(t);if(!o)return!1;try{e=o.createShader(o.VERTEX_SHADER)}catch(t){return!1}return!(!e||o.isContextLost())&&(o.shaderSource(e,"void main() {}"),o.compileShader(e),!0===o.getShaderParameter(e,o.COMPILE_STATUS))}(e)),o[e]?document.documentMode?"insufficient ECMAScript 6 support":void 0:"insufficient WebGL support"):"insufficient Canvas/getImageData support":"insufficient ArrayBuffer support":"insufficient Uint8ClampedArray support":"insufficient worker support":"insufficient JSON support":"insufficient Object support":"insufficient Function support":"insufficent Array support";var e}(t)}var o={};function a(t,e){if(Array.isArray(t)){if(!Array.isArray(e)||t.length!==e.length)return!1;for(let i=0;i<t.length;i++)if(!a(t[i],e[i]))return!1;return!0}if("object"==typeof t&&null!==t&&null!==e){if("object"!=typeof e)return!1;if(Object.keys(t).length!==Object.keys(e).length)return!1;for(const i in t)if(!a(t[i],e[i]))return!1;return!0}return t===e}i.webGLContextAttributes={antialias:!1,alpha:!0,stencil:!0,depth:!0};class s{static testProp(t){if(!s.docStyle)return t[0];for(let e=0;e<t.length;e++)if(t[e]in s.docStyle)return t[e];return t[0]}static create(t,e,i){const o=window.document.createElement(t);return void 0!==e&&(o.className=e),i&&i.appendChild(o),o}static createNS(t,e){return window.document.createElementNS(t,e)}static disableDrag(){s.docStyle&&s.selectProp&&(s.userSelect=s.docStyle[s.selectProp],s.docStyle[s.selectProp]="none")}static enableDrag(){s.docStyle&&s.selectProp&&(s.docStyle[s.selectProp]=s.userSelect)}static setTransform(t,e){t.style[s.transformProp]=e}static addEventListener(t,e,i,o={}){t.addEventListener(e,i,"passive"in o?o:o.capture)}static removeEventListener(t,e,i,o={}){t.removeEventListener(e,i,"passive"in o?o:o.capture)}static suppressClickInternal(t){t.preventDefault(),t.stopPropagation(),window.removeEventListener("click",s.suppressClickInternal,!0)}static suppressClick(){window.addEventListener("click",s.suppressClickInternal,!0),window.setTimeout((()=>{window.removeEventListener("click",s.suppressClickInternal,!0)}),0)}static mousePos(e,i){const o=e.getBoundingClientRect();return new t.pointGeometry(i.clientX-o.left-e.clientLeft,i.clientY-o.top-e.clientTop)}static touchPos(e,i){const o=e.getBoundingClientRect(),a=[];for(let s=0;s<i.length;s++)a.push(new t.pointGeometry(i[s].clientX-o.left-e.clientLeft,i[s].clientY-o.top-e.clientTop));return a}static mouseButton(t){return t.button}static remove(t){t.parentNode&&t.parentNode.removeChild(t)}}s.docStyle="undefined"!=typeof window&&window.document&&window.document.documentElement.style,s.selectProp=s.testProp(["userSelect","MozUserSelect","WebkitUserSelect","msUserSelect"]),s.transformProp=s.testProp(["transform","WebkitTransform"]);class r{constructor(t){this._transformRequestFn=t}transformRequest(t,e){return this._transformRequestFn&&this._transformRequestFn(t,e)||{url:t}}normalizeSpriteURL(t,e,i){const o=function(t){const e=t.match(n);if(!e)throw new Error(`Unable to parse URL "${t}"`);return{protocol:e[1],authority:e[2],path:e[3]||"/",params:e[4]?e[4].split("&"):[]}}(t);return o.path+=`${e}${i}`,function(t){const e=t.params.length?`?${t.params.join("&")}`:"";return`${t.protocol}://${t.authority}${t.path}${e}`}(o)}setTransformRequest(t){this._transformRequestFn=t}}const n=/^(\w+):\/\/([^/?]*)(\/[^?]+)?\??(.+)?/;var l=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)},c="object"==typeof global&&global&&global.Object===Object&&global,h="object"==typeof self&&self&&self.Object===Object&&self,u=c||h||Function("return this")(),d=u,m=/\s/,p=/^\s+/,_=u.Symbol,f=Object.prototype,g=f.hasOwnProperty,x=f.toString,v=_?_.toStringTag:void 0,y=Object.prototype.toString,b=_?_.toStringTag:void 0,w=l,T=/^[-+]0x[0-9a-f]+$/i,E=/^0b[01]+$/i,I=/^0o[0-7]+$/i,S=parseInt,C=l,z=function(){return d.Date.now()},D=function(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return null!=t&&"object"==typeof t}(t)&&"[object Symbol]"==function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":b&&b in Object(t)?function(t){var e=g.call(t,v),i=t[v];try{t[v]=void 0;var o=!0}catch(t){}var a=x.call(t);return o&&(e?t[v]=i:delete t[v]),a}(t):function(t){return y.call(t)}(t)}(t)}(t))return NaN;if(w(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=w(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;var i;t=(i=t)?i.slice(0,function(t){for(var e=t.length;e--&&m.test(t.charAt(e)););return e}(i)+1).replace(p,""):i;var o=E.test(t);return o||I.test(t)?S(t.slice(2),o?2:8):T.test(t)?NaN:+t},P=Math.max,A=Math.min;function M(e){var i=new t.ARRAY_TYPE(3);return i[0]=e[0],i[1]=e[1],i[2]=e[2],i}var R,L=function(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t};R=new t.ARRAY_TYPE(3),t.ARRAY_TYPE!=Float32Array&&(R[0]=0,R[1]=0,R[2]=0);var k=function(t){var e=t[0],i=t[1];return e*e+i*i};!function(){var e=new t.ARRAY_TYPE(2);t.ARRAY_TYPE!=Float32Array&&(e[0]=0,e[1]=0)}();class B{constructor(t,e,i,o){this.context=t,this.format=i,this.texture=t.gl.createTexture(),this.update(e,o)}update(e,i,o){const{width:a,height:s}=e,r=!(this.size&&this.size[0]===a&&this.size[1]===s||o),{context:n}=this,{gl:l}=n;if(this.useMipmap=Boolean(i&&i.useMipmap),l.bindTexture(l.TEXTURE_2D,this.texture),n.pixelStoreUnpackFlipY.set(!1),n.pixelStoreUnpack.set(1),n.pixelStoreUnpackPremultiplyAlpha.set(this.format===l.RGBA&&(!i||!1!==i.premultiply)),r)this.size=[a,s],e instanceof HTMLImageElement||e instanceof HTMLCanvasElement||e instanceof HTMLVideoElement||e instanceof ImageData||t.isImageBitmap(e)?l.texImage2D(l.TEXTURE_2D,0,this.format,this.format,l.UNSIGNED_BYTE,e):l.texImage2D(l.TEXTURE_2D,0,this.format,a,s,0,this.format,l.UNSIGNED_BYTE,e.data);else{const{x:i,y:r}=o||{x:0,y:0};e instanceof HTMLImageElement||e instanceof HTMLCanvasElement||e instanceof HTMLVideoElement||e instanceof ImageData||t.isImageBitmap(e)?l.texSubImage2D(l.TEXTURE_2D,0,i,r,l.RGBA,l.UNSIGNED_BYTE,e):l.texSubImage2D(l.TEXTURE_2D,0,i,r,a,s,l.RGBA,l.UNSIGNED_BYTE,e.data)}this.useMipmap&&this.isSizePowerOfTwo()&&l.generateMipmap(l.TEXTURE_2D)}bind(t,e,i){const{context:o}=this,{gl:a}=o;a.bindTexture(a.TEXTURE_2D,this.texture),i!==a.LINEAR_MIPMAP_NEAREST||this.isSizePowerOfTwo()||(i=a.LINEAR),t!==this.filter&&(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,t),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,i||t),this.filter=t),e!==this.wrap&&(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,e),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,e),this.wrap=e)}isSizePowerOfTwo(){return this.size[0]===this.size[1]&&Math.log(this.size[0])/Math.LN2%1==0}destroy(){const{gl:t}=this.context;t.deleteTexture(this.texture),this.texture=null}}function F(t){const{userImage:e}=t;return!!(e&&e.render&&e.render())&&(t.data.replace(new Uint8Array(e.data.buffer)),!0)}class O extends t.Evented{constructor(){super(),this.images={},this.updatedImages={},this.callbackDispatchedThisFrame={},this.loaded=!1,this.requestors=[],this.patterns={},this.atlasImage=new t.RGBAImage({width:1,height:1}),this.dirty=!0}isLoaded(){return this.loaded}setLoaded(t){if(this.loaded!==t&&(this.loaded=t,t)){for(const{ids:t,callback:e}of this.requestors)this._notify(t,e);this.requestors=[]}}getImage(t){return this.images[t]}addImage(t,e){this._validate(t,e)&&(this.images[t]=e)}_validate(e,i){let o=!0;return this._validateStretch(i.stretchX,i.data&&i.data.width)||(this.fire(new t.ErrorEvent(new Error(`Image "${e}" has invalid "stretchX" value`))),o=!1),this._validateStretch(i.stretchY,i.data&&i.data.height)||(this.fire(new t.ErrorEvent(new Error(`Image "${e}" has invalid "stretchY" value`))),o=!1),this._validateContent(i.content,i)||(this.fire(new t.ErrorEvent(new Error(`Image "${e}" has invalid "content" value`))),o=!1),o}_validateStretch(t,e){if(!t)return!0;let i=0;for(const o of t){if(o[0]<i||o[1]<o[0]||e<o[1])return!1;i=o[1]}return!0}_validateContent(t,e){return!(t&&(4!==t.length||t[0]<0||e.data.width<t[0]||t[1]<0||e.data.height<t[1]||t[2]<0||e.data.width<t[2]||t[3]<0||e.data.height<t[3]||t[2]<t[0]||t[3]<t[1]))}updateImage(t,e){e.version=this.images[t].version+1,this.images[t]=e,this.updatedImages[t]=!0}removeImage(t){const e=this.images[t];delete this.images[t],delete this.patterns[t],e.userImage&&e.userImage.onRemove&&e.userImage.onRemove()}listImages(){return Object.keys(this.images)}getImages(t,e){let i=!0;if(!this.isLoaded())for(const e of t)this.images[e]||(i=!1);this.isLoaded()||i?this._notify(t,e):this.requestors.push({ids:t,callback:e})}_notify(e,i){const o={};for(const i of e){this.images[i]||this.fire(new t.Event("styleimagemissing",{id:i}));const e=this.images[i];e?o[i]={data:e.data.clone(),pixelRatio:e.pixelRatio,sdf:e.sdf,version:e.version,stretchX:e.stretchX,stretchY:e.stretchY,content:e.content,hasRenderCallback:Boolean(e.userImage&&e.userImage.render)}:t.warnOnce(`Image "${i}" could not be loaded. Please make sure you have added the image with map.addImage() or a "sprite" property in your style. You can provide missing images by listening for the "styleimagemissing" map event.`)}i(null,o)}getPixelSize(){const{width:t,height:e}=this.atlasImage;return{width:t,height:e}}getPattern(e){const i=this.patterns[e],o=this.getImage(e);if(!o)return null;if(i&&i.position.version===o.version)return i.position;if(i)i.position.version=o.version;else{const i={w:o.data.width+2,h:o.data.height+2,x:0,y:0},a=new t.ImagePosition(i,o);this.patterns[e]={bin:i,position:a}}return this._updatePatternAtlas(),this.patterns[e].position}bind(t){const e=t.gl;this.atlasTexture?this.dirty&&(this.atlasTexture.update(this.atlasImage),this.dirty=!1):this.atlasTexture=new B(t,this.atlasImage,e.RGBA),this.atlasTexture.bind(e.LINEAR,e.CLAMP_TO_EDGE)}_updatePatternAtlas(){const e=[];for(const t in this.patterns)e.push(this.patterns[t].bin);const{w:i,h:o}=t.potpack(e),a=this.atlasImage;a.resize({width:i||1,height:o||1});for(const e in this.patterns){const{bin:i}=this.patterns[e],o=i.x+1,s=i.y+1,r=this.images[e].data,n=r.width,l=r.height;t.RGBAImage.copy(r,a,{x:0,y:0},{x:o,y:s},{width:n,height:l}),t.RGBAImage.copy(r,a,{x:0,y:l-1},{x:o,y:s-1},{width:n,height:1}),t.RGBAImage.copy(r,a,{x:0,y:0},{x:o,y:s+l},{width:n,height:1}),t.RGBAImage.copy(r,a,{x:n-1,y:0},{x:o-1,y:s},{width:1,height:l}),t.RGBAImage.copy(r,a,{x:0,y:0},{x:o+n,y:s},{width:1,height:l})}this.dirty=!0}beginFrame(){this.callbackDispatchedThisFrame={}}dispatchRenderCallbacks(t){for(const e of t){if(this.callbackDispatchedThisFrame[e])continue;this.callbackDispatchedThisFrame[e]=!0;const t=this.images[e];F(t)&&this.updateImage(e,t)}}}const U=1e20;function N(t,e,i,o,a,s,r,n,l){for(let c=e;c<e+o;c++)G(t,i*s+c,s,a,r,n,l);for(let c=i;c<i+a;c++)G(t,c*s+e,1,o,r,n,l)}function G(t,e,i,o,a,s,r){s[0]=0,r[0]=-U,r[1]=U,a[0]=t[e];for(let n=1,l=0,c=0;n<o;n++){a[n]=t[e+n*i];const o=n*n;do{const t=s[l];c=(a[n]-a[t]+o-t*t)/(n-t)/2}while(c<=r[l]&&--l>-1);l++,s[l]=n,r[l]=c,r[l+1]=U}for(let n=0,l=0;n<o;n++){for(;r[l+1]<n;)l++;const o=s[l],c=n-o;t[e+n*i]=a[o]+c*c}}class Z{constructor(t,e){this.requestManager=t,this.localIdeographFontFamily=e,this.entries={}}setURL(t){this.url=t}getGlyphs(e,i){const o=[];for(const t in e)for(const i of e[t])o.push({stack:t,id:i});t.asyncAll(o,(({stack:t,id:e},i)=>{let o=this.entries[t];o||(o=this.entries[t]={glyphs:{},requests:{},ranges:{}});let a=o.glyphs[e];if(void 0!==a)return void i(null,{stack:t,id:e,glyph:a});if(a=this._tinySDF(o,t,e),a)return o.glyphs[e]=a,void i(null,{stack:t,id:e,glyph:a});const s=Math.floor(e/256);if(256*s>65535)return void i(new Error("glyphs > 65535 not supported"));if(o.ranges[s])return void i(null,{stack:t,id:e,glyph:a});let r=o.requests[s];r||(r=o.requests[s]=[],Z.loadGlyphRange(t,s,this.url,this.requestManager,((t,e)=>{if(e){for(const t in e)this._doesCharSupportLocalGlyph(+t)||(o.glyphs[+t]=e[+t]);o.ranges[s]=!0}for(const i of r)i(t,e);delete o.requests[s]}))),r.push(((o,a)=>{o?i(o):a&&i(null,{stack:t,id:e,glyph:a[e]||null})}))}),((t,e)=>{if(t)i(t);else if(e){const t={};for(const{stack:i,id:o,glyph:a}of e)(t[i]||(t[i]={}))[o]=a&&{id:a.id,bitmap:a.bitmap.clone(),metrics:a.metrics};i(null,t)}}))}_doesCharSupportLocalGlyph(e){return!!this.localIdeographFontFamily&&(t.unicodeBlockLookup["CJK Unified Ideographs"](e)||t.unicodeBlockLookup["Hangul Syllables"](e)||t.unicodeBlockLookup.Hiragana(e)||t.unicodeBlockLookup.Katakana(e))}_tinySDF(e,i,o){const a=this.localIdeographFontFamily;if(!a)return;if(!this._doesCharSupportLocalGlyph(o))return;let s=e.tinySDF;if(!s){let t="400";/bold/i.test(i)?t="900":/medium/i.test(i)?t="500":/light/i.test(i)&&(t="200"),s=e.tinySDF=new Z.TinySDF({fontSize:24,buffer:3,radius:8,cutoff:.25,fontFamily:a,fontWeight:t})}const r=s.draw(String.fromCharCode(o));return{id:o,bitmap:new t.AlphaImage({width:r.width||30,height:r.height||30},r.data),metrics:{width:r.glyphWidth||24,height:r.glyphHeight||24,left:r.glyphLeft||0,top:r.glyphTop-27||-8,advance:r.glyphAdvance||24}}}}Z.loadGlyphRange=function(e,i,o,a,s){const r=256*i,n=r+255,l=a.transformRequest(o.replace("{fontstack}",e).replace("{range}",`${r}-${n}`),t.ResourceType.Glyphs);t.getArrayBuffer(l,((e,i)=>{if(e)s(e);else if(i){const e={};for(const o of t.parseGlyphPbf(i))e[o.id]=o;s(null,e)}}))},Z.TinySDF=class{constructor({fontSize:t=24,buffer:e=3,radius:i=8,cutoff:o=.25,fontFamily:a="sans-serif",fontWeight:s="normal",fontStyle:r="normal"}){this.buffer=e,this.cutoff=o,this.radius=i;const n=this.size=t+4*e,l=this._createCanvas(n),c=this.ctx=l.getContext("2d",{willReadFrequently:!0});c.font=`${r} ${s} ${t}px ${a}`,c.textBaseline="alphabetic",c.textAlign="left",c.fillStyle="black",this.gridOuter=new Float64Array(n*n),this.gridInner=new Float64Array(n*n),this.f=new Float64Array(n),this.z=new Float64Array(n+1),this.v=new Uint16Array(n)}_createCanvas(t){const e=document.createElement("canvas");return e.width=e.height=t,e}draw(t){const{width:e,actualBoundingBoxAscent:i,actualBoundingBoxDescent:o,actualBoundingBoxLeft:a,actualBoundingBoxRight:s}=this.ctx.measureText(t),r=Math.floor(i),n=Math.min(this.size-this.buffer,Math.ceil(s-a)),l=Math.min(this.size-this.buffer,Math.ceil(i)+Math.ceil(o)),c=n+2*this.buffer,h=l+2*this.buffer,u=c*h,d=new Uint8ClampedArray(u),m={data:d,width:c,height:h,glyphWidth:n,glyphHeight:l,glyphTop:r,glyphLeft:0,glyphAdvance:e};if(0===n||0===l)return m;const{ctx:p,buffer:_,gridInner:f,gridOuter:g}=this;p.clearRect(_,_,n,l),p.fillText(t,_,_+r+1);const x=p.getImageData(_,_,n,l);g.fill(U,0,u),f.fill(0,0,u);for(let t=0;t<l;t++)for(let e=0;e<n;e++){const i=x.data[4*(t*n+e)+3]/255;if(0===i)continue;const o=(t+_)*c+e+_;if(1===i)g[o]=0,f[o]=U;else{const t=.5-i;g[o]=t>0?t*t:0,f[o]=t<0?t*t:0}}N(g,0,0,c,h,c,this.f,this.v,this.z),N(f,_,_,n,l,c,this.f,this.v,this.z);for(let t=0;t<u;t++){const e=Math.sqrt(g[t])-Math.sqrt(f[t]);d[t]=Math.round(255-255*(e/this.radius+this.cutoff))}return m}};const q=new t.Properties({anchor:new t.DataConstantProperty(t.spec.light.anchor),position:new class{constructor(){this.specification=t.spec.light.position}possiblyEvaluate(e,i){return t.sphericalToCartesian(e.expression.evaluate(i))}interpolate(e,i,o){return{x:t.number(e.x,i.x,o),y:t.number(e.y,i.y,o),z:t.number(e.z,i.z,o)}}},color:new t.DataConstantProperty(t.spec.light.color),intensity:new t.DataConstantProperty(t.spec.light.intensity)}),j="-transition";class V extends t.Evented{constructor(e){super(),this._transitionable=new t.Transitionable(q),this.setLight(e),this._transitioning=this._transitionable.untransitioned()}getLight(){return this._transitionable.serialize()}setLight(e,i={}){if(!this._validate(t.validateLight,e,i))for(const t in e){const i=e[t];t.endsWith(j)?this._transitionable.setTransition(t.slice(0,-j.length),i):this._transitionable.setValue(t,i)}}updateTransitions(t){this._transitioning=this._transitionable.transitioned(t,this._transitioning)}hasTransition(){return this._transitioning.hasTransition()}recalculate(t){this.properties=this._transitioning.possiblyEvaluate(t)}_validate(e,i,o){return(!o||!1!==o.validate)&&t.emitValidationErrors(this,e.call(t.validateStyle,t.extend({value:i,style:{glyphs:!0,sprite:!0},styleSpec:t.spec})))}}class X{constructor(t,e){this.width=t,this.height=e,this.nextRow=0,this.data=new Uint8Array(this.width*this.height),this.dashEntry={}}getDash(t,e){const i=t.join(",")+String(e);return this.dashEntry[i]||(this.dashEntry[i]=this.addDash(t,e)),this.dashEntry[i]}getDashRanges(t,e,i){const o=[];let a=t.length%2==1?-t[t.length-1]*i:0,s=t[0]*i,r=!0;o.push({left:a,right:s,isDash:r,zeroLength:0===t[0]});let n=t[0];for(let e=1;e<t.length;e++){r=!r;const l=t[e];a=n*i,n+=l,s=n*i,o.push({left:a,right:s,isDash:r,zeroLength:0===l})}return o}addRoundDash(t,e,i){const o=e/2;for(let e=-i;e<=i;e++){const a=this.width*(this.nextRow+i+e);let s=0,r=t[s];for(let n=0;n<this.width;n++){n/r.right>1&&(r=t[++s]);const l=Math.abs(n-r.left),c=Math.abs(n-r.right),h=Math.min(l,c);let u;const d=e/i*(o+1);if(r.isDash){const t=o-Math.abs(d);u=Math.sqrt(h*h+t*t)}else u=o-Math.sqrt(h*h+d*d);this.data[a+n]=Math.max(0,Math.min(255,u+128))}}}addRegularDash(t){for(let e=t.length-1;e>=0;--e){const i=t[e],o=t[e+1];i.zeroLength?t.splice(e,1):o&&o.isDash===i.isDash&&(o.left=i.left,t.splice(e,1))}const e=t[0],i=t[t.length-1];e.isDash===i.isDash&&(e.left=i.left-this.width,i.right=e.right+this.width);const o=this.width*this.nextRow;let a=0,s=t[a];for(let e=0;e<this.width;e++){e/s.right>1&&(s=t[++a]);const i=Math.abs(e-s.left),r=Math.abs(e-s.right),n=Math.min(i,r);this.data[o+e]=Math.max(0,Math.min(255,(s.isDash?n:-n)+128))}}addDash(e,i){const o=i?7:0,a=2*o+1;if(this.nextRow+a>this.height)return t.warnOnce("LineAtlas out of space"),null;let s=0;for(let t=0;t<e.length;t++)s+=e[t];if(0!==s){const t=this.width/s,a=this.getDashRanges(e,this.width,t);i?this.addRoundDash(a,t,o):this.addRegularDash(a)}const r={y:(this.nextRow+o+.5)/this.height,height:2*o/this.height,width:s};return this.nextRow+=a,this.dirty=!0,r}bind(t){const e=t.gl;this.texture?(e.bindTexture(e.TEXTURE_2D,this.texture),this.dirty&&(this.dirty=!1,e.texSubImage2D(e.TEXTURE_2D,0,0,0,this.width,this.height,e.ALPHA,e.UNSIGNED_BYTE,this.data))):(this.texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.ALPHA,this.width,this.height,0,e.ALPHA,e.UNSIGNED_BYTE,this.data))}}class ${constructor(e,i){this.workerPool=e,this.actors=[],this.currentActor=0,this.id=t.uniqueId();const o=this.workerPool.acquire(this.id);for(let t=0;t<o.length;t++){const e=new $.Actor(o[t],i,this.id);e.name=`Worker ${t}`,this.actors.push(e)}}broadcast(e,i,o){t.asyncAll(this.actors,((t,o)=>{t.send(e,i,o)}),o=o||function(){})}getActor(){return this.currentActor=(this.currentActor+1)%this.actors.length,this.actors[this.currentActor]}remove(){this.actors.forEach((t=>{t.remove()})),this.actors=[],this.workerPool.release(this.id)}}function W(e,i,o){const a=function(i,a){if(i)return o(i);if(a){const i=t.pick(t.extend(a,e),["tiles","minzoom","maxzoom","attribution","bounds","scheme","tileSize","encoding"]);a.vector_layers&&(i.vectorLayers=a.vector_layers,i.vectorLayerIds=i.vectorLayers.map((t=>t.id))),o(null,i)}};return e.url?t.getJSON(i.transformRequest(e.url,t.ResourceType.Source),a):t.exported.frame((()=>a(null,e)))}$.Actor=t.Actor;class H{constructor(e,i,o){this.bounds=t.LngLatBounds.convert(this.validateBounds(e)),this.minzoom=i||0,this.maxzoom=o||24}validateBounds(t){return Array.isArray(t)&&4===t.length?[Math.max(-180,t[0]),Math.max(-90,t[1]),Math.min(180,t[2]),Math.min(90,t[3])]:[-180,-90,180,90]}contains(e){const i=Math.pow(2,e.z),o=Math.floor(t.mercatorXfromLng(this.bounds.getWest())*i),a=Math.floor(t.mercatorYfromLat(this.bounds.getNorth())*i),s=Math.ceil(t.mercatorXfromLng(this.bounds.getEast())*i),r=Math.ceil(t.mercatorYfromLat(this.bounds.getSouth())*i);return e.x>=o&&e.x<s&&e.y>=a&&e.y<r}}class K extends t.Evented{constructor(e,i,o,a){if(super(),this.id=e,this.dispatcher=o,this.type="vector",this.minzoom=0,this.maxzoom=22,this.scheme="xyz",this.tileSize=512,this.reparseOverscaled=!0,this.isTileClipped=!0,this._loaded=!1,t.extend(this,t.pick(i,["url","scheme","tileSize","promoteId"])),this._options=t.extend({type:"vector"},i),this._collectResourceTiming=i.collectResourceTiming,512!==this.tileSize)throw new Error("vector tile sources must have a tileSize of 512");this.setEventedParent(a)}load(){this._loaded=!1,this.fire(new t.Event("dataloading",{dataType:"source"})),this._tileJSONRequest=W(this._options,this.map._requestManager,((e,i)=>{this._tileJSONRequest=null,this._loaded=!0,this.map.style.sourceCaches[this.id].clearTiles(),e?this.fire(new t.ErrorEvent(e)):i&&(t.extend(this,i),i.bounds&&(this.tileBounds=new H(i.bounds,this.minzoom,this.maxzoom)),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})))}))}loaded(){return this._loaded}hasTile(t){return!this.tileBounds||this.tileBounds.contains(t.canonical)}onAdd(t){this.map=t,this.load()}setSourceProperty(t){this._tileJSONRequest&&this._tileJSONRequest.cancel(),t(),this.load()}setTiles(t){return this.setSourceProperty((()=>{this._options.tiles=t})),this}setUrl(t){return this.setSourceProperty((()=>{this.url=t,this._options.url=t})),this}onRemove(){this._tileJSONRequest&&(this._tileJSONRequest.cancel(),this._tileJSONRequest=null)}serialize(){return t.extend({},this._options)}loadTile(e,i){const o=e.tileID.canonical.url(this.tiles,this.map.getPixelRatio(),this.scheme),a={request:this.map._requestManager.transformRequest(o,t.ResourceType.Tile),uid:e.uid,tileID:e.tileID,zoom:e.tileID.overscaledZ,tileSize:this.tileSize*e.tileID.overscaleFactor(),type:this.type,source:this.id,pixelRatio:this.map.getPixelRatio(),showCollisionBoxes:this.map.showCollisionBoxes,promoteId:this.promoteId};function s(o,a){return delete e.request,e.aborted?i(null):o&&404!==o.status?i(o):(a&&a.resourceTiming&&(e.resourceTiming=a.resourceTiming),this.map._refreshExpiredTiles&&a&&e.setExpiryData(a),e.loadVectorData(a,this.map.painter),t.cacheEntryPossiblyAdded(this.dispatcher),i(null),void(e.reloadCallback&&(this.loadTile(e,e.reloadCallback),e.reloadCallback=null)))}a.request.collectResourceTiming=this._collectResourceTiming,e.actor&&"expired"!==e.state?"loading"===e.state?e.reloadCallback=i:e.request=e.actor.send("reloadTile",a,s.bind(this)):(e.actor=this.dispatcher.getActor(),e.request=e.actor.send("loadTile",a,s.bind(this)))}abortTile(t){t.request&&(t.request.cancel(),delete t.request),t.actor&&t.actor.send("abortTile",{uid:t.uid,type:this.type,source:this.id},void 0)}unloadTile(t){t.unloadVectorData(),t.actor&&t.actor.send("removeTile",{uid:t.uid,type:this.type,source:this.id},void 0)}hasTransition(){return!1}}class Y extends t.Evented{constructor(e,i,o,a){super(),this.id=e,this.dispatcher=o,this.setEventedParent(a),this.type="raster",this.minzoom=0,this.maxzoom=22,this.roundZoom=!0,this.scheme="xyz",this.tileSize=512,this._loaded=!1,this._options=t.extend({type:"raster"},i),t.extend(this,t.pick(i,["url","scheme","tileSize"]))}load(){this._loaded=!1,this.fire(new t.Event("dataloading",{dataType:"source"})),this._tileJSONRequest=W(this._options,this.map._requestManager,((e,i)=>{this._tileJSONRequest=null,this._loaded=!0,e?this.fire(new t.ErrorEvent(e)):i&&(t.extend(this,i),i.bounds&&(this.tileBounds=new H(i.bounds,this.minzoom,this.maxzoom)),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})))}))}loaded(){return this._loaded}onAdd(t){this.map=t,this.load()}onRemove(){this._tileJSONRequest&&(this._tileJSONRequest.cancel(),this._tileJSONRequest=null)}serialize(){return t.extend({},this._options)}hasTile(t){return!this.tileBounds||this.tileBounds.contains(t.canonical)}loadTile(e,i){const o=e.tileID.canonical.url(this.tiles,this.map.getPixelRatio(),this.scheme);e.request=t.getImage(this.map._requestManager.transformRequest(o,t.ResourceType.Tile),((o,a,s)=>{if(delete e.request,e.aborted)e.state="unloaded",i(null);else if(o)e.state="errored",i(o);else if(a){this.map._refreshExpiredTiles&&e.setExpiryData(s);const o=this.map.painter.context,r=o.gl;e.texture=this.map.painter.getTileTexture(a.width),e.texture?e.texture.update(a,{useMipmap:!0}):(e.texture=new B(o,a,r.RGBA,{useMipmap:!0}),e.texture.bind(r.LINEAR,r.CLAMP_TO_EDGE,r.LINEAR_MIPMAP_NEAREST),o.extTextureFilterAnisotropic&&r.texParameterf(r.TEXTURE_2D,o.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,o.extTextureFilterAnisotropicMax)),e.state="loaded",t.cacheEntryPossiblyAdded(this.dispatcher),i(null)}}))}abortTile(t,e){t.request&&(t.request.cancel(),delete t.request),e()}unloadTile(t,e){t.texture&&this.map.painter.saveTileTexture(t.texture),e()}hasTransition(){return!1}}let J;class Q extends Y{constructor(e,i,o,a){super(e,i,o,a),this.type="raster-dem",this.maxzoom=22,this._options=t.extend({type:"raster-dem"},i),this.encoding=i.encoding||"mapbox"}serialize(){return{type:"raster-dem",url:this.url,tileSize:this.tileSize,tiles:this.tiles,bounds:this.bounds,encoding:this.encoding}}loadTile(e,i){const o=e.tileID.canonical.url(this.tiles,this.map.getPixelRatio(),this.scheme);function a(t,o){t&&(e.state="errored",i(t)),o&&(e.dem=o,e.needsHillshadePrepare=!0,e.needsTerrainPrepare=!0,e.state="loaded",i(null))}e.request=t.getImage(this.map._requestManager.transformRequest(o,t.ResourceType.Tile),function(o,s){if(delete e.request,e.aborted)e.state="unloaded",i(null);else if(o)e.state="errored",i(o);else if(s){this.map._refreshExpiredTiles&&e.setExpiryData(s),delete s.cacheControl,delete s.expires;const i=t.isImageBitmap(s)&&(null==J&&(J="undefined"!=typeof OffscreenCanvas&&new OffscreenCanvas(1,1).getContext("2d")&&"function"==typeof createImageBitmap),J)?s:t.exported.getImageData(s,1),o={uid:e.uid,coord:e.tileID,source:this.id,rawImageData:i,encoding:this.encoding};e.actor&&"expired"!==e.state||(e.actor=this.dispatcher.getActor(),e.actor.send("loadDEMTile",o,a.bind(this)))}}.bind(this)),e.neighboringTiles=this._getNeighboringTiles(e.tileID)}_getNeighboringTiles(e){const i=e.canonical,o=Math.pow(2,i.z),a=(i.x-1+o)%o,s=0===i.x?e.wrap-1:e.wrap,r=(i.x+1+o)%o,n=i.x+1===o?e.wrap+1:e.wrap,l={};return l[new t.OverscaledTileID(e.overscaledZ,s,i.z,a,i.y).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,n,i.z,r,i.y).key]={backfilled:!1},i.y>0&&(l[new t.OverscaledTileID(e.overscaledZ,s,i.z,a,i.y-1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,e.wrap,i.z,i.x,i.y-1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,n,i.z,r,i.y-1).key]={backfilled:!1}),i.y+1<o&&(l[new t.OverscaledTileID(e.overscaledZ,s,i.z,a,i.y+1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,e.wrap,i.z,i.x,i.y+1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,n,i.z,r,i.y+1).key]={backfilled:!1}),l}unloadTile(t){t.demTexture&&this.map.painter.saveTileTexture(t.demTexture),t.fbo&&(t.fbo.destroy(),delete t.fbo),t.dem&&delete t.dem,delete t.neighboringTiles,t.state="unloaded",t.actor&&t.actor.send("removeDEMTile",{uid:t.uid,source:this.id})}}class tt extends t.Evented{constructor(e,i,o,a){super(),this.id=e,this.type="geojson",this.minzoom=0,this.maxzoom=18,this.tileSize=512,this.isTileClipped=!0,this.reparseOverscaled=!0,this._removed=!1,this._pendingLoads=0,this.actor=o.getActor(),this.setEventedParent(a),this._data=i.data,this._options=t.extend({},i),this._collectResourceTiming=i.collectResourceTiming,void 0!==i.maxzoom&&(this.maxzoom=i.maxzoom),i.type&&(this.type=i.type),i.attribution&&(this.attribution=i.attribution),this.promoteId=i.promoteId;const s=t.EXTENT/this.tileSize;this.workerOptions=t.extend({source:this.id,cluster:i.cluster||!1,geojsonVtOptions:{buffer:(void 0!==i.buffer?i.buffer:128)*s,tolerance:(void 0!==i.tolerance?i.tolerance:.375)*s,extent:t.EXTENT,maxZoom:this.maxzoom,lineMetrics:i.lineMetrics||!1,generateId:i.generateId||!1},superclusterOptions:{maxZoom:void 0!==i.clusterMaxZoom?i.clusterMaxZoom:this.maxzoom-1,minPoints:Math.max(2,i.clusterMinPoints||2),extent:t.EXTENT,radius:(i.clusterRadius||50)*s,log:!1,generateId:i.generateId||!1},clusterProperties:i.clusterProperties,filter:i.filter},i.workerOptions)}load(){this._updateWorkerData("metadata")}onAdd(t){this.map=t,this.load()}setData(t){return this._data=t,this._updateWorkerData("content"),this}getClusterExpansionZoom(t,e){return this.actor.send("geojson.getClusterExpansionZoom",{clusterId:t,source:this.id},e),this}getClusterChildren(t,e){return this.actor.send("geojson.getClusterChildren",{clusterId:t,source:this.id},e),this}getClusterLeaves(t,e,i,o){return this.actor.send("geojson.getClusterLeaves",{source:this.id,clusterId:t,limit:e,offset:i},o),this}_updateWorkerData(e){const i=t.extend({},this.workerOptions),o=this._data;"string"==typeof o?(i.request=this.map._requestManager.transformRequest(t.exported.resolveURL(o),t.ResourceType.Source),i.request.collectResourceTiming=this._collectResourceTiming):i.data=JSON.stringify(o),this._pendingLoads++,this.fire(new t.Event("dataloading",{dataType:"source"})),this.actor.send(`${this.type}.loadData`,i,((i,o)=>{if(this._pendingLoads--,this._removed||o&&o.abandoned)return void this.fire(new t.Event("dataabort",{dataType:"source",sourceDataType:e}));let a=null;if(o&&o.resourceTiming&&o.resourceTiming[this.id]&&(a=o.resourceTiming[this.id].slice(0)),i)return void this.fire(new t.ErrorEvent(i));const s={dataType:"source",sourceDataType:e};this._collectResourceTiming&&a&&a.length>0&&t.extend(s,{resourceTiming:a}),this.fire(new t.Event("data",s))}))}loaded(){return 0===this._pendingLoads}loadTile(t,e){const i=t.actor?"reloadTile":"loadTile";t.actor=this.actor;const o={type:this.type,uid:t.uid,tileID:t.tileID,zoom:t.tileID.overscaledZ,maxZoom:this.maxzoom,tileSize:this.tileSize,source:this.id,pixelRatio:this.map.getPixelRatio(),showCollisionBoxes:this.map.showCollisionBoxes,promoteId:this.promoteId};t.request=this.actor.send(i,o,((o,a)=>(delete t.request,t.unloadVectorData(),t.aborted?e(null):o?e(o):(t.loadVectorData(a,this.map.painter,"reloadTile"===i),e(null)))))}abortTile(t){t.request&&(t.request.cancel(),delete t.request),t.aborted=!0}unloadTile(t){t.unloadVectorData(),this.actor.send("removeTile",{uid:t.uid,type:this.type,source:this.id})}onRemove(){this._removed=!0,this.actor.send("removeSource",{type:this.type,source:this.id})}serialize(){return t.extend({},this._options,{type:this.type,data:this._data})}hasTransition(){return!1}}var et=t.createLayout([{name:"a_pos",type:"Int16",components:2},{name:"a_texture_pos",type:"Int16",components:2}]);class it extends t.Evented{constructor(t,e,i,o){super(),this.id=t,this.dispatcher=i,this.coordinates=e.coordinates,this.type="image",this.minzoom=0,this.maxzoom=22,this.tileSize=512,this.tiles={},this._loaded=!1,this.setEventedParent(o),this.options=e}load(e,i){this._loaded=!1,this.fire(new t.Event("dataloading",{dataType:"source"})),this.url=this.options.url,t.getImage(this.map._requestManager.transformRequest(this.url,t.ResourceType.Image),((o,a)=>{this._loaded=!0,o?this.fire(new t.ErrorEvent(o)):a&&(this.image=a,e&&(this.coordinates=e),i&&i(),this._finishLoading())}))}loaded(){return this._loaded}updateImage(t){return this.image&&t.url?(this.options.url=t.url,this.load(t.coordinates,(()=>{this.texture=null})),this):this}_finishLoading(){this.map&&(this.setCoordinates(this.coordinates),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})))}onAdd(t){this.map=t,this.load()}setCoordinates(e){this.coordinates=e;const i=e.map(t.MercatorCoordinate.fromLngLat);this.tileID=function(e){let i=1/0,o=1/0,a=-1/0,s=-1/0;for(const t of e)i=Math.min(i,t.x),o=Math.min(o,t.y),a=Math.max(a,t.x),s=Math.max(s,t.y);const r=Math.max(a-i,s-o),n=Math.max(0,Math.floor(-Math.log(r)/Math.LN2)),l=Math.pow(2,n);return new t.CanonicalTileID(n,Math.floor((i+a)/2*l),Math.floor((o+s)/2*l))}(i),this.minzoom=this.maxzoom=this.tileID.z;const o=i.map((t=>this.tileID.getTilePoint(t)._round()));return this._boundsArray=new t.RasterBoundsArray,this._boundsArray.emplaceBack(o[0].x,o[0].y,0,0),this._boundsArray.emplaceBack(o[1].x,o[1].y,t.EXTENT,0),this._boundsArray.emplaceBack(o[3].x,o[3].y,0,t.EXTENT),this._boundsArray.emplaceBack(o[2].x,o[2].y,t.EXTENT,t.EXTENT),this.boundsBuffer&&(this.boundsBuffer.destroy(),delete this.boundsBuffer),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})),this}prepare(){if(0===Object.keys(this.tiles).length||!this.image)return;const e=this.map.painter.context,i=e.gl;this.boundsBuffer||(this.boundsBuffer=e.createVertexBuffer(this._boundsArray,et.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture||(this.texture=new B(e,this.image,i.RGBA),this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE));for(const t in this.tiles){const e=this.tiles[t];"loaded"!==e.state&&(e.state="loaded",e.texture=this.texture)}}loadTile(t,e){this.tileID&&this.tileID.equals(t.tileID.canonical)?(this.tiles[String(t.tileID.wrap)]=t,t.buckets={},e(null)):(t.state="errored",e(null))}serialize(){return{type:"image",url:this.options.url,coordinates:this.coordinates}}hasTransition(){return!1}}class ot extends it{constructor(t,e,i,o){super(t,e,i,o),this.roundZoom=!0,this.type="video",this.options=e}load(){this._loaded=!1;const e=this.options;this.urls=[];for(const i of e.urls)this.urls.push(this.map._requestManager.transformRequest(i,t.ResourceType.Source).url);t.getVideo(this.urls,((e,i)=>{this._loaded=!0,e?this.fire(new t.ErrorEvent(e)):i&&(this.video=i,this.video.loop=!0,this.video.addEventListener("playing",(()=>{this.map.triggerRepaint()})),this.map&&this.video.play(),this._finishLoading())}))}pause(){this.video&&this.video.pause()}play(){this.video&&this.video.play()}seek(e){if(this.video){const i=this.video.seekable;e<i.start(0)||e>i.end(0)?this.fire(new t.ErrorEvent(new t.ValidationError(`sources.${this.id}`,null,`Playback for this video can be set only between the ${i.start(0)} and ${i.end(0)}-second mark.`))):this.video.currentTime=e}}getVideo(){return this.video}onAdd(t){this.map||(this.map=t,this.load(),this.video&&(this.video.play(),this.setCoordinates(this.coordinates)))}prepare(){if(0===Object.keys(this.tiles).length||this.video.readyState<2)return;const e=this.map.painter.context,i=e.gl;this.boundsBuffer||(this.boundsBuffer=e.createVertexBuffer(this._boundsArray,et.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture?this.video.paused||(this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE),i.texSubImage2D(i.TEXTURE_2D,0,0,0,i.RGBA,i.UNSIGNED_BYTE,this.video)):(this.texture=new B(e,this.video,i.RGBA),this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE));for(const t in this.tiles){const e=this.tiles[t];"loaded"!==e.state&&(e.state="loaded",e.texture=this.texture)}}serialize(){return{type:"video",urls:this.urls,coordinates:this.coordinates}}hasTransition(){return this.video&&!this.video.paused}}class at extends it{constructor(e,i,o,a){super(e,i,o,a),i.coordinates?Array.isArray(i.coordinates)&&4===i.coordinates.length&&!i.coordinates.some((t=>!Array.isArray(t)||2!==t.length||t.some((t=>"number"!=typeof t))))||this.fire(new t.ErrorEvent(new t.ValidationError(`sources.${e}`,null,'"coordinates" property must be an array of 4 longitude/latitude array pairs'))):this.fire(new t.ErrorEvent(new t.ValidationError(`sources.${e}`,null,'missing required property "coordinates"'))),i.animate&&"boolean"!=typeof i.animate&&this.fire(new t.ErrorEvent(new t.ValidationError(`sources.${e}`,null,'optional "animate" property must be a boolean value'))),i.canvas?"string"==typeof i.canvas||i.canvas instanceof HTMLCanvasElement||this.fire(new t.ErrorEvent(new t.ValidationError(`sources.${e}`,null,'"canvas" must be either a string representing the ID of the canvas element from which to read, or an HTMLCanvasElement instance'))):this.fire(new t.ErrorEvent(new t.ValidationError(`sources.${e}`,null,'missing required property "canvas"'))),this.options=i,this.animate=void 0===i.animate||i.animate}load(){this._loaded=!0,this.canvas||(this.canvas=this.options.canvas instanceof HTMLCanvasElement?this.options.canvas:document.getElementById(this.options.canvas)),this.width=this.canvas.width,this.height=this.canvas.height,this._hasInvalidDimensions()?this.fire(new t.ErrorEvent(new Error("Canvas dimensions cannot be less than or equal to zero."))):(this.play=function(){this._playing=!0,this.map.triggerRepaint()},this.pause=function(){this._playing&&(this.prepare(),this._playing=!1)},this._finishLoading())}getCanvas(){return this.canvas}onAdd(t){this.map=t,this.load(),this.canvas&&this.animate&&this.play()}onRemove(){this.pause()}prepare(){let e=!1;if(this.canvas.width!==this.width&&(this.width=this.canvas.width,e=!0),this.canvas.height!==this.height&&(this.height=this.canvas.height,e=!0),this._hasInvalidDimensions())return;if(0===Object.keys(this.tiles).length)return;const i=this.map.painter.context,o=i.gl;this.boundsBuffer||(this.boundsBuffer=i.createVertexBuffer(this._boundsArray,et.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture?(e||this._playing)&&this.texture.update(this.canvas,{premultiply:!0}):this.texture=new B(i,this.canvas,o.RGBA,{premultiply:!0});for(const t in this.tiles){const e=this.tiles[t];"loaded"!==e.state&&(e.state="loaded",e.texture=this.texture)}}serialize(){return{type:"canvas",coordinates:this.coordinates}}hasTransition(){return this._playing}_hasInvalidDimensions(){for(const t of[this.canvas.width,this.canvas.height])if(isNaN(t)||t<=0)return!0;return!1}}const st={vector:K,raster:Y,temporalgrid:class extends K{constructor(t,e,i,o){super(t,e,i,o),this.type="temporalgrid"}},"raster-dem":Q,geojson:tt,video:ot,image:it,canvas:at};function rt(e,i){const o=t.create();return t.translate(o,o,[1,1,0]),t.scale(o,o,[.5*e.width,.5*e.height,1]),t.multiply(o,o,e.calculatePosMatrix(i.toUnwrapped()))}function nt(t,e,i,o,a,s){const r=function(t,e,i){if(t)for(const o of t){const t=e[o];if(t&&t.source===i&&"fill-extrusion"===t.type)return!0}else for(const t in e){const o=e[t];if(o.source===i&&"fill-extrusion"===o.type)return!0}return!1}(a&&a.layers,e,t.id),n=s.maxPitchScaleFactor(),l=t.tilesIn(o,n,r);l.sort(lt);const c=[];for(const o of l)c.push({wrappedTileID:o.tileID.wrapped().key,queryResults:o.tile.queryRenderedFeatures(e,i,t._state,o.queryGeometry,o.cameraQueryGeometry,o.scale,a,s,n,rt(t.transform,o.tileID))});const h=function(t){const e={},i={};for(const o of t){const t=o.queryResults,a=o.wrappedTileID,s=i[a]=i[a]||{};for(const i in t){const o=t[i],a=s[i]=s[i]||{},r=e[i]=e[i]||[];for(const t of o)a[t.featureIndex]||(a[t.featureIndex]=!0,r.push(t))}}return e}(c);for(const e in h)h[e].forEach((e=>{const i=e.feature,o=t.getFeatureState(i.layer["source-layer"],i.id);i.source=i.layer.source,i.layer["source-layer"]&&(i.sourceLayer=i.layer["source-layer"]),i.state=o}));return h}function lt(t,e){const i=t.tileID,o=e.tileID;return i.overscaledZ-o.overscaledZ||i.canonical.y-o.canonical.y||i.wrap-o.wrap||i.canonical.x-o.canonical.x}class ct{constructor(e,i){this.tileID=e,this.uid=t.uniqueId(),this.uses=0,this.tileSize=i,this.buckets={},this.expirationTime=null,this.queryPadding=0,this.hasSymbolBuckets=!1,this.hasRTLText=!1,this.dependencies={},this.textures=[],this.textureCoords={},this.expiredRequestCount=0,this.state="loading"}registerFadeDuration(e){const i=e+this.timeAdded;i<t.exported.now()||this.fadeEndTime&&i<this.fadeEndTime||(this.fadeEndTime=i)}wasRequested(){return"errored"===this.state||"loaded"===this.state||"reloading"===this.state}clearTextures(t){this.demTexture&&t.saveTileTexture(this.demTexture),this.textures.forEach((e=>t.saveTileTexture(e))),this.demTexture=null,this.textures=[],this.textureCoords={}}loadVectorData(e,i,o){if(this.hasData()&&this.unloadVectorData(),this.state="loaded",e){e.featureIndex&&(this.latestFeatureIndex=e.featureIndex,e.rawTileData?(this.latestRawTileData=e.rawTileData,this.latestFeatureIndex.rawTileData=e.rawTileData):this.latestRawTileData&&(this.latestFeatureIndex.rawTileData=this.latestRawTileData)),this.collisionBoxArray=e.collisionBoxArray,this.buckets=function(t,e){const i={};if(!e)return i;for(const o of t){const t=o.layerIds.map((t=>e.getLayer(t))).filter(Boolean);if(0!==t.length){o.layers=t,o.stateDependentLayerIds&&(o.stateDependentLayers=o.stateDependentLayerIds.map((e=>t.filter((t=>t.id===e))[0])));for(const e of t)i[e.id]=o}}return i}(e.buckets,i.style),this.hasSymbolBuckets=!1;for(const e in this.buckets){const i=this.buckets[e];if(i instanceof t.SymbolBucket){if(this.hasSymbolBuckets=!0,!o)break;i.justReloaded=!0}}if(this.hasRTLText=!1,this.hasSymbolBuckets)for(const e in this.buckets){const i=this.buckets[e];if(i instanceof t.SymbolBucket&&i.hasRTLText){this.hasRTLText=!0,t.lazyLoadRTLTextPlugin();break}}this.queryPadding=0;for(const t in this.buckets){const e=this.buckets[t];this.queryPadding=Math.max(this.queryPadding,i.style.getLayer(t).queryRadius(e))}e.imageAtlas&&(this.imageAtlas=e.imageAtlas),e.glyphAtlasImage&&(this.glyphAtlasImage=e.glyphAtlasImage)}else this.collisionBoxArray=new t.CollisionBoxArray}unloadVectorData(){for(const t in this.buckets)this.buckets[t].destroy();this.buckets={},this.imageAtlasTexture&&this.imageAtlasTexture.destroy(),this.imageAtlas&&(this.imageAtlas=null),this.glyphAtlasTexture&&this.glyphAtlasTexture.destroy(),this.latestFeatureIndex=null,this.state="unloaded"}getBucket(t){return this.buckets[t.id]}upload(t){for(const e in this.buckets){const i=this.buckets[e];i.uploadPending()&&i.upload(t)}const e=t.gl;this.imageAtlas&&!this.imageAtlas.uploaded&&(this.imageAtlasTexture=new B(t,this.imageAtlas.image,e.RGBA),this.imageAtlas.uploaded=!0),this.glyphAtlasImage&&(this.glyphAtlasTexture=new B(t,this.glyphAtlasImage,e.ALPHA),this.glyphAtlasImage=null)}prepare(t){this.imageAtlas&&this.imageAtlas.patchUpdatedImages(t,this.imageAtlasTexture)}queryRenderedFeatures(t,e,i,o,a,s,r,n,l,c){return this.latestFeatureIndex&&this.latestFeatureIndex.rawTileData?this.latestFeatureIndex.query({queryGeometry:o,cameraQueryGeometry:a,scale:s,tileSize:this.tileSize,pixelPosMatrix:c,transform:n,params:r,queryPadding:this.queryPadding*l},t,e,i):{}}querySourceFeatures(e,i){const o=this.latestFeatureIndex;if(!o||!o.rawTileData)return;const a=o.loadVTLayers(),s=i?i.sourceLayer:"",r=a._geojsonTileLayer||a[s];if(!r)return;const n=t.createFilter(i&&i.filter),{z:l,x:c,y:h}=this.tileID.canonical,u={z:l,x:c,y:h};for(let i=0;i<r.length;i++){const a=r.feature(i);if(n.needGeometry){const e=t.toEvaluationFeature(a,!0);if(!n.filter(new t.EvaluationParameters(this.tileID.overscaledZ),e,this.tileID.canonical))continue}else if(!n.filter(new t.EvaluationParameters(this.tileID.overscaledZ),a))continue;const d=o.getId(a,s),m=new t.GeoJSONFeature(a,l,c,h,d);m.tile=u,e.push(m)}}hasData(){return"loaded"===this.state||"reloading"===this.state||"expired"===this.state}patternsLoaded(){return this.imageAtlas&&!!Object.keys(this.imageAtlas.patternPositions).length}setExpiryData(e){const i=this.expirationTime;if(e.cacheControl){const i=t.parseCacheControl(e.cacheControl);i["max-age"]&&(this.expirationTime=Date.now()+1e3*i["max-age"])}else e.expires&&(this.expirationTime=new Date(e.expires).getTime());if(this.expirationTime){const t=Date.now();let e=!1;if(this.expirationTime>t)e=!1;else if(i)if(this.expirationTime<i)e=!0;else{const o=this.expirationTime-i;o?this.expirationTime=t+Math.max(o,3e4):e=!0}else e=!0;e?(this.expiredRequestCount++,this.state="expired"):this.expiredRequestCount=0}}getExpiryTimeout(){if(this.expirationTime)return this.expiredRequestCount?1e3*(1<<Math.min(this.expiredRequestCount-1,31)):Math.min(this.expirationTime-(new Date).getTime(),Math.pow(2,31)-1)}setFeatureState(t,e){if(!this.latestFeatureIndex||!this.latestFeatureIndex.rawTileData||0===Object.keys(t).length)return;const i=this.latestFeatureIndex.loadVTLayers();for(const o in this.buckets){if(!e.style.hasLayer(o))continue;const a=this.buckets[o],s=a.layers[0].sourceLayer||"_geojsonTileLayer",r=i[s],n=t[s];if(!r||!n||0===Object.keys(n).length)continue;a.update(n,r,this.imageAtlas&&this.imageAtlas.patternPositions||{});const l=e&&e.style&&e.style.getLayer(o);l&&(this.queryPadding=Math.max(this.queryPadding,l.queryRadius(a)))}}holdingForFade(){return void 0!==this.symbolFadeHoldUntil}symbolFadeFinished(){return!this.symbolFadeHoldUntil||this.symbolFadeHoldUntil<t.exported.now()}clearFadeHold(){this.symbolFadeHoldUntil=void 0}setHoldDuration(e){this.symbolFadeHoldUntil=t.exported.now()+e}setDependencies(t,e){const i={};for(const t of e)i[t]=!0;this.dependencies[t]=i}hasDependency(t,e){for(const i of t){const t=this.dependencies[i];if(t)for(const i of e)if(t[i])return!0}return!1}}class ht{constructor(t,e){this.max=t,this.onRemove=e,this.reset()}reset(){for(const t in this.data)for(const e of this.data[t])e.timeout&&clearTimeout(e.timeout),this.onRemove(e.value);return this.data={},this.order=[],this}add(t,e,i){const o=t.wrapped().key;void 0===this.data[o]&&(this.data[o]=[]);const a={value:e,timeout:void 0};if(void 0!==i&&(a.timeout=setTimeout((()=>{this.remove(t,a)}),i)),this.data[o].push(a),this.order.push(o),this.order.length>this.max){const t=this._getAndRemoveByKey(this.order[0]);t&&this.onRemove(t)}return this}has(t){return t.wrapped().key in this.data}getAndRemove(t){return this.has(t)?this._getAndRemoveByKey(t.wrapped().key):null}_getAndRemoveByKey(t){const e=this.data[t].shift();return e.timeout&&clearTimeout(e.timeout),0===this.data[t].length&&delete this.data[t],this.order.splice(this.order.indexOf(t),1),e.value}getByKey(t){const e=this.data[t];return e?e[0].value:null}get(t){return this.has(t)?this.data[t.wrapped().key][0].value:null}remove(t,e){if(!this.has(t))return this;const i=t.wrapped().key,o=void 0===e?0:this.data[i].indexOf(e),a=this.data[i][o];return this.data[i].splice(o,1),a.timeout&&clearTimeout(a.timeout),0===this.data[i].length&&delete this.data[i],this.onRemove(a.value),this.order.splice(this.order.indexOf(i),1),this}setMaxSize(t){for(this.max=t;this.order.length>this.max;){const t=this._getAndRemoveByKey(this.order[0]);t&&this.onRemove(t)}return this}filter(t){const e=[];for(const i in this.data)for(const o of this.data[i])t(o.value)||e.push(o);for(const t of e)this.remove(t.value.tileID,t)}}class ut{constructor(){this.state={},this.stateChanges={},this.deletedStates={}}updateState(e,i,o){const a=String(i);if(this.stateChanges[e]=this.stateChanges[e]||{},this.stateChanges[e][a]=this.stateChanges[e][a]||{},t.extend(this.stateChanges[e][a],o),null===this.deletedStates[e]){this.deletedStates[e]={};for(const t in this.state[e])t!==a&&(this.deletedStates[e][t]=null)}else if(this.deletedStates[e]&&null===this.deletedStates[e][a]){this.deletedStates[e][a]={};for(const t in this.state[e][a])o[t]||(this.deletedStates[e][a][t]=null)}else for(const t in o)this.deletedStates[e]&&this.deletedStates[e][a]&&null===this.deletedStates[e][a][t]&&delete this.deletedStates[e][a][t]}removeFeatureState(t,e,i){if(null===this.deletedStates[t])return;const o=String(e);if(this.deletedStates[t]=this.deletedStates[t]||{},i&&void 0!==e)null!==this.deletedStates[t][o]&&(this.deletedStates[t][o]=this.deletedStates[t][o]||{},this.deletedStates[t][o][i]=null);else if(void 0!==e)if(this.stateChanges[t]&&this.stateChanges[t][o])for(i in this.deletedStates[t][o]={},this.stateChanges[t][o])this.deletedStates[t][o][i]=null;else this.deletedStates[t][o]=null;else this.deletedStates[t]=null}getState(e,i){const o=String(i),a=t.extend({},(this.state[e]||{})[o],(this.stateChanges[e]||{})[o]);if(null===this.deletedStates[e])return{};if(this.deletedStates[e]){const t=this.deletedStates[e][i];if(null===t)return{};for(const e in t)delete a[e]}return a}initializeTileState(t,e){t.setFeatureState(this.state,e)}coalesceChanges(e,i){const o={};for(const e in this.stateChanges){this.state[e]=this.state[e]||{};const i={};for(const o in this.stateChanges[e])this.state[e][o]||(this.state[e][o]={}),t.extend(this.state[e][o],this.stateChanges[e][o]),i[o]=this.state[e][o];o[e]=i}for(const e in this.deletedStates){this.state[e]=this.state[e]||{};const i={};if(null===this.deletedStates[e])for(const t in this.state[e])i[t]={},this.state[e][t]={};else for(const t in this.deletedStates[e]){if(null===this.deletedStates[e][t])this.state[e][t]={};else for(const i of Object.keys(this.deletedStates[e][t]))delete this.state[e][t][i];i[t]=this.state[e][t]}o[e]=o[e]||{},t.extend(o[e],i)}if(this.stateChanges={},this.deletedStates={},0!==Object.keys(o).length)for(const t in e)e[t].setFeatureState(o,i)}}class dt extends t.Evented{constructor(e,i,o){super(),this.id=e,this.dispatcher=o,this.on("data",(t=>{"source"===t.dataType&&"metadata"===t.sourceDataType&&(this._sourceLoaded=!0),this._sourceLoaded&&!this._paused&&"source"===t.dataType&&"content"===t.sourceDataType&&(this.reload(),this.transform&&this.update(this.transform,this.terrain))})),this.on("dataloading",(()=>{this._sourceErrored=!1})),this.on("error",(()=>{this._sourceErrored=this._source.loaded()})),this._source=function(e,i,o,a){const s=new st[i.type](e,i,o,a);if(s.id!==e)throw new Error(`Expected Source id to be ${e} instead of ${s.id}`);return t.bindAll(["load","abort","unload","serialize","prepare"],s),s}(e,i,o,this),this._updateDebounce=i.updateDebounce||!1,this._tiles={},this._cache=new ht(0,this._unloadTile.bind(this)),this._timers={},this._cacheTimers={},this._maxTileCacheSize=null,this._loadedParentTiles={},this._coveredTiles={},this._state=new ut}onAdd(t){this.map=t,this._maxTileCacheSize=t?t._maxTileCacheSize:null,this._source&&this._source.onAdd&&this._source.onAdd(t)}onRemove(t){this.clearTiles(),this._source&&this._source.onRemove&&this._source.onRemove(t)}loaded(){if(this._sourceErrored)return!0;if(!this._sourceLoaded)return!1;if(!this._source.loaded())return!1;for(const t in this._tiles){const e=this._tiles[t];if("loaded"!==e.state&&"errored"!==e.state)return!1}return!0}getSource(){return this._source}pause(){this._paused=!0}resume(){if(!this._paused)return;const t=this._shouldReloadOnResume;this._paused=!1,this._shouldReloadOnResume=!1,t&&this.reload(),this.transform&&this.update(this.transform,this.terrain)}_loadTile(t,e){return this._source.loadTile(t,e)}_unloadTile(t){if(this._source.unloadTile)return this._source.unloadTile(t,(()=>{}))}_abortTile(e){this._source.abortTile&&this._source.abortTile(e,(()=>{})),this._source.fire(new t.Event("dataabort",{tile:e,coord:e.tileID,dataType:"source"})),this.loaded()&&this._source.fire(new t.Event("data",{dataType:"sourcetiles",sourceId:this._source.id}))}serialize(){return this._source.serialize()}prepare(t){this._source.prepare&&this._source.prepare(),this._state.coalesceChanges(this._tiles,this.map?this.map.painter:null);for(const e in this._tiles){const i=this._tiles[e];i.upload(t),i.prepare(this.map.style.imageManager)}}getIds(){return Object.values(this._tiles).map((t=>t.tileID)).sort(mt).map((t=>t.key))}getRenderableIds(e){const i=[];for(const t in this._tiles)this._isIdRenderable(t,e)&&i.push(this._tiles[t]);return e?i.sort(((e,i)=>{const o=e.tileID,a=i.tileID,s=new t.pointGeometry(o.canonical.x,o.canonical.y)._rotate(this.transform.angle),r=new t.pointGeometry(a.canonical.x,a.canonical.y)._rotate(this.transform.angle);return o.overscaledZ-a.overscaledZ||r.y-s.y||r.x-s.x})).map((t=>t.tileID.key)):i.map((t=>t.tileID)).sort(mt).map((t=>t.key))}hasRenderableParent(t){const e=this.findLoadedParent(t,0);return!!e&&this._isIdRenderable(e.tileID.key)}_isIdRenderable(t,e){return this._tiles[t]&&this._tiles[t].hasData()&&!this._coveredTiles[t]&&(e||!this._tiles[t].holdingForFade())}reload(){if(this._paused)this._shouldReloadOnResume=!0;else{this._cache.reset();for(const t in this._tiles)"errored"!==this._tiles[t].state&&this._reloadTile(t,"reloading")}}_reloadTile(t,e){const i=this._tiles[t];i&&("loading"!==i.state&&(i.state=e),this._loadTile(i,this._tileLoaded.bind(this,i,t,e)))}_tileLoaded(e,i,o,a){if(a)return e.state="errored",void(404!==a.status?(this._source.fire(new t.ErrorEvent(a,{tile:e})),this.loaded()&&this._source.fire(new t.Event("data",{dataType:"sourcetiles",sourceId:this._source.id,error:a.message}))):this.update(this.transform,this.terrain));e.timeAdded=t.exported.now(),"expired"===o&&(e.refreshedUponExpiration=!0),this._setTileReloadTimer(i,e),"raster-dem"===this.getSource().type&&e.dem&&this._backfillDEM(e),this._state.initializeTileState(e,this.map?this.map.painter:null),e.aborted||this._source.fire(new t.Event("data",{dataType:"source",tile:e,coord:e.tileID,previousState:o})),this.loaded()&&this._source.fire(new t.Event("data",{dataType:"sourcetiles",sourceId:this._source.id}))}_backfillDEM(t){const e=this.getRenderableIds();for(let o=0;o<e.length;o++){const a=e[o];if(t.neighboringTiles&&t.neighboringTiles[a]){const e=this.getTileByID(a);i(t,e),i(e,t)}}function i(t,e){t.needsHillshadePrepare=!0,t.needsTerrainPrepare=!0;let i=e.tileID.canonical.x-t.tileID.canonical.x;const o=e.tileID.canonical.y-t.tileID.canonical.y,a=Math.pow(2,t.tileID.canonical.z),s=e.tileID.key;0===i&&0===o||Math.abs(o)>1||(Math.abs(i)>1&&(1===Math.abs(i+a)?i+=a:1===Math.abs(i-a)&&(i-=a)),e.dem&&t.dem&&(t.dem.backfillBorder(e.dem,i,o),t.neighboringTiles&&t.neighboringTiles[s]&&(t.neighboringTiles[s].backfilled=!0)))}}getTile(t){return this.getTileByID(t.key)}getTileByID(t){return this._tiles[t]}_retainLoadedChildren(t,e,i,o){for(const a in this._tiles){let s=this._tiles[a];if(o[a]||!s.hasData()||s.tileID.overscaledZ<=e||s.tileID.overscaledZ>i)continue;let r=s.tileID;for(;s&&s.tileID.overscaledZ>e+1;){const t=s.tileID.scaledTo(s.tileID.overscaledZ-1);s=this._tiles[t.key],s&&s.hasData()&&(r=t)}let n=r;for(;n.overscaledZ>e;)if(n=n.scaledTo(n.overscaledZ-1),t[n.key]){o[r.key]=r;break}}}findLoadedParent(t,e){if(t.key in this._loadedParentTiles){const i=this._loadedParentTiles[t.key];return i&&i.tileID.overscaledZ>=e?i:null}for(let i=t.overscaledZ-1;i>=e;i--){const e=t.scaledTo(i),o=this._getLoadedTile(e);if(o)return o}}_getLoadedTile(t){const e=this._tiles[t.key];return e&&e.hasData()?e:this._cache.getByKey(t.wrapped().key)}updateCacheSize(t){const e=Math.ceil(t.width/this._source.tileSize)+1,i=Math.ceil(t.height/this._source.tileSize)+1,o=Math.floor(e*i*5),a="number"==typeof this._maxTileCacheSize?Math.min(this._maxTileCacheSize,o):o;this._cache.setMaxSize(a)}handleWrapJump(t){const e=Math.round((t-(void 0===this._prevLng?t:this._prevLng))/360);if(this._prevLng=t,e){const t={};for(const i in this._tiles){const o=this._tiles[i];o.tileID=o.tileID.unwrapTo(o.tileID.wrap+e),t[o.tileID.key]=o}this._tiles=t;for(const t in this._timers)clearTimeout(this._timers[t]),delete this._timers[t];for(const t in this._tiles)this._setTileReloadTimer(t,this._tiles[t])}}update(e,i){if(this.transform=e,this.terrain=i,!this._sourceLoaded||this._paused)return;let o;this.updateCacheSize(e),this.handleWrapJump(this.transform.center.lng),this._coveredTiles={},this.used||this.usedForTerrain?this._source.tileID?o=e.getVisibleUnwrappedCoordinates(this._source.tileID).map((e=>new t.OverscaledTileID(e.canonical.z,e.wrap,e.canonical.z,e.canonical.x,e.canonical.y))):(o=e.coveringTiles({tileSize:this.usedForTerrain?this.tileSize:this._source.tileSize,minzoom:this._source.minzoom,maxzoom:this._source.maxzoom,roundZoom:!this.usedForTerrain&&this._source.roundZoom,reparseOverscaled:this._source.reparseOverscaled,terrain:i}),this._source.hasTile&&(o=o.filter((t=>this._source.hasTile(t))))):o=[];const a=e.coveringZoomLevel(this._source),s=Math.max(a-dt.maxOverzooming,this._source.minzoom),r=Math.max(a+dt.maxUnderzooming,this._source.minzoom);if(this.usedForTerrain){const t={};for(const e of o)if(e.canonical.z>this._source.minzoom){const i=e.scaledTo(e.canonical.z-1);t[i.key]=i;const o=e.scaledTo(Math.max(this._source.minzoom,Math.min(e.canonical.z,5)));t[o.key]=o}o=o.concat(Object.values(t))}const n=this._updateRetainedTiles(o,a);if(pt(this._source.type)){const e={},l={},c=Object.keys(n);for(const i of c){const o=n[i],a=this._tiles[i];if(!a||a.fadeEndTime&&a.fadeEndTime<=t.exported.now())continue;const r=this.findLoadedParent(o,s);r&&(this._addTile(r.tileID),e[r.tileID.key]=r.tileID),l[i]=o}this._retainLoadedChildren(l,a,r,n);for(const t in e)n[t]||(this._coveredTiles[t]=!0,n[t]=e[t]);if(i){const t={},e={};for(const i of o)this._tiles[i.key].hasData()?t[i.key]=i:e[i.key]=i;for(const i in e){const o=e[i].children(this._source.maxzoom);this._tiles[o[0].key]&&this._tiles[o[1].key]&&this._tiles[o[2].key]&&this._tiles[o[3].key]&&(t[o[0].key]=n[o[0].key]=o[0],t[o[1].key]=n[o[1].key]=o[1],t[o[2].key]=n[o[2].key]=o[2],t[o[3].key]=n[o[3].key]=o[3],delete e[i])}for(const i in e){const o=this.findLoadedParent(e[i],this._source.minzoom);if(o){t[o.tileID.key]=n[o.tileID.key]=o.tileID;for(const e in t)t[e].isChildOf(o.tileID)&&delete t[e]}}for(const e in this._tiles)t[e]||(this._coveredTiles[e]=!0)}}for(const t in n)this._tiles[t].clearFadeHold();const l=t.keysDifference(this._tiles,n);for(const t of l){const e=this._tiles[t];e.hasSymbolBuckets&&!e.holdingForFade()?e.setHoldDuration(this.map._fadeDuration):e.hasSymbolBuckets&&!e.symbolFadeFinished()||this._removeTile(t)}this._updateLoadedParentTileCache()}releaseSymbolFadeTiles(){for(const t in this._tiles)this._tiles[t].holdingForFade()&&this._removeTile(t)}_updateRetainedTiles(t,e){const i={},o={},a=Math.max(e-dt.maxOverzooming,this._source.minzoom),s=Math.max(e+dt.maxUnderzooming,this._source.minzoom),r={};for(const o of t){const t=this._addTile(o);i[o.key]=o,t.hasData()||e<this._source.maxzoom&&(r[o.key]=o)}this._retainLoadedChildren(r,e,s,i);for(const s of t){let t=this._tiles[s.key];if(t.hasData())continue;if(e+1>this._source.maxzoom){const t=s.children(this._source.maxzoom)[0],e=this.getTile(t);if(e&&e.hasData()){i[t.key]=t;continue}}else{const t=s.children(this._source.maxzoom);if(i[t[0].key]&&i[t[1].key]&&i[t[2].key]&&i[t[3].key])continue}let r=t.wasRequested();for(let e=s.overscaledZ-1;e>=a;--e){const a=s.scaledTo(e);if(o[a.key])break;if(o[a.key]=!0,t=this.getTile(a),!t&&r&&(t=this._addTile(a)),t&&(i[a.key]=a,r=t.wasRequested(),t.hasData()))break}}return i}_updateLoadedParentTileCache(){this._loadedParentTiles={};for(const t in this._tiles){const e=[];let i,o=this._tiles[t].tileID;for(;o.overscaledZ>0;){if(o.key in this._loadedParentTiles){i=this._loadedParentTiles[o.key];break}e.push(o.key);const t=o.scaledTo(o.overscaledZ-1);if(i=this._getLoadedTile(t),i)break;o=t}for(const t of e)this._loadedParentTiles[t]=i}}_addTile(e){let i=this._tiles[e.key];if(i)return i;i=this._cache.getAndRemove(e),i&&(this._setTileReloadTimer(e.key,i),i.tileID=e,this._state.initializeTileState(i,this.map?this.map.painter:null),this._cacheTimers[e.key]&&(clearTimeout(this._cacheTimers[e.key]),delete this._cacheTimers[e.key],this._setTileReloadTimer(e.key,i)));const o=i;return i||(i=new ct(e,this._source.tileSize*e.overscaleFactor()),this._loadTile(i,this._tileLoaded.bind(this,i,e.key,i.state))),i.uses++,this._tiles[e.key]=i,o||this._source.fire(new t.Event("dataloading",{tile:i,coord:i.tileID,dataType:"source"})),i}_setTileReloadTimer(t,e){t in this._timers&&(clearTimeout(this._timers[t]),delete this._timers[t]);const i=e.getExpiryTimeout();i&&(this._timers[t]=setTimeout((()=>{this._reloadTile(t,"expired"),delete this._timers[t]}),i))}_removeTile(t){const e=this._tiles[t];e&&(e.uses--,delete this._tiles[t],this._timers[t]&&(clearTimeout(this._timers[t]),delete this._timers[t]),e.uses>0||(e.hasData()&&"reloading"!==e.state?this._cache.add(e.tileID,e,e.getExpiryTimeout()):(e.aborted=!0,this._abortTile(e),this._unloadTile(e))))}clearTiles(){this._shouldReloadOnResume=!1,this._paused=!1;for(const t in this._tiles)this._removeTile(t);this._cache.reset()}tilesIn(e,i,o){const a=[],s=this.transform;if(!s)return a;const r=o?s.getCameraQueryGeometry(e):e,n=e.map((t=>s.pointCoordinate(t,this.terrain))),l=r.map((t=>s.pointCoordinate(t,this.terrain))),c=this.getIds();let h=1/0,u=1/0,d=-1/0,m=-1/0;for(const t of l)h=Math.min(h,t.x),u=Math.min(u,t.y),d=Math.max(d,t.x),m=Math.max(m,t.y);for(let e=0;e<c.length;e++){const o=this._tiles[c[e]];if(o.holdingForFade())continue;const r=o.tileID,p=Math.pow(2,s.zoom-o.tileID.overscaledZ),_=i*o.queryPadding*t.EXTENT/o.tileSize/p,f=[r.getTilePoint(new t.MercatorCoordinate(h,u)),r.getTilePoint(new t.MercatorCoordinate(d,m))];if(f[0].x-_<t.EXTENT&&f[0].y-_<t.EXTENT&&f[1].x+_>=0&&f[1].y+_>=0){const t=n.map((t=>r.getTilePoint(t))),e=l.map((t=>r.getTilePoint(t)));a.push({tile:o,tileID:r,queryGeometry:t,cameraQueryGeometry:e,scale:p})}}return a}getVisibleCoordinates(t){const e=this.getRenderableIds(t).map((t=>this._tiles[t].tileID));for(const t of e)t.posMatrix=this.transform.calculatePosMatrix(t.toUnwrapped());return e}hasTransition(){if(this._source.hasTransition())return!0;if(pt(this._source.type))for(const e in this._tiles){const i=this._tiles[e];if(void 0!==i.fadeEndTime&&i.fadeEndTime>=t.exported.now())return!0}return!1}setFeatureState(t,e,i){this._state.updateState(t=t||"_geojsonTileLayer",e,i)}removeFeatureState(t,e,i){this._state.removeFeatureState(t=t||"_geojsonTileLayer",e,i)}getFeatureState(t,e){return this._state.getState(t=t||"_geojsonTileLayer",e)}setDependencies(t,e,i){const o=this._tiles[t];o&&o.setDependencies(e,i)}reloadTilesForDependencies(t,e){for(const i in this._tiles)this._tiles[i].hasDependency(t,e)&&this._reloadTile(i,"reloading");this._cache.filter((i=>!i.hasDependency(t,e)))}}function mt(t,e){const i=Math.abs(2*t.wrap)-+(t.wrap<0),o=Math.abs(2*e.wrap)-+(e.wrap<0);return t.overscaledZ-e.overscaledZ||o-i||e.canonical.y-t.canonical.y||e.canonical.x-t.canonical.x}function pt(t){return"raster"===t||"image"===t||"video"===t}dt.maxOverzooming=10,dt.maxUnderzooming=3;const _t="mapboxgl_preloaded_worker_pool";class ft{constructor(){this.active={}}acquire(t){if(!this.workers)for(this.workers=[];this.workers.length<ft.workerCount;)this.workers.push(new Worker(Ka.workerUrl));return this.active[t]=!0,this.workers.slice()}release(t){delete this.active[t],0===this.numActive()&&(this.workers.forEach((t=>{t.terminate()})),this.workers=null)}isPreloaded(){return!!this.active[_t]}numActive(){return Object.keys(this.active).length}}const gt=Math.floor(t.exported.hardwareConcurrency/2);let xt;function vt(){return xt||(xt=new ft),xt}function yt(e,i){const o={};for(const t in e)"ref"!==t&&(o[t]=e[t]);return t.refProperties.forEach((t=>{t in i&&(o[t]=i[t])})),o}function bt(t){t=t.slice();const e=Object.create(null);for(let i=0;i<t.length;i++)e[t[i].id]=t[i];for(let i=0;i<t.length;i++)"ref"in t[i]&&(t[i]=yt(t[i],e[t[i].ref]));return t}ft.workerCount=Math.max(Math.min(gt,6),1);const wt={setStyle:"setStyle",addLayer:"addLayer",removeLayer:"removeLayer",setPaintProperty:"setPaintProperty",setLayoutProperty:"setLayoutProperty",setFilter:"setFilter",addSource:"addSource",removeSource:"removeSource",setGeoJSONSourceData:"setGeoJSONSourceData",setLayerZoomRange:"setLayerZoomRange",setLayerProperty:"setLayerProperty",setCenter:"setCenter",setZoom:"setZoom",setBearing:"setBearing",setPitch:"setPitch",setSprite:"setSprite",setGlyphs:"setGlyphs",setTransition:"setTransition",setLight:"setLight"};function Tt(t,e,i){i.push({command:wt.addSource,args:[t,e[t]]})}function Et(t,e,i){e.push({command:wt.removeSource,args:[t]}),i[t]=!0}function It(t,e,i,o){Et(t,i,o),Tt(t,e,i)}function St(t,e,i){let o;for(o in t[i])if(Object.prototype.hasOwnProperty.call(t[i],o)&&"data"!==o&&!a(t[i][o],e[i][o]))return!1;for(o in e[i])if(Object.prototype.hasOwnProperty.call(e[i],o)&&"data"!==o&&!a(t[i][o],e[i][o]))return!1;return!0}function Ct(t,e,i,o,s,r){let n;for(n in e=e||{},t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(a(t[n],e[n])||i.push({command:r,args:[o,n,e[n],s]}));for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&!Object.prototype.hasOwnProperty.call(t,n)&&(a(t[n],e[n])||i.push({command:r,args:[o,n,e[n],s]}))}function zt(t){return t.id}function Dt(t,e){return t[e.id]=e,t}class Pt{constructor(t,e){this.reset(t,e)}reset(t,e){this.points=t||[],this._distances=[0];for(let t=1;t<this.points.length;t++)this._distances[t]=this._distances[t-1]+this.points[t].dist(this.points[t-1]);this.length=this._distances[this._distances.length-1],this.padding=Math.min(e||0,.5*this.length),this.paddedLength=this.length-2*this.padding}lerp(e){if(1===this.points.length)return this.points[0];e=t.clamp(e,0,1);let i=1,o=this._distances[i];const a=e*this.paddedLength+this.padding;for(;o<a&&i<this._distances.length;)o=this._distances[++i];const s=i-1,r=this._distances[s],n=o-r,l=n>0?(a-r)/n:0;return this.points[s].mult(1-l).add(this.points[i].mult(l))}}function At(t,e){let i=!0;return"always"===t||"never"!==t&&"never"!==e||(i=!1),i}class Mt{constructor(t,e,i){const o=this.boxCells=[],a=this.circleCells=[];this.xCellCount=Math.ceil(t/i),this.yCellCount=Math.ceil(e/i);for(let t=0;t<this.xCellCount*this.yCellCount;t++)o.push([]),a.push([]);this.circleKeys=[],this.boxKeys=[],this.bboxes=[],this.circles=[],this.width=t,this.height=e,this.xScale=this.xCellCount/t,this.yScale=this.yCellCount/e,this.boxUid=0,this.circleUid=0}keysLength(){return this.boxKeys.length+this.circleKeys.length}insert(t,e,i,o,a){this._forEachCell(e,i,o,a,this._insertBoxCell,this.boxUid++),this.boxKeys.push(t),this.bboxes.push(e),this.bboxes.push(i),this.bboxes.push(o),this.bboxes.push(a)}insertCircle(t,e,i,o){this._forEachCell(e-o,i-o,e+o,i+o,this._insertCircleCell,this.circleUid++),this.circleKeys.push(t),this.circles.push(e),this.circles.push(i),this.circles.push(o)}_insertBoxCell(t,e,i,o,a,s){this.boxCells[a].push(s)}_insertCircleCell(t,e,i,o,a,s){this.circleCells[a].push(s)}_query(t,e,i,o,a,s,r){if(i<0||t>this.width||o<0||e>this.height)return[];const n=[];if(t<=0&&e<=0&&this.width<=i&&this.height<=o){if(a)return[{key:null,x1:t,y1:e,x2:i,y2:o}];for(let t=0;t<this.boxKeys.length;t++)n.push({key:this.boxKeys[t],x1:this.bboxes[4*t],y1:this.bboxes[4*t+1],x2:this.bboxes[4*t+2],y2:this.bboxes[4*t+3]});for(let t=0;t<this.circleKeys.length;t++){const e=this.circles[3*t],i=this.circles[3*t+1],o=this.circles[3*t+2];n.push({key:this.circleKeys[t],x1:e-o,y1:i-o,x2:e+o,y2:i+o})}}else this._forEachCell(t,e,i,o,this._queryCell,n,{hitTest:a,overlapMode:s,seenUids:{box:{},circle:{}}},r);return n}query(t,e,i,o){return this._query(t,e,i,o,!1,null)}hitTest(t,e,i,o,a,s){return this._query(t,e,i,o,!0,a,s).length>0}hitTestCircle(t,e,i,o,a){const s=t-i,r=t+i,n=e-i,l=e+i;if(r<0||s>this.width||l<0||n>this.height)return!1;const c=[];return this._forEachCell(s,n,r,l,this._queryCellCircle,c,{hitTest:!0,overlapMode:o,circle:{x:t,y:e,radius:i},seenUids:{box:{},circle:{}}},a),c.length>0}_queryCell(t,e,i,o,a,s,r,n){const{seenUids:l,hitTest:c,overlapMode:h}=r,u=this.boxCells[a];if(null!==u){const a=this.bboxes;for(const r of u)if(!l.box[r]){l.box[r]=!0;const u=4*r,d=this.boxKeys[r];if(t<=a[u+2]&&e<=a[u+3]&&i>=a[u+0]&&o>=a[u+1]&&(!n||n(d))&&(!c||!At(h,d.overlapMode))&&(s.push({key:d,x1:a[u],y1:a[u+1],x2:a[u+2],y2:a[u+3]}),c))return!0}}const d=this.circleCells[a];if(null!==d){const a=this.circles;for(const r of d)if(!l.circle[r]){l.circle[r]=!0;const u=3*r,d=this.circleKeys[r];if(this._circleAndRectCollide(a[u],a[u+1],a[u+2],t,e,i,o)&&(!n||n(d))&&(!c||!At(h,d.overlapMode))){const t=a[u],e=a[u+1],i=a[u+2];if(s.push({key:d,x1:t-i,y1:e-i,x2:t+i,y2:e+i}),c)return!0}}}return!1}_queryCellCircle(t,e,i,o,a,s,r,n){const{circle:l,seenUids:c,overlapMode:h}=r,u=this.boxCells[a];if(null!==u){const t=this.bboxes;for(const e of u)if(!c.box[e]){c.box[e]=!0;const i=4*e,o=this.boxKeys[e];if(this._circleAndRectCollide(l.x,l.y,l.radius,t[i+0],t[i+1],t[i+2],t[i+3])&&(!n||n(o))&&!At(h,o.overlapMode))return s.push(!0),!0}}const d=this.circleCells[a];if(null!==d){const t=this.circles;for(const e of d)if(!c.circle[e]){c.circle[e]=!0;const i=3*e,o=this.circleKeys[e];if(this._circlesCollide(t[i],t[i+1],t[i+2],l.x,l.y,l.radius)&&(!n||n(o))&&!At(h,o.overlapMode))return s.push(!0),!0}}}_forEachCell(t,e,i,o,a,s,r,n){const l=this._convertToXCellCoord(t),c=this._convertToYCellCoord(e),h=this._convertToXCellCoord(i),u=this._convertToYCellCoord(o);for(let d=l;d<=h;d++)for(let l=c;l<=u;l++)if(a.call(this,t,e,i,o,this.xCellCount*l+d,s,r,n))return}_convertToXCellCoord(t){return Math.max(0,Math.min(this.xCellCount-1,Math.floor(t*this.xScale)))}_convertToYCellCoord(t){return Math.max(0,Math.min(this.yCellCount-1,Math.floor(t*this.yScale)))}_circlesCollide(t,e,i,o,a,s){const r=o-t,n=a-e,l=i+s;return l*l>r*r+n*n}_circleAndRectCollide(t,e,i,o,a,s,r){const n=(s-o)/2,l=Math.abs(t-(o+n));if(l>n+i)return!1;const c=(r-a)/2,h=Math.abs(e-(a+c));if(h>c+i)return!1;if(l<=n||h<=c)return!0;const u=l-n,d=h-c;return u*u+d*d<=i*i}}function Rt(e,i,o,a,s){const r=t.create();return i?(t.scale(r,r,[1/s,1/s,1]),o||t.rotateZ(r,r,a.angle)):t.multiply(r,a.labelPlaneMatrix,e),r}function Lt(e,i,o,a,s){if(i){const i=t.clone(e);return t.scale(i,i,[s,s,1]),o||t.rotateZ(i,i,-a.angle),i}return a.glCoordMatrix}function kt(e,i,o){let a;o?(a=[e.x,e.y,o(e.x,e.y),1],t.transformMat4(a,a,i)):(a=[e.x,e.y,0,1],Xt(a,a,i));const s=a[3];return{point:new t.pointGeometry(a[0]/s,a[1]/s),signedDistanceFromCamera:s}}function Bt(t,e){return.5+t/e*.5}function Ft(t,e){const i=t[0]/t[3],o=t[1]/t[3];return i>=-e[0]&&i<=e[0]&&o>=-e[1]&&o<=e[1]}function Ot(e,i,o,a,s,r,n,l,c,h){const u=a?e.textSizeData:e.iconSizeData,d=t.evaluateSizeForZoom(u,o.transform.zoom),m=[256/o.width*2+1,256/o.height*2+1],p=a?e.text.dynamicLayoutVertexArray:e.icon.dynamicLayoutVertexArray;p.clear();const _=e.lineVertexArray,f=a?e.text.placedSymbolArray:e.icon.placedSymbolArray,g=o.transform.width/o.transform.height;let x=!1;for(let a=0;a<f.length;a++){const v=f.get(a);if(v.hidden||v.writingMode===t.WritingMode.vertical&&!x){Vt(v.numGlyphs,p);continue}let y;if(x=!1,h?(y=[v.anchorX,v.anchorY,h(v.anchorX,v.anchorY),1],t.transformMat4(y,y,i)):(y=[v.anchorX,v.anchorY,0,1],Xt(y,y,i)),!Ft(y,m)){Vt(v.numGlyphs,p);continue}const b=Bt(o.transform.cameraToCenterDistance,y[3]),w=t.evaluateSizeForFeature(u,d,v),T=n?w/b:w*b,E=new t.pointGeometry(v.anchorX,v.anchorY),I=kt(E,s,h).point,S={},C=Gt(v,T,!1,l,i,s,r,e.glyphOffsetArray,_,p,I,E,S,g,c,h);x=C.useVertical,(C.notEnoughRoom||x||C.needsFlipping&&Gt(v,T,!0,l,i,s,r,e.glyphOffsetArray,_,p,I,E,S,g,c,h).notEnoughRoom)&&Vt(v.numGlyphs,p)}a?e.text.dynamicLayoutVertexBuffer.updateData(p):e.icon.dynamicLayoutVertexBuffer.updateData(p)}function Ut(t,e,i,o,a,s,r,n,l,c,h,u,d){const m=n.glyphStartIndex+n.numGlyphs,p=n.lineStartIndex,_=n.lineStartIndex+n.lineLength,f=e.getoffsetX(n.glyphStartIndex),g=e.getoffsetX(m-1),x=qt(t*f,i,o,a,s,r,n.segment,p,_,l,c,h,u,d);if(!x)return null;const v=qt(t*g,i,o,a,s,r,n.segment,p,_,l,c,h,u,d);return v?{first:x,last:v}:null}function Nt(e,i,o,a){return e===t.WritingMode.horizontal&&Math.abs(o.y-i.y)>Math.abs(o.x-i.x)*a?{useVertical:!0}:(e===t.WritingMode.vertical?i.y<o.y:i.x>o.x)?{needsFlipping:!0}:null}function Gt(e,i,o,a,s,r,n,l,c,h,u,d,m,p,_,f){const g=i/24,x=e.lineOffsetX*g,v=e.lineOffsetY*g;let y;if(e.numGlyphs>1){const t=e.glyphStartIndex+e.numGlyphs,i=e.lineStartIndex,s=e.lineStartIndex+e.lineLength,h=Ut(g,l,x,v,o,u,d,e,c,r,m,_,f);if(!h)return{notEnoughRoom:!0};const b=kt(h.first.point,n,f).point,w=kt(h.last.point,n,f).point;if(a&&!o){const t=Nt(e.writingMode,b,w,p);if(t)return t}y=[h.first];for(let a=e.glyphStartIndex+1;a<t-1;a++)y.push(qt(g*l.getoffsetX(a),x,v,o,u,d,e.segment,i,s,c,r,m,_,f));y.push(h.last)}else{if(a&&!o){const i=kt(d,s,f).point,o=e.lineStartIndex+e.segment+1,a=new t.pointGeometry(c.getx(o),c.gety(o)),r=kt(a,s,f),n=r.signedDistanceFromCamera>0?r.point:Zt(d,a,i,1,s,f),l=Nt(e.writingMode,i,n,p);if(l)return l}const i=qt(g*l.getoffsetX(e.glyphStartIndex),x,v,o,u,d,e.segment,e.lineStartIndex,e.lineStartIndex+e.lineLength,c,r,m,_,f);if(!i)return{notEnoughRoom:!0};y=[i]}for(const e of y)t.addDynamicAttributes(h,e.point,e.angle);return{}}function Zt(t,e,i,o,a,s){const r=kt(t.add(t.sub(e)._unit()),a,s).point,n=i.sub(r);return i.add(n._mult(o/n.mag()))}function qt(e,i,o,a,s,r,n,l,c,h,u,d,m,p){const _=a?e-i:e+i;let f=_>0?1:-1,g=0;a&&(f*=-1,g=Math.PI),f<0&&(g+=Math.PI);let x=f>0?l+n:l+n+1,v=s,y=s,b=0,w=0;const T=Math.abs(_),E=[];for(;b+w<=T;){if(x+=f,x<l||x>=c)return null;if(y=v,E.push(v),v=d[x],void 0===v){const e=new t.pointGeometry(h.getx(x),h.gety(x)),i=kt(e,u,p);if(i.signedDistanceFromCamera>0)v=d[x]=i.point;else{const i=x-f;v=Zt(0===b?r:new t.pointGeometry(h.getx(i),h.gety(i)),e,y,T-b+1,u,p)}}b+=w,w=y.dist(v)}const I=(T-b)/w,S=v.sub(y),C=S.mult(I)._add(y);C._add(S._unit()._perp()._mult(o*f));const z=g+Math.atan2(v.y-y.y,v.x-y.x);return E.push(C),{point:C,angle:m?z:0,path:E}}const jt=new Float32Array([-1/0,-1/0,0,-1/0,-1/0,0,-1/0,-1/0,0,-1/0,-1/0,0]);function Vt(t,e){for(let i=0;i<t;i++){const t=e.length;e.resize(t+4),e.float32.set(jt,3*t)}}function Xt(t,e,i){const o=e[0],a=e[1];return t[0]=i[0]*o+i[4]*a+i[12],t[1]=i[1]*o+i[5]*a+i[13],t[3]=i[3]*o+i[7]*a+i[15],t}const $t=100;class Wt{constructor(t,e=new Mt(t.width+200,t.height+200,25),i=new Mt(t.width+200,t.height+200,25)){this.transform=t,this.grid=e,this.ignoredGrid=i,this.pitchfactor=Math.cos(t._pitch)*t.cameraToCenterDistance,this.screenRightBoundary=t.width+$t,this.screenBottomBoundary=t.height+$t,this.gridRightBoundary=t.width+200,this.gridBottomBoundary=t.height+200,this.perspectiveRatioCutoff=.6}placeCollisionBox(t,e,i,o,a,s){const r=this.projectAndGetPerspectiveRatio(o,t.anchorPointX,t.anchorPointY,s),n=i*r.perspectiveRatio,l=t.x1*n+r.point.x,c=t.y1*n+r.point.y,h=t.x2*n+r.point.x,u=t.y2*n+r.point.y;return!this.isInsideGrid(l,c,h,u)||"always"!==e&&this.grid.hitTest(l,c,h,u,e,a)||r.perspectiveRatio<this.perspectiveRatioCutoff?{box:[],offscreen:!1}:{box:[l,c,h,u],offscreen:this.isOffscreen(l,c,h,u)}}placeCollisionCircles(e,i,o,a,s,r,n,l,c,h,u,d,m,p){const _=[],f=new t.pointGeometry(i.anchorX,i.anchorY),g=kt(f,r,p),x=Bt(this.transform.cameraToCenterDistance,g.signedDistanceFromCamera),v=(h?s/x:s*x)/t.ONE_EM,y=kt(f,n,p).point,b=Ut(v,a,i.lineOffsetX*v,i.lineOffsetY*v,!1,y,f,i,o,n,{},!1,p);let w=!1,T=!1,E=!0;if(b){const i=.5*d*x+m,o=new t.pointGeometry(-100,-100),a=new t.pointGeometry(this.screenRightBoundary,this.screenBottomBoundary),s=new Pt,r=b.first,n=b.last;let h=[];for(let t=r.path.length-1;t>=1;t--)h.push(r.path[t]);for(let t=1;t<n.path.length;t++)h.push(n.path[t]);const f=2.5*i;if(l){const t=h.map((t=>kt(t,l,p)));h=t.some((t=>t.signedDistanceFromCamera<=0))?[]:t.map((t=>t.point))}let g=[];if(h.length>0){const e=h[0].clone(),i=h[0].clone();for(let t=1;t<h.length;t++)e.x=Math.min(e.x,h[t].x),e.y=Math.min(e.y,h[t].y),i.x=Math.max(i.x,h[t].x),i.y=Math.max(i.y,h[t].y);g=e.x>=o.x&&i.x<=a.x&&e.y>=o.y&&i.y<=a.y?[h]:i.x<o.x||e.x>a.x||i.y<o.y||e.y>a.y?[]:t.clipLine([h],o.x,o.y,a.x,a.y)}for(const t of g){s.reset(t,.25*i);let o=0;o=s.length<=.5*i?1:Math.ceil(s.paddedLength/f)+1;for(let t=0;t<o;t++){const a=t/Math.max(o-1,1),r=s.lerp(a),n=r.x+$t,l=r.y+$t;_.push(n,l,i,0);const h=n-i,d=l-i,m=n+i,p=l+i;if(E=E&&this.isOffscreen(h,d,m,p),T=T||this.isInsideGrid(h,d,m,p),"always"!==e&&this.grid.hitTestCircle(n,l,i,e,u)&&(w=!0,!c))return{circles:[],offscreen:!1,collisionDetected:w}}}}return{circles:!c&&w||!T||x<this.perspectiveRatioCutoff?[]:_,offscreen:E,collisionDetected:w}}queryRenderedSymbols(e){if(0===e.length||0===this.grid.keysLength()&&0===this.ignoredGrid.keysLength())return{};const i=[];let o=1/0,a=1/0,s=-1/0,r=-1/0;for(const n of e){const e=new t.pointGeometry(n.x+$t,n.y+$t);o=Math.min(o,e.x),a=Math.min(a,e.y),s=Math.max(s,e.x),r=Math.max(r,e.y),i.push(e)}const n=this.grid.query(o,a,s,r).concat(this.ignoredGrid.query(o,a,s,r)),l={},c={};for(const e of n){const o=e.key;if(void 0===l[o.bucketInstanceId]&&(l[o.bucketInstanceId]={}),l[o.bucketInstanceId][o.featureIndex])continue;const a=[new t.pointGeometry(e.x1,e.y1),new t.pointGeometry(e.x2,e.y1),new t.pointGeometry(e.x2,e.y2),new t.pointGeometry(e.x1,e.y2)];t.polygonIntersectsPolygon(i,a)&&(l[o.bucketInstanceId][o.featureIndex]=!0,void 0===c[o.bucketInstanceId]&&(c[o.bucketInstanceId]=[]),c[o.bucketInstanceId].push(o.featureIndex))}return c}insertCollisionBox(t,e,i,o,a,s){(i?this.ignoredGrid:this.grid).insert({bucketInstanceId:o,featureIndex:a,collisionGroupID:s,overlapMode:e},t[0],t[1],t[2],t[3])}insertCollisionCircles(t,e,i,o,a,s){const r=i?this.ignoredGrid:this.grid,n={bucketInstanceId:o,featureIndex:a,collisionGroupID:s,overlapMode:e};for(let e=0;e<t.length;e+=4)r.insertCircle(n,t[e],t[e+1],t[e+2])}projectAndGetPerspectiveRatio(e,i,o,a){let s;return a?(s=[i,o,a(i,o),1],t.transformMat4(s,s,e)):(s=[i,o,0,1],Xt(s,s,e)),{point:new t.pointGeometry((s[0]/s[3]+1)/2*this.transform.width+$t,(-s[1]/s[3]+1)/2*this.transform.height+$t),perspectiveRatio:.5+this.transform.cameraToCenterDistance/s[3]*.5}}isOffscreen(t,e,i,o){return i<$t||t>=this.screenRightBoundary||o<$t||e>this.screenBottomBoundary}isInsideGrid(t,e,i,o){return i>=0&&t<this.gridRightBoundary&&o>=0&&e<this.gridBottomBoundary}getViewportMatrix(){const e=t.identity([]);return t.translate(e,e,[-100,-100,0]),e}}function Ht(e,i,o){return i*(t.EXTENT/(e.tileSize*Math.pow(2,o-e.tileID.overscaledZ)))}class Kt{constructor(t,e,i,o){this.opacity=t?Math.max(0,Math.min(1,t.opacity+(t.placed?e:-e))):o&&i?1:0,this.placed=i}isHidden(){return 0===this.opacity&&!this.placed}}class Yt{constructor(t,e,i,o,a){this.text=new Kt(t?t.text:null,e,i,a),this.icon=new Kt(t?t.icon:null,e,o,a)}isHidden(){return this.text.isHidden()&&this.icon.isHidden()}}class Jt{constructor(t,e,i){this.text=t,this.icon=e,this.skipFade=i}}class Qt{constructor(){this.invProjMatrix=t.create(),this.viewportMatrix=t.create(),this.circles=[]}}class te{constructor(t,e,i,o,a){this.bucketInstanceId=t,this.featureIndex=e,this.sourceLayerIndex=i,this.bucketIndex=o,this.tileID=a}}class ee{constructor(t){this.crossSourceCollisions=t,this.maxGroupID=0,this.collisionGroups={}}get(t){if(this.crossSourceCollisions)return{ID:0,predicate:null};if(!this.collisionGroups[t]){const e=++this.maxGroupID;this.collisionGroups[t]={ID:e,predicate:t=>t.collisionGroupID===e}}return this.collisionGroups[t]}}function ie(e,i,o,a,s){const{horizontalAlign:r,verticalAlign:n}=t.getAnchorAlignment(e),l=-(r-.5)*i,c=-(n-.5)*o,h=t.evaluateVariableOffset(e,a);return new t.pointGeometry(l+h[0]*s,c+h[1]*s)}function oe(e,i,o,a,s,r){const{x1:n,x2:l,y1:c,y2:h,anchorPointX:u,anchorPointY:d}=e,m=new t.pointGeometry(i,o);return a&&m._rotate(s?r:-r),{x1:n+m.x,y1:c+m.y,x2:l+m.x,y2:h+m.y,anchorPointX:u,anchorPointY:d}}class ae{constructor(t,e,i,o,a){this.transform=t.clone(),this.terrain=e,this.collisionIndex=new Wt(this.transform),this.placements={},this.opacities={},this.variableOffsets={},this.stale=!1,this.commitTime=0,this.fadeDuration=i,this.retainedQueryData={},this.collisionGroups=new ee(o),this.collisionCircleArrays={},this.prevPlacement=a,a&&(a.prevPlacement=void 0),this.placedOrientations={}}getBucketParts(e,i,o,a){const s=o.getBucket(i),r=o.latestFeatureIndex;if(!s||!r||i.id!==s.layerIds[0])return;const n=o.collisionBoxArray,l=s.layers[0].layout,c=Math.pow(2,this.transform.zoom-o.tileID.overscaledZ),h=o.tileSize/t.EXTENT,u=this.transform.calculatePosMatrix(o.tileID.toUnwrapped()),d="map"===l.get("text-pitch-alignment"),m="map"===l.get("text-rotation-alignment"),p=Ht(o,1,this.transform.zoom),_=Rt(u,d,m,this.transform,p);let f=null;if(d){const e=Lt(u,d,m,this.transform,p);f=t.multiply([],this.transform.labelPlaneMatrix,e)}this.retainedQueryData[s.bucketInstanceId]=new te(s.bucketInstanceId,r,s.sourceLayerIndex,s.index,o.tileID);const g={bucket:s,layout:l,posMatrix:u,textLabelPlaneMatrix:_,labelToScreenMatrix:f,scale:c,textPixelRatio:h,holdingForFade:o.holdingForFade(),collisionBoxArray:n,partiallyEvaluatedTextSize:t.evaluateSizeForZoom(s.textSizeData,this.transform.zoom),collisionGroup:this.collisionGroups.get(s.sourceID)};if(a)for(const t of s.sortKeyRanges){const{sortKey:i,symbolInstanceStart:o,symbolInstanceEnd:a}=t;e.push({sortKey:i,symbolInstanceStart:o,symbolInstanceEnd:a,parameters:g})}else e.push({symbolInstanceStart:0,symbolInstanceEnd:s.symbolInstances.length,parameters:g})}attemptAnchorPlacement(t,e,i,o,a,s,r,n,l,c,h,u,d,m,p,_){const f=[u.textOffset0,u.textOffset1],g=ie(t,i,o,f,a),x=this.collisionIndex.placeCollisionBox(oe(e,g.x,g.y,s,r,this.transform.angle),h,n,l,c.predicate,_);if((!p||0!==this.collisionIndex.placeCollisionBox(oe(p,g.x,g.y,s,r,this.transform.angle),h,n,l,c.predicate,_).box.length)&&x.box.length>0){let e;return this.prevPlacement&&this.prevPlacement.variableOffsets[u.crossTileID]&&this.prevPlacement.placements[u.crossTileID]&&this.prevPlacement.placements[u.crossTileID].text&&(e=this.prevPlacement.variableOffsets[u.crossTileID].anchor),this.variableOffsets[u.crossTileID]={textOffset:f,width:i,height:o,anchor:t,textBoxScale:a,prevAnchor:e},this.markUsedJustification(d,t,u,m),d.allowVerticalPlacement&&(this.markUsedOrientation(d,m,u),this.placedOrientations[u.crossTileID]=m),{shift:g,placedGlyphBoxes:x}}}placeLayerBucketPart(e,i,o){const{bucket:a,layout:s,posMatrix:r,textLabelPlaneMatrix:n,labelToScreenMatrix:l,textPixelRatio:c,holdingForFade:h,collisionBoxArray:u,partiallyEvaluatedTextSize:d,collisionGroup:m}=e.parameters,p=s.get("text-optional"),_=s.get("icon-optional"),f=t.getOverlapMode(s,"text-overlap","text-allow-overlap"),g="always"===f,x=t.getOverlapMode(s,"icon-overlap","icon-allow-overlap"),v="always"===x,y="map"===s.get("text-rotation-alignment"),b="map"===s.get("text-pitch-alignment"),w="none"!==s.get("icon-text-fit"),T="viewport-y"===s.get("symbol-z-order"),E=g&&(v||!a.hasIconData()||_),I=v&&(g||!a.hasTextData()||p);!a.collisionArrays&&u&&a.deserializeCollisionBoxes(u);const S=(e,u)=>{if(i[e.crossTileID])return;if(h)return void(this.placements[e.crossTileID]=new Jt(!1,!1,!1));let v=!1,T=!1,S=!0,C=null,z={box:null,offscreen:null},D={box:null,offscreen:null},P=null,A=null,M=null,R=0,L=0,k=0;u.textFeatureIndex?R=u.textFeatureIndex:e.useRuntimeCollisionCircles&&(R=e.featureIndex),u.verticalTextFeatureIndex&&(L=u.verticalTextFeatureIndex);const B=this.retainedQueryData[a.bucketInstanceId].tileID,F=this.terrain?(t,e)=>this.terrain.getElevation(B,t,e):null;for(const t of["textBox","verticalTextBox","iconBox","verticalIconBox"]){const e=u[t];e&&(e.elevation=F?F(e.anchorPointX,e.anchorPointY):0)}const O=u.textBox;if(O){const i=i=>{let o=t.WritingMode.horizontal;if(a.allowVerticalPlacement&&!i&&this.prevPlacement){const t=this.prevPlacement.placedOrientations[e.crossTileID];t&&(this.placedOrientations[e.crossTileID]=t,o=t,this.markUsedOrientation(a,o,e))}return o},o=(i,o)=>{if(a.allowVerticalPlacement&&e.numVerticalGlyphVertices>0&&u.verticalTextBox){for(const e of a.writingModes)if(e===t.WritingMode.vertical?(z=o(),D=z):z=i(),z&&z.box&&z.box.length)break}else z=i()};if(s.get("text-variable-anchor")){let n=s.get("text-variable-anchor");if(this.prevPlacement&&this.prevPlacement.variableOffsets[e.crossTileID]){const t=this.prevPlacement.variableOffsets[e.crossTileID];n.indexOf(t.anchor)>0&&(n=n.filter((e=>e!==t.anchor)),n.unshift(t.anchor))}const l=(t,i,o)=>{const s=t.x2-t.x1,l=t.y2-t.y1,h=e.textBoxScale,u=w&&"never"===x?i:null;let d={box:[],offscreen:!1};const p="never"!==f?2*n.length:n.length;for(let i=0;i<p;++i){const p=this.attemptAnchorPlacement(n[i%n.length],t,s,l,h,y,b,c,r,m,i>=n.length?f:"never",e,a,o,u,F);if(p&&(d=p.placedGlyphBoxes,d&&d.box&&d.box.length)){v=!0,C=p.shift;break}}return d};o((()=>l(O,u.iconBox,t.WritingMode.horizontal)),(()=>{const i=u.verticalTextBox;return a.allowVerticalPlacement&&!(z&&z.box&&z.box.length)&&e.numVerticalGlyphVertices>0&&i?l(i,u.verticalIconBox,t.WritingMode.vertical):{box:null,offscreen:null}})),z&&(v=z.box,S=z.offscreen);const h=i(z&&z.box);if(!v&&this.prevPlacement){const t=this.prevPlacement.variableOffsets[e.crossTileID];t&&(this.variableOffsets[e.crossTileID]=t,this.markUsedJustification(a,t.anchor,e,h))}}else{const s=(t,i)=>{const o=this.collisionIndex.placeCollisionBox(t,f,c,r,m.predicate,F);return o&&o.box&&o.box.length&&(this.markUsedOrientation(a,i,e),this.placedOrientations[e.crossTileID]=i),o};o((()=>s(O,t.WritingMode.horizontal)),(()=>{const i=u.verticalTextBox;return a.allowVerticalPlacement&&e.numVerticalGlyphVertices>0&&i?s(i,t.WritingMode.vertical):{box:null,offscreen:null}})),i(z&&z.box&&z.box.length)}}if(P=z,v=P&&P.box&&P.box.length>0,S=P&&P.offscreen,e.useRuntimeCollisionCircles){const i=a.text.placedSymbolArray.get(e.centerJustifiedTextSymbolIndex),c=t.evaluateSizeForFeature(a.textSizeData,d,i),h=s.get("text-padding");A=this.collisionIndex.placeCollisionCircles(f,i,a.lineVertexArray,a.glyphOffsetArray,c,r,n,l,o,b,m.predicate,e.collisionCircleDiameter,h,F),v=g||A.circles.length>0&&!A.collisionDetected,S=S&&A.offscreen}if(u.iconFeatureIndex&&(k=u.iconFeatureIndex),u.iconBox){const t=t=>{const e=w&&C?oe(t,C.x,C.y,y,b,this.transform.angle):t;return this.collisionIndex.placeCollisionBox(e,x,c,r,m.predicate,F)};D&&D.box&&D.box.length&&u.verticalIconBox?(M=t(u.verticalIconBox),T=M.box.length>0):(M=t(u.iconBox),T=M.box.length>0),S=S&&M.offscreen}const U=p||0===e.numHorizontalGlyphVertices&&0===e.numVerticalGlyphVertices,N=_||0===e.numIconVertices;if(U||N?N?U||(T=T&&v):v=T&&v:T=v=T&&v,v&&P&&P.box&&this.collisionIndex.insertCollisionBox(P.box,f,s.get("text-ignore-placement"),a.bucketInstanceId,D&&D.box&&L?L:R,m.ID),T&&M&&this.collisionIndex.insertCollisionBox(M.box,x,s.get("icon-ignore-placement"),a.bucketInstanceId,k,m.ID),A&&(v&&this.collisionIndex.insertCollisionCircles(A.circles,f,s.get("text-ignore-placement"),a.bucketInstanceId,R,m.ID),o)){const t=a.bucketInstanceId;let e=this.collisionCircleArrays[t];void 0===e&&(e=this.collisionCircleArrays[t]=new Qt);for(let t=0;t<A.circles.length;t+=4)e.circles.push(A.circles[t+0]),e.circles.push(A.circles[t+1]),e.circles.push(A.circles[t+2]),e.circles.push(A.collisionDetected?1:0)}this.placements[e.crossTileID]=new Jt(v||E,T||I,S||a.justReloaded),i[e.crossTileID]=!0};if(T){const t=a.getSortedSymbolIndexes(this.transform.angle);for(let e=t.length-1;e>=0;--e){const i=t[e];S(a.symbolInstances.get(i),a.collisionArrays[i])}}else for(let t=e.symbolInstanceStart;t<e.symbolInstanceEnd;t++)S(a.symbolInstances.get(t),a.collisionArrays[t]);if(o&&a.bucketInstanceId in this.collisionCircleArrays){const e=this.collisionCircleArrays[a.bucketInstanceId];t.invert(e.invProjMatrix,r),e.viewportMatrix=this.collisionIndex.getViewportMatrix()}a.justReloaded=!1}markUsedJustification(e,i,o,a){let s;s=a===t.WritingMode.vertical?o.verticalPlacedTextSymbolIndex:{left:o.leftJustifiedTextSymbolIndex,center:o.centerJustifiedTextSymbolIndex,right:o.rightJustifiedTextSymbolIndex}[t.getAnchorJustification(i)];const r=[o.leftJustifiedTextSymbolIndex,o.centerJustifiedTextSymbolIndex,o.rightJustifiedTextSymbolIndex,o.verticalPlacedTextSymbolIndex];for(const t of r)t>=0&&(e.text.placedSymbolArray.get(t).crossTileID=s>=0&&t!==s?0:o.crossTileID)}markUsedOrientation(e,i,o){const a=i===t.WritingMode.horizontal||i===t.WritingMode.horizontalOnly?i:0,s=i===t.WritingMode.vertical?i:0,r=[o.leftJustifiedTextSymbolIndex,o.centerJustifiedTextSymbolIndex,o.rightJustifiedTextSymbolIndex];for(const t of r)e.text.placedSymbolArray.get(t).placedOrientation=a;o.verticalPlacedTextSymbolIndex&&(e.text.placedSymbolArray.get(o.verticalPlacedTextSymbolIndex).placedOrientation=s)}commit(t){this.commitTime=t,this.zoomAtLastRecencyCheck=this.transform.zoom;const e=this.prevPlacement;let i=!1;this.prevZoomAdjustment=e?e.zoomAdjustment(this.transform.zoom):0;const o=e?e.symbolFadeChange(t):1,a=e?e.opacities:{},s=e?e.variableOffsets:{},r=e?e.placedOrientations:{};for(const t in this.placements){const e=this.placements[t],s=a[t];s?(this.opacities[t]=new Yt(s,o,e.text,e.icon),i=i||e.text!==s.text.placed||e.icon!==s.icon.placed):(this.opacities[t]=new Yt(null,o,e.text,e.icon,e.skipFade),i=i||e.text||e.icon)}for(const t in a){const e=a[t];if(!this.opacities[t]){const a=new Yt(e,o,!1,!1);a.isHidden()||(this.opacities[t]=a,i=i||e.text.placed||e.icon.placed)}}for(const t in s)this.variableOffsets[t]||!this.opacities[t]||this.opacities[t].isHidden()||(this.variableOffsets[t]=s[t]);for(const t in r)this.placedOrientations[t]||!this.opacities[t]||this.opacities[t].isHidden()||(this.placedOrientations[t]=r[t]);i?this.lastPlacementChangeTime=t:"number"!=typeof this.lastPlacementChangeTime&&(this.lastPlacementChangeTime=e?e.lastPlacementChangeTime:t)}updateLayerOpacities(t,e){const i={};for(const o of e){const e=o.getBucket(t);e&&o.latestFeatureIndex&&t.id===e.layerIds[0]&&this.updateBucketOpacities(e,i,o.collisionBoxArray)}}updateBucketOpacities(e,i,o){e.hasTextData()&&e.text.opacityVertexArray.clear(),e.hasIconData()&&e.icon.opacityVertexArray.clear(),e.hasIconCollisionBoxData()&&e.iconCollisionBox.collisionVertexArray.clear(),e.hasTextCollisionBoxData()&&e.textCollisionBox.collisionVertexArray.clear();const a=e.layers[0].layout,s=new Yt(null,0,!1,!1,!0),r=a.get("text-allow-overlap"),n=a.get("icon-allow-overlap"),l=a.get("text-variable-anchor"),c="map"===a.get("text-rotation-alignment"),h="map"===a.get("text-pitch-alignment"),u="none"!==a.get("icon-text-fit"),d=new Yt(null,0,r&&(n||!e.hasIconData()||a.get("icon-optional")),n&&(r||!e.hasTextData()||a.get("text-optional")),!0);!e.collisionArrays&&o&&(e.hasIconCollisionBoxData()||e.hasTextCollisionBoxData())&&e.deserializeCollisionBoxes(o);const m=(t,e,i)=>{for(let o=0;o<e/4;o++)t.opacityVertexArray.emplaceBack(i)};for(let o=0;o<e.symbolInstances.length;o++){const a=e.symbolInstances.get(o),{numHorizontalGlyphVertices:r,numVerticalGlyphVertices:n,crossTileID:p}=a;let _=this.opacities[p];i[p]?_=s:_||(_=d,this.opacities[p]=_),i[p]=!0;const f=a.numIconVertices>0,g=this.placedOrientations[a.crossTileID],x=g===t.WritingMode.vertical,v=g===t.WritingMode.horizontal||g===t.WritingMode.horizontalOnly;if(r>0||n>0){const t=me(_.text);m(e.text,r,x?pe:t),m(e.text,n,v?pe:t);const i=_.text.isHidden();[a.rightJustifiedTextSymbolIndex,a.centerJustifiedTextSymbolIndex,a.leftJustifiedTextSymbolIndex].forEach((t=>{t>=0&&(e.text.placedSymbolArray.get(t).hidden=i||x?1:0)})),a.verticalPlacedTextSymbolIndex>=0&&(e.text.placedSymbolArray.get(a.verticalPlacedTextSymbolIndex).hidden=i||v?1:0);const o=this.variableOffsets[a.crossTileID];o&&this.markUsedJustification(e,o.anchor,a,g);const s=this.placedOrientations[a.crossTileID];s&&(this.markUsedJustification(e,"left",a,s),this.markUsedOrientation(e,s,a))}if(f){const t=me(_.icon),i=!(u&&a.verticalPlacedIconSymbolIndex&&x);a.placedIconSymbolIndex>=0&&(m(e.icon,a.numIconVertices,i?t:pe),e.icon.placedSymbolArray.get(a.placedIconSymbolIndex).hidden=_.icon.isHidden()),a.verticalPlacedIconSymbolIndex>=0&&(m(e.icon,a.numVerticalIconVertices,i?pe:t),e.icon.placedSymbolArray.get(a.verticalPlacedIconSymbolIndex).hidden=_.icon.isHidden())}if(e.hasIconCollisionBoxData()||e.hasTextCollisionBoxData()){const i=e.collisionArrays[o];if(i){let o=new t.pointGeometry(0,0);if(i.textBox||i.verticalTextBox){let t=!0;if(l){const e=this.variableOffsets[p];e?(o=ie(e.anchor,e.width,e.height,e.textOffset,e.textBoxScale),c&&o._rotate(h?this.transform.angle:-this.transform.angle)):t=!1}i.textBox&&se(e.textCollisionBox.collisionVertexArray,_.text.placed,!t||x,o.x,o.y),i.verticalTextBox&&se(e.textCollisionBox.collisionVertexArray,_.text.placed,!t||v,o.x,o.y)}const a=Boolean(!v&&i.verticalIconBox);i.iconBox&&se(e.iconCollisionBox.collisionVertexArray,_.icon.placed,a,u?o.x:0,u?o.y:0),i.verticalIconBox&&se(e.iconCollisionBox.collisionVertexArray,_.icon.placed,!a,u?o.x:0,u?o.y:0)}}}if(e.sortFeatures(this.transform.angle),this.retainedQueryData[e.bucketInstanceId]&&(this.retainedQueryData[e.bucketInstanceId].featureSortOrder=e.featureSortOrder),e.hasTextData()&&e.text.opacityVertexBuffer&&e.text.opacityVertexBuffer.updateData(e.text.opacityVertexArray),e.hasIconData()&&e.icon.opacityVertexBuffer&&e.icon.opacityVertexBuffer.updateData(e.icon.opacityVertexArray),e.hasIconCollisionBoxData()&&e.iconCollisionBox.collisionVertexBuffer&&e.iconCollisionBox.collisionVertexBuffer.updateData(e.iconCollisionBox.collisionVertexArray),e.hasTextCollisionBoxData()&&e.textCollisionBox.collisionVertexBuffer&&e.textCollisionBox.collisionVertexBuffer.updateData(e.textCollisionBox.collisionVertexArray),e.bucketInstanceId in this.collisionCircleArrays){const t=this.collisionCircleArrays[e.bucketInstanceId];e.placementInvProjMatrix=t.invProjMatrix,e.placementViewportMatrix=t.viewportMatrix,e.collisionCircleArray=t.circles,delete this.collisionCircleArrays[e.bucketInstanceId]}}symbolFadeChange(t){return 0===this.fadeDuration?1:(t-this.commitTime)/this.fadeDuration+this.prevZoomAdjustment}zoomAdjustment(t){return Math.max(0,(this.transform.zoom-t)/1.5)}hasTransitions(t){return this.stale||t-this.lastPlacementChangeTime<this.fadeDuration}stillRecent(t,e){const i=this.zoomAtLastRecencyCheck===e?1-this.zoomAdjustment(e):1;return this.zoomAtLastRecencyCheck=e,this.commitTime+this.fadeDuration*i>t}setStale(){this.stale=!0}}function se(t,e,i,o,a){t.emplaceBack(e?1:0,i?1:0,o||0,a||0),t.emplaceBack(e?1:0,i?1:0,o||0,a||0),t.emplaceBack(e?1:0,i?1:0,o||0,a||0),t.emplaceBack(e?1:0,i?1:0,o||0,a||0)}const re=Math.pow(2,25),ne=Math.pow(2,24),le=Math.pow(2,17),ce=Math.pow(2,16),he=Math.pow(2,9),ue=Math.pow(2,8),de=Math.pow(2,1);function me(t){if(0===t.opacity&&!t.placed)return 0;if(1===t.opacity&&t.placed)return 4294967295;const e=t.placed?1:0,i=Math.floor(127*t.opacity);return i*re+e*ne+i*le+e*ce+i*he+e*ue+i*de+e}const pe=0;class _e{constructor(t){this._sortAcrossTiles="viewport-y"!==t.layout.get("symbol-z-order")&&!t.layout.get("symbol-sort-key").isConstant(),this._currentTileIndex=0,this._currentPartIndex=0,this._seenCrossTileIDs={},this._bucketParts=[]}continuePlacement(t,e,i,o,a){const s=this._bucketParts;for(;this._currentTileIndex<t.length;)if(e.getBucketParts(s,o,t[this._currentTileIndex],this._sortAcrossTiles),this._currentTileIndex++,a())return!0;for(this._sortAcrossTiles&&(this._sortAcrossTiles=!1,s.sort(((t,e)=>t.sortKey-e.sortKey)));this._currentPartIndex<s.length;)if(e.placeLayerBucketPart(s[this._currentPartIndex],this._seenCrossTileIDs,i),this._currentPartIndex++,a())return!0;return!1}}class fe{constructor(t,e,i,o,a,s,r,n){this.placement=new ae(t,e,s,r,n),this._currentPlacementIndex=i.length-1,this._forceFullPlacement=o,this._showCollisionBoxes=a,this._done=!1}isDone(){return this._done}continuePlacement(e,i,o){const a=t.exported.now(),s=()=>{const e=t.exported.now()-a;return!this._forceFullPlacement&&e>2};for(;this._currentPlacementIndex>=0;){const t=i[e[this._currentPlacementIndex]],a=this.placement.collisionIndex.transform.zoom;if("symbol"===t.type&&(!t.minzoom||t.minzoom<=a)&&(!t.maxzoom||t.maxzoom>a)){if(this._inProgressLayer||(this._inProgressLayer=new _e(t)),this._inProgressLayer.continuePlacement(o[t.source],this.placement,this._showCollisionBoxes,t,s))return;delete this._inProgressLayer}this._currentPlacementIndex--}this._done=!0}commit(t){return this.placement.commit(t),this.placement}}const ge=512/t.EXTENT/2;class xe{constructor(t,e,i){this.tileID=t,this.indexedSymbolInstances={},this.bucketInstanceId=i;for(let i=0;i<e.length;i++){const o=e.get(i),a=o.key;this.indexedSymbolInstances[a]||(this.indexedSymbolInstances[a]=[]),this.indexedSymbolInstances[a].push({crossTileID:o.crossTileID,coord:this.getScaledCoordinates(o,t)})}}getScaledCoordinates(e,i){const o=ge/Math.pow(2,i.canonical.z-this.tileID.canonical.z);return{x:Math.floor((i.canonical.x*t.EXTENT+e.anchorX)*o),y:Math.floor((i.canonical.y*t.EXTENT+e.anchorY)*o)}}findMatches(t,e,i){const o=this.tileID.canonical.z<e.canonical.z?1:Math.pow(2,this.tileID.canonical.z-e.canonical.z);for(let a=0;a<t.length;a++){const s=t.get(a);if(s.crossTileID)continue;const r=this.indexedSymbolInstances[s.key];if(!r)continue;const n=this.getScaledCoordinates(s,e);for(const t of r)if(Math.abs(t.coord.x-n.x)<=o&&Math.abs(t.coord.y-n.y)<=o&&!i[t.crossTileID]){i[t.crossTileID]=!0,s.crossTileID=t.crossTileID;break}}}}class ve{constructor(){this.maxCrossTileID=0}generate(){return++this.maxCrossTileID}}class ye{constructor(){this.indexes={},this.usedCrossTileIDs={},this.lng=0}handleWrapJump(t){const e=Math.round((t-this.lng)/360);if(0!==e)for(const t in this.indexes){const i=this.indexes[t],o={};for(const t in i){const a=i[t];a.tileID=a.tileID.unwrapTo(a.tileID.wrap+e),o[a.tileID.key]=a}this.indexes[t]=o}this.lng=t}addBucket(t,e,i){if(this.indexes[t.overscaledZ]&&this.indexes[t.overscaledZ][t.key]){if(this.indexes[t.overscaledZ][t.key].bucketInstanceId===e.bucketInstanceId)return!1;this.removeBucketCrossTileIDs(t.overscaledZ,this.indexes[t.overscaledZ][t.key])}for(let t=0;t<e.symbolInstances.length;t++)e.symbolInstances.get(t).crossTileID=0;this.usedCrossTileIDs[t.overscaledZ]||(this.usedCrossTileIDs[t.overscaledZ]={});const o=this.usedCrossTileIDs[t.overscaledZ];for(const i in this.indexes){const a=this.indexes[i];if(Number(i)>t.overscaledZ)for(const i in a){const s=a[i];s.tileID.isChildOf(t)&&s.findMatches(e.symbolInstances,t,o)}else{const s=a[t.scaledTo(Number(i)).key];s&&s.findMatches(e.symbolInstances,t,o)}}for(let t=0;t<e.symbolInstances.length;t++){const a=e.symbolInstances.get(t);a.crossTileID||(a.crossTileID=i.generate(),o[a.crossTileID]=!0)}return void 0===this.indexes[t.overscaledZ]&&(this.indexes[t.overscaledZ]={}),this.indexes[t.overscaledZ][t.key]=new xe(t,e.symbolInstances,e.bucketInstanceId),!0}removeBucketCrossTileIDs(t,e){for(const i in e.indexedSymbolInstances)for(const o of e.indexedSymbolInstances[i])delete this.usedCrossTileIDs[t][o.crossTileID]}removeStaleBuckets(t){let e=!1;for(const i in this.indexes){const o=this.indexes[i];for(const a in o)t[o[a].bucketInstanceId]||(this.removeBucketCrossTileIDs(i,o[a]),delete o[a],e=!0)}return e}}class be{constructor(){this.layerIndexes={},this.crossTileIDs=new ve,this.maxBucketInstanceId=0,this.bucketsInCurrentPlacement={}}addLayer(t,e,i){let o=this.layerIndexes[t.id];void 0===o&&(o=this.layerIndexes[t.id]=new ye);let a=!1;const s={};o.handleWrapJump(i);for(const i of e){const e=i.getBucket(t);e&&t.id===e.layerIds[0]&&(e.bucketInstanceId||(e.bucketInstanceId=++this.maxBucketInstanceId),o.addBucket(i.tileID,e,this.crossTileIDs)&&(a=!0),s[e.bucketInstanceId]=!0)}return o.removeStaleBuckets(s)&&(a=!0),a}pruneUnusedLayers(t){const e={};t.forEach((t=>{e[t]=!0}));for(const t in this.layerIndexes)e[t]||delete this.layerIndexes[t]}}var we=t.createLayout([{name:"a_pos",type:"Int16",components:2}]);class Te extends t.Evented{constructor(t){super(),this.sourceCache=t,this._tiles={},this._renderableTilesKeys=[],this._sourceTileCache={},this.renderHistory=[],this.minzoom=0,this.maxzoom=22,this.tileSize=512,this.deltaZoom=1,this.renderHistorySize=150,t.usedForTerrain=!0,t.tileSize=this.tileSize*2**this.deltaZoom}destruct(){this.sourceCache.usedForTerrain=!1,this.sourceCache.tileSize=null;for(const t in this._tiles){const e=this._tiles[t];e.textures.forEach((t=>t.destroy())),e.textures=[]}}update(e,i){this.sourceCache.update(e,i),this._renderableTilesKeys=[];for(const o of e.coveringTiles({tileSize:this.tileSize,minzoom:this.minzoom,maxzoom:this.maxzoom,reparseOverscaled:!1,terrain:i}))this._renderableTilesKeys.push(o.key),this._tiles[o.key]||(o.posMatrix=new Float64Array(16),t.ortho(o.posMatrix,0,t.EXTENT,0,t.EXTENT,0,1),this._tiles[o.key]=new ct(o,this.tileSize))}removeOutdated(t){const e={};for(const t of this._renderableTilesKeys)e[t]=!0;for(this.renderHistory=this.renderHistory.filter(((t,e)=>this.renderHistory.indexOf(t)===e));this.renderHistory.length>this.renderHistorySize;){const i=this.sourceCache._tiles[this.renderHistory.shift()];i&&!e[i.tileID.key]&&(i.clearTextures(t),delete this.sourceCache._tiles[i.tileID.key])}}getRenderableTiles(){return this._renderableTilesKeys.map((t=>this.getTileByID(t)))}getTileByID(t){return this._tiles[t]}getTerrainCoords(e){const i={};for(const o of this._renderableTilesKeys){const a=this._tiles[o].tileID;if(a.canonical.equals(e.canonical)){const a=e.clone();a.posMatrix=new Float64Array(16),t.ortho(a.posMatrix,0,t.EXTENT,0,t.EXTENT,0,1),i[o]=a}else if(a.canonical.isChildOf(e.canonical)){const s=e.clone();s.posMatrix=new Float64Array(16);const r=a.canonical.z-e.canonical.z,n=a.canonical.x-(a.canonical.x>>r<<r),l=a.canonical.y-(a.canonical.y>>r<<r),c=t.EXTENT>>r;t.ortho(s.posMatrix,0,c,0,c,0,1),t.translate(s.posMatrix,s.posMatrix,[-n*c,-l*c,0]),i[o]=s}else if(e.canonical.isChildOf(a.canonical)){const s=e.clone();s.posMatrix=new Float64Array(16);const r=e.canonical.z-a.canonical.z,n=e.canonical.x-(e.canonical.x>>r<<r),l=e.canonical.y-(e.canonical.y>>r<<r),c=t.EXTENT>>r;t.ortho(s.posMatrix,0,t.EXTENT,0,t.EXTENT,0,1),t.translate(s.posMatrix,s.posMatrix,[n*c,l*c,0]),t.scale(s.posMatrix,s.posMatrix,[1/2**r,1/2**r,0]),i[o]=s}}return i}getSourceTile(t,e){const i=this.sourceCache._source;let o=t.overscaledZ-this.deltaZoom;if(o>i.maxzoom&&(o=i.maxzoom),o<i.minzoom)return null;this._sourceTileCache[t.key]||(this._sourceTileCache[t.key]=t.scaledTo(o).key);let a=this.sourceCache.getTileByID(this._sourceTileCache[t.key]);if((!a||!a.dem)&&e)for(;o>i.minzoom&&(!a||!a.dem);)a=this.sourceCache.getTileByID(t.scaledTo(o--).key);return a}tilesAfterTime(t=Date.now()){return Object.values(this._tiles).filter((e=>e.timeLoaded>=t))}}class Ee{constructor(t,e,i){this.style=t,this.sourceCache=new Te(e),this.options=i,this.exaggeration="number"==typeof i.exaggeration?i.exaggeration:1,this.elevationOffset="number"==typeof i.elevationOffset?i.elevationOffset:450,this.qualityFactor=2,this.meshSize=128,this._demMatrixCache={},this.coordsIndex=[],this._coordsTextureSize=1024,this.clearRerenderCache()}getDEMElevation(e,i,o,a=t.EXTENT){if(!(i>=0&&i<a&&o>=0&&o<a))return this.elevationOffset;let s=0;const r=this.getTerrainData(e);if(r.tile&&r.tile.dem){const e=function(t,e,i){var o=e[0],a=e[1];return t[0]=i[0]*o+i[4]*a+i[12],t[1]=i[1]*o+i[5]*a+i[13],t}([],[i/a*t.EXTENT,o/a*t.EXTENT],r.u_terrain_matrix),n=[e[0]*r.tile.dem.dim,e[1]*r.tile.dem.dim],l=[Math.floor(n[0]),Math.floor(n[1])],c=r.tile.dem.get(l[0],l[1]),h=r.tile.dem.get(l[0],l[1]+1),u=r.tile.dem.get(l[0]+1,l[1]),d=r.tile.dem.get(l[0]+1,l[1]+1);s=t.number(t.number(c,h,n[0]-l[0]),t.number(u,d,n[0]-l[0]),n[1]-l[1])}return s}rememberForRerender(t,e){for(const i in this.sourceCache._tiles){const o=this.sourceCache._tiles[i];(o.tileID.equals(e)||o.tileID.isChildOf(e))&&(t===this.sourceCache.sourceCache.id&&(o.timeLoaded=Date.now()),this._rerender[t]=this._rerender[t]||{},this._rerender[t][o.tileID.key]=!0)}}needsRerender(t,e){return this._rerender[t]&&this._rerender[t][e.key]}clearRerenderCache(){this._rerender={}}getElevation(e,i,o,a=t.EXTENT){return(this.getDEMElevation(e,i,o,a)+this.elevationOffset)*this.exaggeration}getTerrainData(e){if(!this._emptyDemTexture){const e=this.style.map.painter.context,i=new t.RGBAImage({width:1,height:1},new Uint8Array(4));this._emptyDepthTexture=new B(e,i,e.gl.RGBA,{premultiply:!1}),this._emptyDemUnpack=[0,0,0,0],this._emptyDemTexture=new B(e,new t.RGBAImage({width:1,height:1}),e.gl.RGBA,{premultiply:!1}),this._emptyDemTexture.bind(e.gl.NEAREST,e.gl.CLAMP_TO_EDGE),this._emptyDemMatrix=t.identity([])}const i=this.sourceCache.getSourceTile(e,!0);if(i&&i.dem&&(!i.demTexture||i.needsTerrainPrepare)){const t=this.style.map.painter.context;i.demTexture=this.style.map.painter.getTileTexture(i.dem.stride),i.demTexture?i.demTexture.update(i.dem.getPixels(),{premultiply:!1}):i.demTexture=new B(t,i.dem.getPixels(),t.gl.RGBA,{premultiply:!1}),i.demTexture.bind(t.gl.NEAREST,t.gl.CLAMP_TO_EDGE),i.needsTerrainPrepare=!1}const o=i&&i+i.tileID.key+e.key;if(o&&!this._demMatrixCache[o]){const o=this.sourceCache.sourceCache._source.maxzoom;let a=e.canonical.z-i.tileID.canonical.z;e.overscaledZ>e.canonical.z&&(e.canonical.z>=o?a=e.canonical.z-o:t.warnOnce("cannot calculate elevation if elevation maxzoom > source.maxzoom"));const s=e.canonical.x-(e.canonical.x>>a<<a),r=e.canonical.y-(e.canonical.y>>a<<a),n=t.fromScaling(new Float64Array(16),[1/(t.EXTENT<<a),1/(t.EXTENT<<a),0]);t.translate(n,n,[s*t.EXTENT,r*t.EXTENT,0]),this._demMatrixCache[e.key]={matrix:n,coord:e}}return{u_depth:2,u_terrain:3,u_terrain_dim:i&&i.dem&&i.dem.dim||1,u_terrain_matrix:o?this._demMatrixCache[e.key].matrix:this._emptyDemMatrix,u_terrain_unpack:i&&i.dem&&i.dem.getUnpackVector()||this._emptyDemUnpack,u_terrain_offset:this.elevationOffset,u_terrain_exaggeration:this.exaggeration,texture:(i&&i.demTexture||this._emptyDemTexture).texture,depthTexture:(this._fboDepthTexture||this._emptyDepthTexture).texture,tile:i}}getRTTFramebuffer(){const t=this.style.map.painter;if(!this._rttFramebuffer){const e=this.sourceCache.tileSize*this.qualityFactor;this._rttFramebuffer=t.context.createFramebuffer(e,e,!0),this._rttFramebuffer.depthAttachment.set(t.context.createRenderbuffer(t.context.gl.DEPTH_COMPONENT16,e,e))}return this._rttFramebuffer}getFramebuffer(t){const e=this.style.map.painter,i=e.width/devicePixelRatio,o=e.height/devicePixelRatio;return!this._fbo||this._fbo.width===i&&this._fbo.height===o||(this._fbo.destroy(),this._fboCoordsTexture.destroy(),this._fboDepthTexture.destroy(),delete this._fbo,delete this._fboDepthTexture,delete this._fboCoordsTexture),this._fboCoordsTexture||(this._fboCoordsTexture=new B(e.context,{width:i,height:o,data:null},e.context.gl.RGBA,{premultiply:!1}),this._fboCoordsTexture.bind(e.context.gl.NEAREST,e.context.gl.CLAMP_TO_EDGE)),this._fboDepthTexture||(this._fboDepthTexture=new B(e.context,{width:i,height:o,data:null},e.context.gl.RGBA,{premultiply:!1}),this._fboDepthTexture.bind(e.context.gl.NEAREST,e.context.gl.CLAMP_TO_EDGE)),this._fbo||(this._fbo=e.context.createFramebuffer(i,o,!0),this._fbo.depthAttachment.set(e.context.createRenderbuffer(e.context.gl.DEPTH_COMPONENT16,i,o))),this._fbo.colorAttachment.set("coords"===t?this._fboCoordsTexture.texture:this._fboDepthTexture.texture),this._fbo}getCoordsTexture(){const e=this.style.map.painter.context;if(this._coordsTexture)return this._coordsTexture;const i=new Uint8Array(this._coordsTextureSize*this._coordsTextureSize*4);for(let t=0,e=0;t<this._coordsTextureSize;t++)for(let o=0;o<this._coordsTextureSize;o++,e+=4)i[e+0]=255&o,i[e+1]=255&t,i[e+2]=o>>8<<4|t>>8,i[e+3]=0;const o=new t.RGBAImage({width:this._coordsTextureSize,height:this._coordsTextureSize},new Uint8Array(i.buffer)),a=new B(e,o,e.gl.RGBA,{premultiply:!1});return a.bind(e.gl.NEAREST,e.gl.CLAMP_TO_EDGE),this._coordsTexture=a,a}pointCoordinate(e){const i=new Uint8Array(4),o=this.style.map.painter,a=o.context,s=a.gl;a.bindFramebuffer.set(this.getFramebuffer("coords").framebuffer),s.readPixels(e.x,o.height/devicePixelRatio-e.y-1,1,1,s.RGBA,s.UNSIGNED_BYTE,i),a.bindFramebuffer.set(null);const r=i[0]+(i[2]>>4<<8),n=i[1]+((15&i[2])<<8),l=this.coordsIndex[255-i[3]],c=l&&this.sourceCache.getTileByID(l);if(!c)return null;const h=this._coordsTextureSize,u=(1<<c.tileID.canonical.z)*h;return new t.MercatorCoordinate((c.tileID.canonical.x*h+r)/u,(c.tileID.canonical.y*h+n)/u,this.getElevation(c.tileID,r,n,h))}getTerrainMesh(){if(this._mesh)return this._mesh;const e=this.style.map.painter.context,i=new t.PosArray,o=new t.TriangleIndexArray,a=this.meshSize,s=t.EXTENT/a,r=a*a;for(let t=0;t<=a;t++)for(let e=0;e<=a;e++)i.emplaceBack(e*s,t*s);for(let t=0;t<r;t+=a+1)for(let e=0;e<a;e++)o.emplaceBack(e+t,a+e+t+1,a+e+t+2),o.emplaceBack(e+t,a+e+t+2,e+t+1);return this._mesh={indexBuffer:e.createIndexBuffer(o),vertexBuffer:e.createVertexBuffer(i,we.members),segments:t.SegmentVector.simpleSegment(0,0,i.length,o.length)},this._mesh}}const Ie=(e,i)=>t.emitValidationErrors(e,i&&i.filter((t=>"source.canvas"!==t.identifier))),Se=t.pick(wt,["addLayer","removeLayer","setPaintProperty","setLayoutProperty","setFilter","addSource","removeSource","setLayerZoomRange","setLight","setTransition","setGeoJSONSourceData"]),Ce=t.pick(wt,["setCenter","setZoom","setBearing","setPitch"]),ze=function(){const e={},i=t.spec.$version;for(const o in t.spec.$root){const a=t.spec.$root[o];if(a.required){let t=null;t="version"===o?i:"array"===a.type?[]:{},null!=t&&(e[o]=t)}}return e}();class De extends t.Evented{constructor(e,i={}){super(),this._debouncedUpdateSource=function(t,e,i){var o,a,s,r,n,l,c=0,h=!1,u=!1,d=!0;function m(e){var i=o,s=a;return o=a=void 0,c=e,r=t.apply(s,i)}function p(t){return c=t,n=setTimeout(f,e),h?m(t):r}function _(t){var i=t-l;return void 0===l||i>=e||i<0||u&&t-c>=s}function f(){var t=z();if(_(t))return g(t);n=setTimeout(f,function(t){var i=e-(t-l);return u?A(i,s-(t-c)):i}(t))}function g(t){return n=void 0,d&&o?m(t):(o=a=void 0,r)}function x(){var t=z(),i=_(t);if(o=arguments,a=this,l=t,i){if(void 0===n)return p(l);if(u)return clearTimeout(n),n=setTimeout(f,e),m(l)}return void 0===n&&(n=setTimeout(f,e)),r}return e=D(e)||0,C(i)&&(h=!!i.leading,s=(u="maxWait"in i)?P(D(i.maxWait)||0,e):s,d="trailing"in i?!!i.trailing:d),x.cancel=function(){void 0!==n&&clearTimeout(n),c=0,o=l=a=n=void 0},x.flush=function(){return void 0===n?r:g(z())},x}(((t,e)=>{this.sourceCaches[t]&&this.sourceCaches[t].update(e,this.terrain)}),60,{leading:!0}),this.map=e,this.dispatcher=new $(vt(),this),this.imageManager=new O,this.imageManager.setEventedParent(this),this.glyphManager=new Z(e._requestManager,i.localIdeographFontFamily),this.lineAtlas=new X(256,512),this.crossTileSymbolIndex=new be,this._layers={},this._serializedLayers={},this._order=[],this.sourceCaches={},this.zoomHistory=new t.ZoomHistory,this._loaded=!1,this._availableImages=[],this._resetUpdates(),this.dispatcher.broadcast("setReferrer",t.getReferrer());const o=this;this._rtlTextPluginCallback=De.registerForPluginStateChange((e=>{o.dispatcher.broadcast("syncRTLPluginState",{pluginStatus:e.pluginStatus,pluginURL:e.pluginURL},((e,i)=>{if(t.triggerPluginCompletionEvent(e),i&&i.every((t=>t)))for(const t in o.sourceCaches)o.sourceCaches[t].reload()}))})),this.on("data",(t=>{if("source"!==t.dataType||"metadata"!==t.sourceDataType)return;const e=this.sourceCaches[t.sourceId];if(!e)return;const i=e.getSource();if(i&&i.vectorLayerIds)for(const t in this._layers){const e=this._layers[t];e.source===i.id&&this._validateLayer(e)}}))}loadURL(e,i={}){this.fire(new t.Event("dataloading",{dataType:"style"}));const o="boolean"!=typeof i.validate||i.validate,a=this.map._requestManager.transformRequest(e,t.ResourceType.Style);this._request=t.getJSON(a,((e,i)=>{this._request=null,e?this.fire(new t.ErrorEvent(e)):i&&this._load(i,o)}))}loadJSON(e,i={}){this.fire(new t.Event("dataloading",{dataType:"style"})),this._request=t.exported.frame((()=>{this._request=null,this._load(e,!1!==i.validate)}))}loadEmpty(){this.fire(new t.Event("dataloading",{dataType:"style"})),this._load(ze,!1)}_load(e,i){if(i&&Ie(this,t.validateStyle(e)))return;this._loaded=!0,this.stylesheet=e;for(const t in e.sources)this.addSource(t,e.sources[t],{validate:!1});e.sprite?this._loadSprite(e.sprite):this.imageManager.setLoaded(!0),this.glyphManager.setURL(e.glyphs);const o=bt(this.stylesheet.layers);this._order=o.map((t=>t.id)),this._layers={},this._serializedLayers={};for(let e of o)e=t.createStyleLayer(e),e.setEventedParent(this,{layer:{id:e.id}}),this._layers[e.id]=e,this._serializedLayers[e.id]=e.serialize();this.dispatcher.broadcast("setLayers",this._serializeLayers(this._order)),this.light=new V(this.stylesheet.light),this.setTerrain(this.stylesheet.terrain),this.fire(new t.Event("data",{dataType:"style"})),this.fire(new t.Event("style.load"))}_loadSprite(e){this._spriteRequest=function(e,i,o,a){let s,r,n;const l=o>1?"@2x":"";let c=t.getJSON(i.transformRequest(i.normalizeSpriteURL(e,l,".json"),t.ResourceType.SpriteJSON),((t,e)=>{c=null,n||(n=t,s=e,u())})),h=t.getImage(i.transformRequest(i.normalizeSpriteURL(e,l,".png"),t.ResourceType.SpriteImage),((t,e)=>{h=null,n||(n=t,r=e,u())}));function u(){if(n)a(n);else if(s&&r){const e=t.exported.getImageData(r),i={};for(const o in s){const{width:a,height:r,x:n,y:l,sdf:c,pixelRatio:h,stretchX:u,stretchY:d,content:m}=s[o],p=new t.RGBAImage({width:a,height:r});t.RGBAImage.copy(e,p,{x:n,y:l},{x:0,y:0},{width:a,height:r}),i[o]={data:p,pixelRatio:h,sdf:c,stretchX:u,stretchY:d,content:m}}a(null,i)}}return{cancel(){c&&(c.cancel(),c=null),h&&(h.cancel(),h=null)}}}(e,this.map._requestManager,this.map.getPixelRatio(),((e,i)=>{if(this._spriteRequest=null,e)this.fire(new t.ErrorEvent(e));else if(i)for(const t in i)this.imageManager.addImage(t,i[t]);this.imageManager.setLoaded(!0),this._availableImages=this.imageManager.listImages(),this.dispatcher.broadcast("setImages",this._availableImages),this.fire(new t.Event("data",{dataType:"style"}))}))}_validateLayer(e){const i=this.sourceCaches[e.source];if(!i)return;const o=e.sourceLayer;if(!o)return;const a=i.getSource();("geojson"===a.type||a.vectorLayerIds&&-1===a.vectorLayerIds.indexOf(o))&&this.fire(new t.ErrorEvent(new Error(`Source layer "${o}" does not exist on source "${a.id}" as specified by style layer "${e.id}".`)))}loaded(){if(!this._loaded)return!1;if(Object.keys(this._updatedSources).length)return!1;for(const t in this.sourceCaches)if(!this.sourceCaches[t].loaded())return!1;return!!this.imageManager.isLoaded()}_serializeLayers(t){const e=[];for(const i of t){const t=this._layers[i];"custom"!==t.type&&e.push(t.serialize())}return e}hasTransitions(){if(this.light&&this.light.hasTransition())return!0;for(const t in this.sourceCaches)if(this.sourceCaches[t].hasTransition())return!0;for(const t in this._layers)if(this._layers[t].hasTransition())return!0;return!1}_checkLoaded(){if(!this._loaded)throw new Error("Style is not done loading.")}update(e){if(!this._loaded)return;const i=this._changed;if(this._changed){const t=Object.keys(this._updatedLayers),i=Object.keys(this._removedLayers);(t.length||i.length)&&this._updateWorkerLayers(t,i);for(const t in this._updatedSources){const e=this._updatedSources[t];"reload"===e?this._reloadSource(t):"clear"===e&&this._clearSource(t)}this._updateTilesForChangedImages();for(const t in this._updatedPaintProps)this._layers[t].updateTransitions(e);this.light.updateTransitions(e),this._resetUpdates()}const o={};for(const t in this.sourceCaches){const e=this.sourceCaches[t];o[t]=e.used,e.used=!1}for(const t of this._order){const i=this._layers[t];i.recalculate(e,this._availableImages),!i.isHidden(e.zoom)&&i.source&&(this.sourceCaches[i.source].used=!0)}for(const e in o){const i=this.sourceCaches[e];o[e]!==(null==i?void 0:i.used)&&i.fire(new t.Event("data",{sourceDataType:"visibility",dataType:"source",sourceId:e}))}this.light&&this.light.recalculate(e),this.z=e.zoom,i&&this.fire(new t.Event("data",{dataType:"style"}))}_updateTilesForChangedImages(){const t=Object.keys(this._changedImages);if(t.length){for(const e in this.sourceCaches)this.sourceCaches[e].reloadTilesForDependencies(["icons","patterns"],t);this._changedImages={}}}_updateWorkerLayers(t,e){this.dispatcher.broadcast("updateLayers",{layers:this._serializeLayers(t),removedIds:e})}_resetUpdates(){this._changed=!1,this._updatedLayers={},this._removedLayers={},this._updatedSources={},this._updatedPaintProps={},this._changedImages={}}setTerrain(e){if(this._checkLoaded(),this._terrainDataCallback&&this.off("data",this._terrainDataCallback),this._terrainfreezeElevationCallback&&this.map.off("freezeElevation",this._terrainfreezeElevationCallback),e){const t=this.sourceCaches[e.source];if(!t)throw new Error(`cannot load terrain, because there exists no source with ID: ${e.source}`);this.terrain=new Ee(this,t,e),this.map.transform.updateElevation(this.terrain),this._terrainfreezeElevationCallback=t=>{t.freeze?this.map.transform.freezeElevation=!0:(this.map.transform.freezeElevation=!1,this.map.transform.recalculateZoom(this.terrain))},this._terrainDataCallback=t=>{t.tile&&(t.sourceId===e.source?(this.map.transform.updateElevation(this.terrain),this.terrain.rememberForRerender(t.sourceId,t.tile.tileID)):"geojson"===t.source.type&&this.terrain.rememberForRerender(t.sourceId,t.tile.tileID))},this.on("data",this._terrainDataCallback),this.map.on("freezeElevation",this._terrainfreezeElevationCallback)}else this.terrain=null,this.map.transform.updateElevation(this.terrain);this.map.fire(new t.Event("terrain",{terrain:e}))}setState(e){if(this._checkLoaded(),Ie(this,t.validateStyle(e)))return!1;(e=t.clone$1(e)).layers=bt(e.layers);const i=function(t,e){if(!t)return[{command:wt.setStyle,args:[e]}];let i=[];try{if(!a(t.version,e.version))return[{command:wt.setStyle,args:[e]}];a(t.center,e.center)||i.push({command:wt.setCenter,args:[e.center]}),a(t.zoom,e.zoom)||i.push({command:wt.setZoom,args:[e.zoom]}),a(t.bearing,e.bearing)||i.push({command:wt.setBearing,args:[e.bearing]}),a(t.pitch,e.pitch)||i.push({command:wt.setPitch,args:[e.pitch]}),a(t.sprite,e.sprite)||i.push({command:wt.setSprite,args:[e.sprite]}),a(t.glyphs,e.glyphs)||i.push({command:wt.setGlyphs,args:[e.glyphs]}),a(t.transition,e.transition)||i.push({command:wt.setTransition,args:[e.transition]}),a(t.light,e.light)||i.push({command:wt.setLight,args:[e.light]});const o={},s=[];!function(t,e,i,o){let s;for(s in e=e||{},t=t||{})Object.prototype.hasOwnProperty.call(t,s)&&(Object.prototype.hasOwnProperty.call(e,s)||Et(s,i,o));for(s in e)Object.prototype.hasOwnProperty.call(e,s)&&(Object.prototype.hasOwnProperty.call(t,s)?a(t[s],e[s])||("geojson"===t[s].type&&"geojson"===e[s].type&&St(t,e,s)?i.push({command:wt.setGeoJSONSourceData,args:[s,e[s].data]}):It(s,e,i,o)):Tt(s,e,i))}(t.sources,e.sources,s,o);const r=[];t.layers&&t.layers.forEach((t=>{o[t.source]?i.push({command:wt.removeLayer,args:[t.id]}):r.push(t)})),i=i.concat(s),function(t,e,i){e=e||[];const o=(t=t||[]).map(zt),s=e.map(zt),r=t.reduce(Dt,{}),n=e.reduce(Dt,{}),l=o.slice(),c=Object.create(null);let h,u,d,m,p,_,f;for(h=0,u=0;h<o.length;h++)d=o[h],Object.prototype.hasOwnProperty.call(n,d)?u++:(i.push({command:wt.removeLayer,args:[d]}),l.splice(l.indexOf(d,u),1));for(h=0,u=0;h<s.length;h++)d=s[s.length-1-h],l[l.length-1-h]!==d&&(Object.prototype.hasOwnProperty.call(r,d)?(i.push({command:wt.removeLayer,args:[d]}),l.splice(l.lastIndexOf(d,l.length-u),1)):u++,_=l[l.length-h],i.push({command:wt.addLayer,args:[n[d],_]}),l.splice(l.length-h,0,d),c[d]=!0);for(h=0;h<s.length;h++)if(d=s[h],m=r[d],p=n[d],!c[d]&&!a(m,p))if(a(m.source,p.source)&&a(m["source-layer"],p["source-layer"])&&a(m.type,p.type)){for(f in Ct(m.layout,p.layout,i,d,null,wt.setLayoutProperty),Ct(m.paint,p.paint,i,d,null,wt.setPaintProperty),a(m.filter,p.filter)||i.push({command:wt.setFilter,args:[d,p.filter]}),a(m.minzoom,p.minzoom)&&a(m.maxzoom,p.maxzoom)||i.push({command:wt.setLayerZoomRange,args:[d,p.minzoom,p.maxzoom]}),m)Object.prototype.hasOwnProperty.call(m,f)&&"layout"!==f&&"paint"!==f&&"filter"!==f&&"metadata"!==f&&"minzoom"!==f&&"maxzoom"!==f&&(0===f.indexOf("paint.")?Ct(m[f],p[f],i,d,f.slice(6),wt.setPaintProperty):a(m[f],p[f])||i.push({command:wt.setLayerProperty,args:[d,f,p[f]]}));for(f in p)Object.prototype.hasOwnProperty.call(p,f)&&!Object.prototype.hasOwnProperty.call(m,f)&&"layout"!==f&&"paint"!==f&&"filter"!==f&&"metadata"!==f&&"minzoom"!==f&&"maxzoom"!==f&&(0===f.indexOf("paint.")?Ct(m[f],p[f],i,d,f.slice(6),wt.setPaintProperty):a(m[f],p[f])||i.push({command:wt.setLayerProperty,args:[d,f,p[f]]}))}else i.push({command:wt.removeLayer,args:[d]}),_=l[l.lastIndexOf(d)+1],i.push({command:wt.addLayer,args:[p,_]})}(r,e.layers,i)}catch(t){console.warn("Unable to compute style diff:",t),i=[{command:wt.setStyle,args:[e]}]}return i}(this.serialize(),e).filter((t=>!(t.command in Ce)));if(0===i.length)return!1;const o=i.filter((t=>!(t.command in Se)));if(o.length>0)throw new Error(`Unimplemented: ${o.map((t=>t.command)).join(", ")}.`);return i.forEach((t=>{"setTransition"!==t.command&&this[t.command].apply(this,t.args)})),this.stylesheet=e,!0}addImage(e,i){if(this.getImage(e))return this.fire(new t.ErrorEvent(new Error(`An image named "${e}" already exists.`)));this.imageManager.addImage(e,i),this._afterImageUpdated(e)}updateImage(t,e){this.imageManager.updateImage(t,e)}getImage(t){return this.imageManager.getImage(t)}removeImage(e){if(!this.getImage(e))return this.fire(new t.ErrorEvent(new Error(`An image named "${e}" does not exist.`)));this.imageManager.removeImage(e),this._afterImageUpdated(e)}_afterImageUpdated(e){this._availableImages=this.imageManager.listImages(),this._changedImages[e]=!0,this._changed=!0,this.dispatcher.broadcast("setImages",this._availableImages),this.fire(new t.Event("data",{dataType:"style"}))}listImages(){return this._checkLoaded(),this.imageManager.listImages()}addSource(e,i,o={}){if(this._checkLoaded(),void 0!==this.sourceCaches[e])throw new Error(`Source "${e}" already exists.`);if(!i.type)throw new Error(`The type property must be defined, but only the following properties were given: ${Object.keys(i).join(", ")}.`);if(["vector","raster","geojson","video","image"].indexOf(i.type)>=0&&this._validate(t.validateStyle.source,`sources.${e}`,i,null,o))return;this.map&&this.map._collectResourceTiming&&(i.collectResourceTiming=!0);const a=this.sourceCaches[e]=new dt(e,i,this.dispatcher);a.style=this,a.setEventedParent(this,(()=>({isSourceLoaded:this.loaded(),source:a.serialize(),sourceId:e}))),a.onAdd(this.map),this._changed=!0}removeSource(e){if(this._checkLoaded(),void 0===this.sourceCaches[e])throw new Error("There is no source with this ID");for(const i in this._layers)if(this._layers[i].source===e)return this.fire(new t.ErrorEvent(new Error(`Source "${e}" cannot be removed while layer "${i}" is using it.`)));const i=this.sourceCaches[e];delete this.sourceCaches[e],delete this._updatedSources[e],i.fire(new t.Event("data",{sourceDataType:"metadata",dataType:"source",sourceId:e})),i.setEventedParent(null),i.onRemove(this.map),this._changed=!0}setGeoJSONSourceData(t,e){this._checkLoaded(),this.sourceCaches[t].getSource().setData(e),this._changed=!0}getSource(t){return this.sourceCaches[t]&&this.sourceCaches[t].getSource()}addLayer(e,i,o={}){this._checkLoaded();const a=e.id;if(this.getLayer(a))return void this.fire(new t.ErrorEvent(new Error(`Layer "${a}" already exists on this map.`)));let s;if("custom"===e.type){if(Ie(this,t.validateCustomStyleLayer(e)))return;s=t.createStyleLayer(e)}else{if("object"==typeof e.source&&(this.addSource(a,e.source),e=t.clone$1(e),e=t.extend(e,{source:a})),this._validate(t.validateStyle.layer,`layers.${a}`,e,{arrayIndex:-1},o))return;s=t.createStyleLayer(e),this._validateLayer(s),s.setEventedParent(this,{layer:{id:a}}),this._serializedLayers[s.id]=s.serialize()}const r=i?this._order.indexOf(i):this._order.length;if(i&&-1===r)this.fire(new t.ErrorEvent(new Error(`Cannot add layer "${a}" before non-existing layer "${i}".`)));else{if(this._order.splice(r,0,a),this._layerOrderChanged=!0,this._layers[a]=s,this._removedLayers[a]&&s.source&&"custom"!==s.type){const t=this._removedLayers[a];delete this._removedLayers[a],t.type!==s.type?this._updatedSources[s.source]="clear":(this._updatedSources[s.source]="reload",this.sourceCaches[s.source].pause())}this._updateLayer(s),s.onAdd&&s.onAdd(this.map)}}moveLayer(e,i){if(this._checkLoaded(),this._changed=!0,!this._layers[e])return void this.fire(new t.ErrorEvent(new Error(`The layer '${e}' does not exist in the map's style and cannot be moved.`)));if(e===i)return;const o=this._order.indexOf(e);this._order.splice(o,1);const a=i?this._order.indexOf(i):this._order.length;i&&-1===a?this.fire(new t.ErrorEvent(new Error(`Cannot move layer "${e}" before non-existing layer "${i}".`))):(this._order.splice(a,0,e),this._layerOrderChanged=!0)}removeLayer(e){this._checkLoaded();const i=this._layers[e];if(!i)return void this.fire(new t.ErrorEvent(new Error(`Cannot remove non-existing layer "${e}".`)));i.setEventedParent(null);const o=this._order.indexOf(e);this._order.splice(o,1),this._layerOrderChanged=!0,this._changed=!0,this._removedLayers[e]=i,delete this._layers[e],delete this._serializedLayers[e],delete this._updatedLayers[e],delete this._updatedPaintProps[e],i.onRemove&&i.onRemove(this.map)}getLayer(t){return this._layers[t]}hasLayer(t){return t in this._layers}setLayerZoomRange(e,i,o){this._checkLoaded();const a=this.getLayer(e);a?a.minzoom===i&&a.maxzoom===o||(null!=i&&(a.minzoom=i),null!=o&&(a.maxzoom=o),this._updateLayer(a)):this.fire(new t.ErrorEvent(new Error(`Cannot set the zoom range of non-existing layer "${e}".`)))}setFilter(e,i,o={}){this._checkLoaded();const s=this.getLayer(e);if(s){if(!a(s.filter,i))return null==i?(s.filter=void 0,void this._updateLayer(s)):void(this._validate(t.validateStyle.filter,`layers.${s.id}.filter`,i,null,o)||(s.filter=t.clone$1(i),this._updateLayer(s)))}else this.fire(new t.ErrorEvent(new Error(`Cannot filter non-existing layer "${e}".`)))}getFilter(e){return t.clone$1(this.getLayer(e).filter)}setLayoutProperty(e,i,o,s={}){this._checkLoaded();const r=this.getLayer(e);r?a(r.getLayoutProperty(i),o)||(r.setLayoutProperty(i,o,s),this._updateLayer(r)):this.fire(new t.ErrorEvent(new Error(`Cannot style non-existing layer "${e}".`)))}getLayoutProperty(e,i){const o=this.getLayer(e);if(o)return o.getLayoutProperty(i);this.fire(new t.ErrorEvent(new Error(`Cannot get style of non-existing layer "${e}".`)))}setPaintProperty(e,i,o,s={}){this._checkLoaded();const r=this.getLayer(e);r?a(r.getPaintProperty(i),o)||(r.setPaintProperty(i,o,s)&&this._updateLayer(r),this._changed=!0,this._updatedPaintProps[e]=!0):this.fire(new t.ErrorEvent(new Error(`Cannot style non-existing layer "${e}".`)))}getPaintProperty(t,e){return this.getLayer(t).getPaintProperty(e)}setFeatureState(e,i){this._checkLoaded();const o=e.source,a=e.sourceLayer,s=this.sourceCaches[o];if(void 0===s)return void this.fire(new t.ErrorEvent(new Error(`The source '${o}' does not exist in the map's style.`)));const r=s.getSource().type;"geojson"===r&&a?this.fire(new t.ErrorEvent(new Error("GeoJSON sources cannot have a sourceLayer parameter."))):"vector"!==r&&"temporalgrid"!==r||a?(void 0===e.id&&this.fire(new t.ErrorEvent(new Error("The feature id parameter must be provided."))),s.setFeatureState(a,e.id,i)):this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")))}removeFeatureState(e,i){this._checkLoaded();const o=e.source,a=this.sourceCaches[o];if(void 0===a)return void this.fire(new t.ErrorEvent(new Error(`The source '${o}' does not exist in the map's style.`)));const s=a.getSource().type,r="vector"===s||"temporalgrid"===s?e.sourceLayer:void 0;"vector"!==s&&"temporalgrid"!==s||r?i&&"string"!=typeof e.id&&"number"!=typeof e.id?this.fire(new t.ErrorEvent(new Error("A feature id is required to remove its specific state property."))):a.removeFeatureState(r,e.id,i):this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")))}getFeatureState(e){this._checkLoaded();const i=e.source,o=e.sourceLayer,a=this.sourceCaches[i];if(void 0===a)return void this.fire(new t.ErrorEvent(new Error(`The source '${i}' does not exist in the map's style.`)));const s=a.getSource().type;if("vector"!==s&&"temporalgrid"!==s||o)return void 0===e.id&&this.fire(new t.ErrorEvent(new Error("The feature id parameter must be provided."))),a.getFeatureState(o,e.id);this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")))}getTransition(){return t.extend({duration:300,delay:0},this.stylesheet&&this.stylesheet.transition)}serialize(){return t.filterObject({version:this.stylesheet.version,name:this.stylesheet.name,metadata:this.stylesheet.metadata,light:this.stylesheet.light,center:this.stylesheet.center,zoom:this.stylesheet.zoom,bearing:this.stylesheet.bearing,pitch:this.stylesheet.pitch,sprite:this.stylesheet.sprite,glyphs:this.stylesheet.glyphs,transition:this.stylesheet.transition,sources:t.mapObject(this.sourceCaches,(t=>t.serialize())),layers:this._serializeLayers(this._order)},(t=>void 0!==t))}_updateLayer(t){this._updatedLayers[t.id]=!0,t.source&&!this._updatedSources[t.source]&&"raster"!==this.sourceCaches[t.source].getSource().type&&(this._updatedSources[t.source]="reload",this.sourceCaches[t.source].pause()),this._changed=!0}_flattenAndSortRenderedFeatures(t){const e=t=>"fill-extrusion"===this._layers[t].type,i={},o=[];for(let a=this._order.length-1;a>=0;a--){const s=this._order[a];if(e(s)){i[s]=a;for(const e of t){const t=e[s];if(t)for(const e of t)o.push(e)}}}o.sort(((t,e)=>e.intersectionZ-t.intersectionZ));const a=[];for(let s=this._order.length-1;s>=0;s--){const r=this._order[s];if(e(r))for(let t=o.length-1;t>=0;t--){const e=o[t].feature;if(i[e.layer.id]<s)break;a.push(e),o.pop()}else for(const e of t){const t=e[r];if(t)for(const e of t)a.push(e.feature)}}return a}queryRenderedFeatures(e,i,o){i&&i.filter&&this._validate(t.validateStyle.filter,"queryRenderedFeatures.filter",i.filter,null,i);const a={};if(i&&i.layers){if(!Array.isArray(i.layers))return this.fire(new t.ErrorEvent(new Error("parameters.layers must be an Array."))),[];for(const e of i.layers){const i=this._layers[e];if(!i)return this.fire(new t.ErrorEvent(new Error(`The layer '${e}' does not exist in the map's style and cannot be queried for features.`))),[];a[i.source]=!0}}const s=[];i.availableImages=this._availableImages;for(const t in this.sourceCaches)i.layers&&!a[t]||s.push(nt(this.sourceCaches[t],this._layers,this._serializedLayers,e,i,o));return this.placement&&s.push(function(t,e,i,o,a,s,r){const n={},l=s.queryRenderedSymbols(o),c=[];for(const t of Object.keys(l).map(Number))c.push(r[t]);c.sort(lt);for(const i of c){const o=i.featureIndex.lookupSymbolFeatures(l[i.bucketInstanceId],e,i.bucketIndex,i.sourceLayerIndex,a.filter,a.layers,a.availableImages,t);for(const t in o){const e=n[t]=n[t]||[],a=o[t];a.sort(((t,e)=>{const o=i.featureSortOrder;if(o){const i=o.indexOf(t.featureIndex);return o.indexOf(e.featureIndex)-i}return e.featureIndex-t.featureIndex}));for(const t of a)e.push(t)}}for(const e in n)n[e].forEach((o=>{const a=o.feature,s=i[t[e].source].getFeatureState(a.layer["source-layer"],a.id);a.source=a.layer.source,a.layer["source-layer"]&&(a.sourceLayer=a.layer["source-layer"]),a.state=s}));return n}(this._layers,this._serializedLayers,this.sourceCaches,e,i,this.placement.collisionIndex,this.placement.retainedQueryData)),this._flattenAndSortRenderedFeatures(s)}querySourceFeatures(e,i){i&&i.filter&&this._validate(t.validateStyle.filter,"querySourceFeatures.filter",i.filter,null,i);const o=this.sourceCaches[e];return o?function(t,e){const i=t.getRenderableIds().map((e=>t.getTileByID(e))),o=[],a={};for(let t=0;t<i.length;t++){const s=i[t],r=s.tileID.canonical.key;a[r]||(a[r]=!0,s.querySourceFeatures(o,e))}return o}(o,i):[]}addSourceType(t,e,i){return De.getSourceType(t)?i(new Error(`A source type called "${t}" already exists.`)):(De.setSourceType(t,e),e.workerSourceURL?void this.dispatcher.broadcast("loadWorkerSource",{name:t,url:e.workerSourceURL},i):i(null,null))}getLight(){return this.light.getLight()}setLight(e,i={}){this._checkLoaded();const o=this.light.getLight();let s=!1;for(const t in e)if(!a(e[t],o[t])){s=!0;break}if(!s)return;const r={now:t.exported.now(),transition:t.extend({duration:300,delay:0},this.stylesheet.transition)};this.light.setLight(e,i),this.light.updateTransitions(r)}_validate(e,i,o,a,s={}){return(!s||!1!==s.validate)&&Ie(this,e.call(t.validateStyle,t.extend({key:i,style:this.serialize(),value:o,styleSpec:t.spec},a)))}_remove(){this._request&&(this._request.cancel(),this._request=null),this._spriteRequest&&(this._spriteRequest.cancel(),this._spriteRequest=null),t.evented.off("pluginStateChange",this._rtlTextPluginCallback);for(const t in this._layers)this._layers[t].setEventedParent(null);for(const t in this.sourceCaches){const e=this.sourceCaches[t];e.setEventedParent(null),e.onRemove(this.map)}this.imageManager.setEventedParent(null),this.setEventedParent(null),this.dispatcher.remove()}_clearSource(t){this.sourceCaches[t].clearTiles()}_reloadSource(t){this.sourceCaches[t].resume(),this.sourceCaches[t].reload()}_updateSources(t){for(const e in this.sourceCaches)this.sourceCaches[e]._updateDebounce?this._debouncedUpdateSource(e,t):this.sourceCaches[e].update(t,this.terrain)}_generateCollisionBoxes(){for(const t in this.sourceCaches)this._reloadSource(t)}_updatePlacement(e,i,o,a,s=!1){let r=!1,n=!1;const l={};for(const t of this._order){const i=this._layers[t];if("symbol"!==i.type)continue;if(!l[i.source]){const t=this.sourceCaches[i.source];l[i.source]=t.getRenderableIds(!0).map((e=>t.getTileByID(e))).sort(((t,e)=>e.tileID.overscaledZ-t.tileID.overscaledZ||(t.tileID.isLessThan(e.tileID)?-1:1)))}const o=this.crossTileSymbolIndex.addLayer(i,l[i.source],e.center.lng);r=r||o}if(this.crossTileSymbolIndex.pruneUnusedLayers(this._order),((s=s||this._layerOrderChanged||0===o)||!this.pauseablePlacement||this.pauseablePlacement.isDone()&&!this.placement.stillRecent(t.exported.now(),e.zoom))&&(this.pauseablePlacement=new fe(e,this.terrain,this._order,s,i,o,a,this.placement),this._layerOrderChanged=!1),this.pauseablePlacement.isDone()?this.placement.setStale():(this.pauseablePlacement.continuePlacement(this._order,this._layers,l),this.pauseablePlacement.isDone()&&(this.placement=this.pauseablePlacement.commit(t.exported.now()),n=!0),r&&this.pauseablePlacement.placement.setStale()),n||r)for(const t of this._order){const e=this._layers[t];"symbol"===e.type&&this.placement.updateLayerOpacities(e,l[e.source])}return!this.pauseablePlacement.isDone()||this.placement.hasTransitions(t.exported.now())}_releaseSymbolFadeTiles(){for(const t in this.sourceCaches)this.sourceCaches[t].releaseSymbolFadeTiles()}getImages(t,e,i){this.imageManager.getImages(e.icons,i),this._updateTilesForChangedImages();const o=this.sourceCaches[e.source];o&&o.setDependencies(e.tileID.key,e.type,e.icons)}getGlyphs(t,e,i){this.glyphManager.getGlyphs(e.stacks,i)}getResource(e,i,o){return t.makeRequest(i,o)}}De.getSourceType=function(t){return st[t]},De.setSourceType=function(t,e){st[t]=e},De.registerForPluginStateChange=t.registerForPluginStateChange;var Pe="attribute vec2 a_pos;uniform mat4 u_matrix;varying vec2 v_texture_pos;varying float v_depth;void main() {v_texture_pos=a_pos/8192.0;gl_Position=u_matrix*vec4(a_pos,get_elevation(a_pos),1.0);v_depth=gl_Position.z/gl_Position.w;}";const Ae={prelude:Me("#ifdef GL_ES\nprecision mediump float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif","#ifdef GL_ES\nprecision highp float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif\nvec2 unpack_float(const float packedValue) {int packedIntValue=int(packedValue);int v0=packedIntValue/256;return vec2(v0,packedIntValue-v0*256);}vec2 unpack_opacity(const float packedOpacity) {int intOpacity=int(packedOpacity)/2;return vec2(float(intOpacity)/127.0,mod(packedOpacity,2.0));}vec4 decode_color(const vec2 encodedColor) {return vec4(unpack_float(encodedColor[0])/255.0,unpack_float(encodedColor[1])/255.0\n);}float unpack_mix_vec2(const vec2 packedValue,const float t) {return mix(packedValue[0],packedValue[1],t);}vec4 unpack_mix_color(const vec4 packedColors,const float t) {vec4 minColor=decode_color(vec2(packedColors[0],packedColors[1]));vec4 maxColor=decode_color(vec2(packedColors[2],packedColors[3]));return mix(minColor,maxColor,t);}vec2 get_pattern_pos(const vec2 pixel_coord_upper,const vec2 pixel_coord_lower,const vec2 pattern_size,const float tile_units_to_pixels,const vec2 pos) {vec2 offset=mod(mod(mod(pixel_coord_upper,pattern_size)*256.0,pattern_size)*256.0+pixel_coord_lower,pattern_size);return (tile_units_to_pixels*pos+offset)/pattern_size;}\n#ifdef TERRAIN3D\nuniform sampler2D u_terrain;uniform float u_terrain_dim;uniform mat4 u_terrain_matrix;uniform vec4 u_terrain_unpack;uniform float u_terrain_offset;uniform float u_terrain_exaggeration;uniform highp sampler2D u_depth;\n#endif\nconst highp vec4 bitSh=vec4(256.*256.*256.,256.*256.,256.,1.);const highp vec4 bitShifts=vec4(1.)/bitSh;highp float unpack(highp vec4 color) {return dot(color,bitShifts);}highp float depthOpacity(vec3 frag) {\n#ifdef TERRAIN3D\nhighp float d=unpack(texture2D(u_depth,frag.xy*0.5+0.5))+0.0001-frag.z;return 1.0-max(0.0,min(1.0,-d*500.0));\n#else\nreturn 1.0;\n#endif\n}float calculate_visibility(vec4 pos) {\n#ifdef TERRAIN3D\nvec3 frag=pos.xyz/pos.w;highp float d=depthOpacity(frag);if (d > 0.95) return 1.0;return (d+depthOpacity(frag+vec3(0.0,0.01,0.0)))/2.0;\n#else\nreturn 1.0;\n#endif\n}float ele(vec2 pos) {\n#ifdef TERRAIN3D\nvec4 rgb=(texture2D(u_terrain,pos)*255.0)*u_terrain_unpack;return rgb.r+rgb.g+rgb.b-u_terrain_unpack.a;\n#else\nreturn 0.0;\n#endif\n}float get_elevation(vec2 pos) {\n#ifdef TERRAIN3D\nvec2 coord=(u_terrain_matrix*vec4(pos,0.0,1.0)).xy*u_terrain_dim+1.0;vec2 f=fract(coord);vec2 c=(floor(coord)+0.5)/(u_terrain_dim+2.0);float d=1.0/(u_terrain_dim+2.0);float tl=ele(c);float tr=ele(c+vec2(d,0.0));float bl=ele(c+vec2(0.0,d));float br=ele(c+vec2(d,d));float elevation=mix(mix(tl,tr,f.x),mix(bl,br,f.x),f.y);return (elevation+u_terrain_offset)*u_terrain_exaggeration;\n#else\nreturn 0.0;\n#endif\n}"),background:Me("uniform vec4 u_color;uniform float u_opacity;void main() {gl_FragColor=u_color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}"),backgroundPattern:Me("uniform vec2 u_pattern_tl_a;uniform vec2 u_pattern_br_a;uniform vec2 u_pattern_tl_b;uniform vec2 u_pattern_br_b;uniform vec2 u_texsize;uniform float u_mix;uniform float u_opacity;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(u_pattern_tl_a/u_texsize,u_pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(u_pattern_tl_b/u_texsize,u_pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_mix)*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_pattern_size_a;uniform vec2 u_pattern_size_b;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_scale_a;uniform float u_scale_b;uniform float u_tile_units_to_pixels;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_a*u_pattern_size_a,u_tile_units_to_pixels,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_b*u_pattern_size_b,u_tile_units_to_pixels,a_pos);}"),circle:Me("varying vec3 v_data;varying float v_visibility;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=v_data.xy;float extrude_length=length(extrude);lowp float antialiasblur=v_data.z;float antialiased_blur=-max(blur,antialiasblur);float opacity_t=smoothstep(0.0,antialiased_blur,extrude_length-1.0);float color_t=stroke_width < 0.01 ? 0.0 : smoothstep(antialiased_blur,0.0,extrude_length-radius/(radius+stroke_width));gl_FragColor=v_visibility*opacity_t*mix(color*opacity,stroke_color*stroke_opacity,color_t);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform bool u_scale_with_map;uniform bool u_pitch_with_map;uniform vec2 u_extrude_scale;uniform lowp float u_device_pixel_ratio;uniform highp float u_camera_to_center_distance;attribute vec2 a_pos;varying vec3 v_data;varying float v_visibility;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvoid main(void) {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=vec2(mod(a_pos,2.0)*2.0-1.0);vec2 circle_center=floor(a_pos*0.5);float ele=get_elevation(circle_center);v_visibility=calculate_visibility(u_matrix*vec4(circle_center,ele,1.0));if (u_pitch_with_map) {vec2 corner_position=circle_center;if (u_scale_with_map) {corner_position+=extrude*(radius+stroke_width)*u_extrude_scale;} else {vec4 projected_center=u_matrix*vec4(circle_center,0,1);corner_position+=extrude*(radius+stroke_width)*u_extrude_scale*(projected_center.w/u_camera_to_center_distance);}gl_Position=u_matrix*vec4(corner_position,ele,1);} else {gl_Position=u_matrix*vec4(circle_center,ele,1);if (u_scale_with_map) {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*u_camera_to_center_distance;} else {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*gl_Position.w;}}lowp float antialiasblur=1.0/u_device_pixel_ratio/(radius+stroke_width);v_data=vec3(extrude.x,extrude.y,antialiasblur);}"),clippingMask:Me("void main() {gl_FragColor=vec4(1.0);}","attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}"),heatmap:Me("uniform highp float u_intensity;varying vec2 v_extrude;\n#pragma mapbox: define highp float weight\n#define GAUSS_COEF 0.3989422804014327\nvoid main() {\n#pragma mapbox: initialize highp float weight\nfloat d=-0.5*3.0*3.0*dot(v_extrude,v_extrude);float val=weight*u_intensity*GAUSS_COEF*exp(d);gl_FragColor=vec4(val,1.0,1.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform float u_extrude_scale;uniform float u_opacity;uniform float u_intensity;attribute vec2 a_pos;varying vec2 v_extrude;\n#pragma mapbox: define highp float weight\n#pragma mapbox: define mediump float radius\nconst highp float ZERO=1.0/255.0/16.0;\n#define GAUSS_COEF 0.3989422804014327\nvoid main(void) {\n#pragma mapbox: initialize highp float weight\n#pragma mapbox: initialize mediump float radius\nvec2 unscaled_extrude=vec2(mod(a_pos,2.0)*2.0-1.0);float S=sqrt(-2.0*log(ZERO/weight/u_intensity/GAUSS_COEF))/3.0;v_extrude=S*unscaled_extrude;vec2 extrude=v_extrude*radius*u_extrude_scale;vec4 pos=vec4(floor(a_pos*0.5)+extrude,0,1);gl_Position=u_matrix*pos;}"),heatmapTexture:Me("uniform sampler2D u_image;uniform sampler2D u_color_ramp;uniform float u_opacity;varying vec2 v_pos;void main() {float t=texture2D(u_image,v_pos).r;vec4 color=texture2D(u_color_ramp,vec2(t,0.5));gl_FragColor=color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(0.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_world;attribute vec2 a_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos*u_world,0,1);v_pos.x=a_pos.x;v_pos.y=1.0-a_pos.y;}"),collisionBox:Me("varying float v_placed;varying float v_notUsed;void main() {float alpha=0.5;gl_FragColor=vec4(1.0,0.0,0.0,1.0)*alpha;if (v_placed > 0.5) {gl_FragColor=vec4(0.0,0.0,1.0,0.5)*alpha;}if (v_notUsed > 0.5) {gl_FragColor*=.1;}}","attribute vec2 a_pos;attribute vec2 a_anchor_pos;attribute vec2 a_extrude;attribute vec2 a_placed;attribute vec2 a_shift;uniform mat4 u_matrix;uniform vec2 u_extrude_scale;uniform float u_camera_to_center_distance;varying float v_placed;varying float v_notUsed;void main() {vec4 projectedPoint=u_matrix*vec4(a_anchor_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);gl_Position=u_matrix*vec4(a_pos,get_elevation(a_pos),1.0);gl_Position.xy+=(a_extrude+a_shift)*u_extrude_scale*gl_Position.w*collision_perspective_ratio;v_placed=a_placed.x;v_notUsed=a_placed.y;}"),collisionCircle:Me("varying float v_radius;varying vec2 v_extrude;varying float v_perspective_ratio;varying float v_collision;void main() {float alpha=0.5*min(v_perspective_ratio,1.0);float stroke_radius=0.9*max(v_perspective_ratio,1.0);float distance_to_center=length(v_extrude);float distance_to_edge=abs(distance_to_center-v_radius);float opacity_t=smoothstep(-stroke_radius,0.0,-distance_to_edge);vec4 color=mix(vec4(0.0,0.0,1.0,0.5),vec4(1.0,0.0,0.0,1.0),v_collision);gl_FragColor=color*alpha*opacity_t;}","attribute vec2 a_pos;attribute float a_radius;attribute vec2 a_flags;uniform mat4 u_matrix;uniform mat4 u_inv_matrix;uniform vec2 u_viewport_size;uniform float u_camera_to_center_distance;varying float v_radius;varying vec2 v_extrude;varying float v_perspective_ratio;varying float v_collision;vec3 toTilePosition(vec2 screenPos) {vec4 rayStart=u_inv_matrix*vec4(screenPos,-1.0,1.0);vec4 rayEnd  =u_inv_matrix*vec4(screenPos, 1.0,1.0);rayStart.xyz/=rayStart.w;rayEnd.xyz  /=rayEnd.w;highp float t=(0.0-rayStart.z)/(rayEnd.z-rayStart.z);return mix(rayStart.xyz,rayEnd.xyz,t);}void main() {vec2 quadCenterPos=a_pos;float radius=a_radius;float collision=a_flags.x;float vertexIdx=a_flags.y;vec2 quadVertexOffset=vec2(mix(-1.0,1.0,float(vertexIdx >=2.0)),mix(-1.0,1.0,float(vertexIdx >=1.0 && vertexIdx <=2.0)));vec2 quadVertexExtent=quadVertexOffset*radius;vec3 tilePos=toTilePosition(quadCenterPos);vec4 clipPos=u_matrix*vec4(tilePos,1.0);highp float camera_to_anchor_distance=clipPos.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);float padding_factor=1.2;v_radius=radius;v_extrude=quadVertexExtent*padding_factor;v_perspective_ratio=collision_perspective_ratio;v_collision=collision;gl_Position=vec4(clipPos.xyz/clipPos.w,1.0)+vec4(quadVertexExtent*padding_factor/u_viewport_size*2.0,0.0,0.0);}"),debug:Me("uniform highp vec4 u_color;uniform sampler2D u_overlay;varying vec2 v_uv;void main() {vec4 overlay_color=texture2D(u_overlay,v_uv);gl_FragColor=mix(u_color,overlay_color,overlay_color.a);}","attribute vec2 a_pos;varying vec2 v_uv;uniform mat4 u_matrix;uniform float u_overlay_scale;void main() {v_uv=a_pos/8192.0;gl_Position=u_matrix*vec4(a_pos*u_overlay_scale,get_elevation(a_pos),1);}"),fill:Me("#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_FragColor=color*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","attribute vec2 a_pos;uniform mat4 u_matrix;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);}"),fillOutline:Me("varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=outline_color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","attribute vec2 a_pos;uniform mat4 u_matrix;uniform vec2 u_world;varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}"),fillOutlinePattern:Me("uniform vec2 u_texsize;uniform sampler2D u_image;uniform float u_fade;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);float dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=mix(color1,color2,u_fade)*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_world;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec3 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;gl_Position=u_matrix*vec4(a_pos,0,1);vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,a_pos);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}"),fillPattern:Me("#ifdef GL_ES\nprecision highp float;\n#endif\nuniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_fade)*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec3 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileZoomRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileZoomRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileZoomRatio,a_pos);}"),fillExtrusion:Me("varying vec4 v_color;void main() {gl_FragColor=v_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;uniform float u_vertical_gradient;uniform lowp float u_opacity;attribute vec2 a_pos;attribute vec4 a_normal_ed;\n#ifdef TERRAIN3D\nattribute vec2 a_centroid;\n#endif\nvarying vec4 v_color;\n#pragma mapbox: define highp float base\n#pragma mapbox: define highp float height\n#pragma mapbox: define highp vec4 color\nvoid main() {\n#pragma mapbox: initialize highp float base\n#pragma mapbox: initialize highp float height\n#pragma mapbox: initialize highp vec4 color\nvec3 normal=a_normal_ed.xyz;\n#ifdef TERRAIN3D\nfloat baseDelta=10.0;float ele=get_elevation(a_centroid);\n#else\nfloat baseDelta=0.0;float ele=0.0;\n#endif\nbase=max(0.0,ele+base-baseDelta);height=max(0.0,ele+height);float t=mod(normal.x,2.0);gl_Position=u_matrix*vec4(a_pos,t > 0.0 ? height : base,1);float colorvalue=color.r*0.2126+color.g*0.7152+color.b*0.0722;v_color=vec4(0.0,0.0,0.0,1.0);vec4 ambientlight=vec4(0.03,0.03,0.03,1.0);color+=ambientlight;float directional=clamp(dot(normal/16384.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((1.0-colorvalue+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_color.r+=clamp(color.r*directional*u_lightcolor.r,mix(0.0,0.3,1.0-u_lightcolor.r),1.0);v_color.g+=clamp(color.g*directional*u_lightcolor.g,mix(0.0,0.3,1.0-u_lightcolor.g),1.0);v_color.b+=clamp(color.b*directional*u_lightcolor.b,mix(0.0,0.3,1.0-u_lightcolor.b),1.0);v_color*=u_opacity;}"),fillExtrusionPattern:Me("uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);vec4 mixedColor=mix(color1,color2,u_fade);gl_FragColor=mixedColor*v_lighting;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_height_factor;uniform vec3 u_scale;uniform float u_vertical_gradient;uniform lowp float u_opacity;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;attribute vec2 a_pos;attribute vec4 a_normal_ed;\n#ifdef TERRAIN3D\nattribute vec2 a_centroid;\n#endif\nvarying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec3 normal=a_normal_ed.xyz;float edgedistance=a_normal_ed.w;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;\n#ifdef TERRAIN3D\nfloat baseDelta=10.0;float ele=get_elevation(a_centroid);\n#else\nfloat baseDelta=0.0;float ele=0.0;\n#endif\nbase=max(0.0,ele+base-baseDelta);height=max(0.0,ele+height);float t=mod(normal.x,2.0);float z=t > 0.0 ? height : base;gl_Position=u_matrix*vec4(a_pos,z,1);vec2 pos=normal.x==1.0 && normal.y==0.0 && normal.z==16384.0\n? a_pos\n: vec2(edgedistance,z*u_height_factor);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,pos);v_lighting=vec4(0.0,0.0,0.0,1.0);float directional=clamp(dot(normal/16383.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((0.5+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_lighting.rgb+=clamp(directional*u_lightcolor,mix(vec3(0.0),vec3(0.3),1.0-u_lightcolor),vec3(1.0));v_lighting*=u_opacity;}"),hillshadePrepare:Me("#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_dimension;uniform float u_zoom;uniform vec4 u_unpack;float getElevation(vec2 coord,float bias) {vec4 data=texture2D(u_image,coord)*255.0;data.a=-1.0;return dot(data,u_unpack)/4.0;}void main() {vec2 epsilon=1.0/u_dimension;float a=getElevation(v_pos+vec2(-epsilon.x,-epsilon.y),0.0);float b=getElevation(v_pos+vec2(0,-epsilon.y),0.0);float c=getElevation(v_pos+vec2(epsilon.x,-epsilon.y),0.0);float d=getElevation(v_pos+vec2(-epsilon.x,0),0.0);float e=getElevation(v_pos,0.0);float f=getElevation(v_pos+vec2(epsilon.x,0),0.0);float g=getElevation(v_pos+vec2(-epsilon.x,epsilon.y),0.0);float h=getElevation(v_pos+vec2(0,epsilon.y),0.0);float i=getElevation(v_pos+vec2(epsilon.x,epsilon.y),0.0);float exaggerationFactor=u_zoom < 2.0 ? 0.4 : u_zoom < 4.5 ? 0.35 : 0.3;float exaggeration=u_zoom < 15.0 ? (u_zoom-15.0)*exaggerationFactor : 0.0;vec2 deriv=vec2((c+f+f+i)-(a+d+d+g),(g+h+h+i)-(a+b+b+c))/pow(2.0,exaggeration+(19.2562-u_zoom));gl_FragColor=clamp(vec4(deriv.x/2.0+0.5,deriv.y/2.0+0.5,1.0,1.0),0.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_dimension;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);highp vec2 epsilon=1.0/u_dimension;float scale=(u_dimension.x-2.0)/u_dimension.x;v_pos=(a_texture_pos/8192.0)*scale+epsilon;}"),hillshade:Me("uniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_latrange;uniform vec2 u_light;uniform vec4 u_shadow;uniform vec4 u_highlight;uniform vec4 u_accent;\n#define PI 3.141592653589793\nvoid main() {vec4 pixel=texture2D(u_image,v_pos);vec2 deriv=((pixel.rg*2.0)-1.0);float scaleFactor=cos(radians((u_latrange[0]-u_latrange[1])*(1.0-v_pos.y)+u_latrange[1]));float slope=atan(1.25*length(deriv)/scaleFactor);float aspect=deriv.x !=0.0 ? atan(deriv.y,-deriv.x) : PI/2.0*(deriv.y > 0.0 ? 1.0 :-1.0);float intensity=u_light.x;float azimuth=u_light.y+PI;float base=1.875-intensity*1.75;float maxValue=0.5*PI;float scaledSlope=intensity !=0.5 ? ((pow(base,slope)-1.0)/(pow(base,maxValue)-1.0))*maxValue : slope;float accent=cos(scaledSlope);vec4 accent_color=(1.0-accent)*u_accent*clamp(intensity*2.0,0.0,1.0);float shade=abs(mod((aspect+azimuth)/PI+0.5,2.0)-1.0);vec4 shade_color=mix(u_shadow,u_highlight,shade)*sin(scaledSlope)*clamp(intensity*2.0,0.0,1.0);gl_FragColor=accent_color*(1.0-shade_color.a)+shade_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos=a_texture_pos/8192.0;}"),line:Me("uniform lowp float u_device_pixel_ratio;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_units_to_pixels;uniform lowp float u_device_pixel_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp float v_linesofar;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;v_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*2.0;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;\n#ifdef TERRAIN3D\nv_gamma_scale=1.0;\n#else\nfloat extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;\n#endif\nv_width2=vec2(outset,inset);}"),lineGradient:Me("uniform lowp float u_device_pixel_ratio;uniform sampler2D u_image;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;varying highp vec2 v_uv;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);vec4 color=texture2D(u_image,v_uv);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;attribute float a_uv_x;attribute float a_split_index;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;uniform vec2 u_units_to_pixels;uniform float u_image_height;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp vec2 v_uv;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;highp float texel_height=1.0/u_image_height;highp float half_texel_height=0.5*texel_height;v_uv=vec2(a_uv_x,a_split_index*texel_height-half_texel_height);vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;\n#ifdef TERRAIN3D\nv_gamma_scale=1.0;\n#else\nfloat extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;\n#endif\nv_width2=vec2(outset,inset);}"),linePattern:Me("#ifdef GL_ES\nprecision highp float;\n#endif\nuniform lowp float u_device_pixel_ratio;uniform vec2 u_texsize;uniform float u_fade;uniform mediump vec3 u_scale;uniform sampler2D u_image;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;varying float v_width;\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileZoomRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;vec2 pattern_size_a=vec2(display_size_a.x*fromScale/tileZoomRatio,display_size_a.y);vec2 pattern_size_b=vec2(display_size_b.x*toScale/tileZoomRatio,display_size_b.y);float aspect_a=display_size_a.y/v_width;float aspect_b=display_size_b.y/v_width;float dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float x_a=mod(v_linesofar/pattern_size_a.x*aspect_a,1.0);float x_b=mod(v_linesofar/pattern_size_b.x*aspect_b,1.0);float y=0.5*v_normal.y+0.5;vec2 texel_size=1.0/u_texsize;vec2 pos_a=mix(pattern_tl_a*texel_size-texel_size,pattern_br_a*texel_size+texel_size,vec2(x_a,y));vec2 pos_b=mix(pattern_tl_b*texel_size-texel_size,pattern_br_b*texel_size+texel_size,vec2(x_b,y));vec4 color=mix(texture2D(u_image,pos_a),texture2D(u_image,pos_b),u_fade);gl_FragColor=color*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform vec2 u_units_to_pixels;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;varying float v_width;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;\n#ifdef TERRAIN3D\nv_gamma_scale=1.0;\n#else\nfloat extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;\n#endif\nv_linesofar=a_linesofar;v_width2=vec2(outset,inset);v_width=floorwidth;}"),lineSDF:Me("uniform lowp float u_device_pixel_ratio;uniform sampler2D u_image;uniform float u_sdfgamma;uniform float u_mix;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float sdfdist_a=texture2D(u_image,v_tex_a).a;float sdfdist_b=texture2D(u_image,v_tex_b).a;float sdfdist=mix(sdfdist_a,sdfdist_b,u_mix);alpha*=smoothstep(0.5-u_sdfgamma/floorwidth,0.5+u_sdfgamma/floorwidth,sdfdist);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;uniform vec2 u_patternscale_a;uniform float u_tex_y_a;uniform vec2 u_patternscale_b;uniform float u_tex_y_b;uniform vec2 u_units_to_pixels;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;\n#ifdef TERRAIN3D\nv_gamma_scale=1.0;\n#else\nfloat extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;\n#endif\nv_tex_a=vec2(a_linesofar*u_patternscale_a.x/floorwidth,normal.y*u_patternscale_a.y+u_tex_y_a);v_tex_b=vec2(a_linesofar*u_patternscale_b.x/floorwidth,normal.y*u_patternscale_b.y+u_tex_y_b);v_width2=vec2(outset,inset);}"),raster:Me("uniform float u_fade_t;uniform float u_opacity;uniform sampler2D u_image0;uniform sampler2D u_image1;varying vec2 v_pos0;varying vec2 v_pos1;uniform float u_brightness_low;uniform float u_brightness_high;uniform float u_saturation_factor;uniform float u_contrast_factor;uniform vec3 u_spin_weights;void main() {vec4 color0=texture2D(u_image0,v_pos0);vec4 color1=texture2D(u_image1,v_pos1);if (color0.a > 0.0) {color0.rgb=color0.rgb/color0.a;}if (color1.a > 0.0) {color1.rgb=color1.rgb/color1.a;}vec4 color=mix(color0,color1,u_fade_t);color.a*=u_opacity;vec3 rgb=color.rgb;rgb=vec3(dot(rgb,u_spin_weights.xyz),dot(rgb,u_spin_weights.zxy),dot(rgb,u_spin_weights.yzx));float average=(color.r+color.g+color.b)/3.0;rgb+=(average-rgb)*u_saturation_factor;rgb=(rgb-0.5)*u_contrast_factor+0.5;vec3 u_high_vec=vec3(u_brightness_low,u_brightness_low,u_brightness_low);vec3 u_low_vec=vec3(u_brightness_high,u_brightness_high,u_brightness_high);gl_FragColor=vec4(mix(u_high_vec,u_low_vec,rgb)*color.a,color.a);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_tl_parent;uniform float u_scale_parent;uniform float u_buffer_scale;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos0;varying vec2 v_pos1;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos0=(((a_texture_pos/8192.0)-0.5)/u_buffer_scale )+0.5;v_pos1=(v_pos0*u_scale_parent)+u_tl_parent;}"),symbolIcon:Me("uniform sampler2D u_texture;varying vec2 v_tex;varying float v_fade_opacity;\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\nlowp float alpha=opacity*v_fade_opacity;gl_FragColor=texture2D(u_texture,v_tex)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec4 a_pixeloffset;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform highp float u_camera_to_center_distance;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform float u_fade_change;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform vec2 u_texsize;varying vec2 v_tex;varying float v_fade_opacity;\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);vec2 a_pxoffset=a_pixeloffset.xy;vec2 a_minFontScale=a_pixeloffset.zw/256.0;float ele=get_elevation(a_pos);highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,ele,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),ele,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,ele,1.0);float z=float(u_pitch_with_map)*projected_pos.z/projected_pos.w;gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*max(a_minFontScale,fontScale)+a_pxoffset/16.0),z,1.0);v_tex=a_tex/u_texsize;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float visibility=calculate_visibility(projectedPoint);v_fade_opacity=max(0.0,min(visibility,fade_opacity[0]+fade_change));}"),symbolSDF:Me("#define SDF_PX 8.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;uniform bool u_is_text;varying vec2 v_data0;varying vec3 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nfloat EDGE_GAMMA=0.105/u_device_pixel_ratio;vec2 tex=v_data0.xy;float gamma_scale=v_data1.x;float size=v_data1.y;float fade_opacity=v_data1[2];float fontScale=u_is_text ? size/24.0 : size;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec4 a_pixeloffset;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;varying vec2 v_data0;varying vec3 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);vec2 a_pxoffset=a_pixeloffset.xy;float ele=get_elevation(a_pos);highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,ele,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),ele,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,ele,1.0);float z=float(u_pitch_with_map)*projected_pos.z/projected_pos.w;gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale+a_pxoffset),z,1.0);float gamma_scale=gl_Position.w;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float visibility=calculate_visibility(projectedPoint);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(visibility,fade_opacity[0]+fade_change));v_data0=a_tex/u_texsize;v_data1=vec3(gamma_scale,size,interpolated_fade_opacity);}"),symbolTextAndIcon:Me("#define SDF_PX 8.0\n#define SDF 1.0\n#define ICON 0.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform sampler2D u_texture_icon;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;varying vec4 v_data0;varying vec4 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nfloat fade_opacity=v_data1[2];if (v_data1.w==ICON) {vec2 tex_icon=v_data0.zw;lowp float alpha=opacity*fade_opacity;gl_FragColor=texture2D(u_texture_icon,tex_icon)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\nreturn;}vec2 tex=v_data0.xy;float EDGE_GAMMA=0.105/u_device_pixel_ratio;float gamma_scale=v_data1.x;float size=v_data1.y;float fontScale=size/24.0;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;uniform vec2 u_texsize_icon;varying vec4 v_data0;varying vec4 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);float is_sdf=a_size[0]-2.0*a_size_min;float ele=get_elevation(a_pos);highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,ele,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=size/24.0;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),ele,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,ele,1.0);float z=float(u_pitch_with_map)*projected_pos.z/projected_pos.w;gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale),z,1.0);float gamma_scale=gl_Position.w;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float visibility=calculate_visibility(projectedPoint);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(visibility,fade_opacity[0]+fade_change));v_data0.xy=a_tex/u_texsize;v_data0.zw=a_tex/u_texsize_icon;v_data1=vec4(gamma_scale,size,interpolated_fade_opacity,is_sdf);}"),terrain:Me("uniform sampler2D u_texture;varying vec2 v_texture_pos;void main() {gl_FragColor=texture2D(u_texture,v_texture_pos);}",Pe),terrainDepth:Me("varying float v_depth;const highp vec4 bitSh=vec4(256.*256.*256.,256.*256.,256.,1.);const highp vec4 bitMsk=vec4(0.,vec3(1./256.0));highp vec4 pack(highp float value) {highp vec4 comp=fract(value*bitSh);comp-=comp.xxyz*bitMsk;return comp;}void main() {gl_FragColor=pack(v_depth);}",Pe),terrainCoords:Me("precision mediump float;uniform sampler2D u_texture;uniform float u_terrain_coords_id;varying vec2 v_texture_pos;void main() {vec4 rgba=texture2D(u_texture,v_texture_pos);gl_FragColor=vec4(rgba.r,rgba.g,rgba.b,u_terrain_coords_id);}",Pe)};function Me(t,e){const i=/#pragma mapbox: ([\w]+) ([\w]+) ([\w]+) ([\w]+)/g,o=e.match(/attribute ([\w]+) ([\w]+)/g),a=t.match(/uniform ([\w]+) ([\w]+)([\s]*)([\w]*)/g),s=e.match(/uniform ([\w]+) ([\w]+)([\s]*)([\w]*)/g),r=s?s.concat(a):a,n={};return{fragmentSource:t=t.replace(i,((t,e,i,o,a)=>(n[a]=!0,"define"===e?`\n#ifndef HAS_UNIFORM_u_${a}\nvarying ${i} ${o} ${a};\n#else\nuniform ${i} ${o} u_${a};\n#endif\n`:`\n#ifdef HAS_UNIFORM_u_${a}\n    ${i} ${o} ${a} = u_${a};\n#endif\n`))),vertexSource:e=e.replace(i,((t,e,i,o,a)=>{const s="float"===o?"vec2":"vec4",r=a.match(/color/)?"color":s;return n[a]?"define"===e?`\n#ifndef HAS_UNIFORM_u_${a}\nuniform lowp float u_${a}_t;\nattribute ${i} ${s} a_${a};\nvarying ${i} ${o} ${a};\n#else\nuniform ${i} ${o} u_${a};\n#endif\n`:"vec4"===r?`\n#ifndef HAS_UNIFORM_u_${a}\n    ${a} = a_${a};\n#else\n    ${i} ${o} ${a} = u_${a};\n#endif\n`:`\n#ifndef HAS_UNIFORM_u_${a}\n    ${a} = unpack_mix_${r}(a_${a}, u_${a}_t);\n#else\n    ${i} ${o} ${a} = u_${a};\n#endif\n`:"define"===e?`\n#ifndef HAS_UNIFORM_u_${a}\nuniform lowp float u_${a}_t;\nattribute ${i} ${s} a_${a};\n#else\nuniform ${i} ${o} u_${a};\n#endif\n`:"vec4"===r?`\n#ifndef HAS_UNIFORM_u_${a}\n    ${i} ${o} ${a} = a_${a};\n#else\n    ${i} ${o} ${a} = u_${a};\n#endif\n`:`\n#ifndef HAS_UNIFORM_u_${a}\n    ${i} ${o} ${a} = unpack_mix_${r}(a_${a}, u_${a}_t);\n#else\n    ${i} ${o} ${a} = u_${a};\n#endif\n`})),staticAttributes:o,staticUniforms:r}}class Re{constructor(){this.boundProgram=null,this.boundLayoutVertexBuffer=null,this.boundPaintVertexBuffers=[],this.boundIndexBuffer=null,this.boundVertexOffset=null,this.boundDynamicVertexBuffer=null,this.vao=null}bind(t,e,i,o,a,s,r,n,l){this.context=t;let c=this.boundPaintVertexBuffers.length!==o.length;for(let t=0;!c&&t<o.length;t++)this.boundPaintVertexBuffers[t]!==o[t]&&(c=!0);t.extVertexArrayObject&&this.vao&&this.boundProgram===e&&this.boundLayoutVertexBuffer===i&&!c&&this.boundIndexBuffer===a&&this.boundVertexOffset===s&&this.boundDynamicVertexBuffer===r&&this.boundDynamicVertexBuffer2===n&&this.boundDynamicVertexBuffer3===l?(t.bindVertexArrayOES.set(this.vao),r&&r.bind(),a&&a.dynamicDraw&&a.bind(),n&&n.bind(),l&&l.bind()):this.freshBind(e,i,o,a,s,r,n,l)}freshBind(t,e,i,o,a,s,r,n){let l;const c=t.numAttributes,h=this.context,u=h.gl;if(h.extVertexArrayObject)this.vao&&this.destroy(),this.vao=h.extVertexArrayObject.createVertexArrayOES(),h.bindVertexArrayOES.set(this.vao),l=0,this.boundProgram=t,this.boundLayoutVertexBuffer=e,this.boundPaintVertexBuffers=i,this.boundIndexBuffer=o,this.boundVertexOffset=a,this.boundDynamicVertexBuffer=s,this.boundDynamicVertexBuffer2=r,this.boundDynamicVertexBuffer3=n;else{l=h.currentNumAttributes||0;for(let t=c;t<l;t++)u.disableVertexAttribArray(t)}e.enableAttributes(u,t);for(const e of i)e.enableAttributes(u,t);s&&s.enableAttributes(u,t),r&&r.enableAttributes(u,t),n&&n.enableAttributes(u,t),e.bind(),e.setVertexAttribPointers(u,t,a);for(const e of i)e.bind(),e.setVertexAttribPointers(u,t,a);s&&(s.bind(),s.setVertexAttribPointers(u,t,a)),o&&o.bind(),r&&(r.bind(),r.setVertexAttribPointers(u,t,a)),n&&(n.bind(),n.setVertexAttribPointers(u,t,a)),h.currentNumAttributes=c}destroy(){this.vao&&(this.context.extVertexArrayObject.deleteVertexArrayOES(this.vao),this.vao=null)}}function Le(t){const e=[];for(let i=0;i<t.length;i++){if(null===t[i])continue;const o=t[i].split(" ");e.push(o.pop())}return e}class ke{constructor(e,i,o,a,s,r,n){const l=e.gl;this.program=l.createProgram();const c=Le(o.staticAttributes),h=a?a.getBinderAttributes():[],u=c.concat(h),d=Ae.prelude.staticUniforms?Le(Ae.prelude.staticUniforms):[],m=o.staticUniforms?Le(o.staticUniforms):[],p=a?a.getBinderUniforms():[],_=d.concat(m).concat(p),f=[];for(const t of _)f.indexOf(t)<0&&f.push(t);const g=a?a.defines():[];r&&g.push("#define OVERDRAW_INSPECTOR;"),n&&g.push("#define TERRAIN3D;");const x=g.concat(Ae.prelude.fragmentSource,o.fragmentSource).join("\n"),v=g.concat(Ae.prelude.vertexSource,o.vertexSource).join("\n"),y=l.createShader(l.FRAGMENT_SHADER);if(l.isContextLost())return void(this.failedToCreate=!0);l.shaderSource(y,x),l.compileShader(y),l.attachShader(this.program,y);const b=l.createShader(l.VERTEX_SHADER);if(l.isContextLost())return void(this.failedToCreate=!0);l.shaderSource(b,v),l.compileShader(b),l.attachShader(this.program,b),this.attributes={};const w={};this.numAttributes=u.length;for(let t=0;t<this.numAttributes;t++)u[t]&&(l.bindAttribLocation(this.program,t,u[t]),this.attributes[u[t]]=t);l.linkProgram(this.program),l.deleteShader(b),l.deleteShader(y);for(let t=0;t<f.length;t++){const e=f[t];if(e&&!w[e]){const t=l.getUniformLocation(this.program,e);t&&(w[e]=t)}}this.fixedUniforms=s(e,w),this.terrainUniforms=((e,i)=>({u_depth:new t.Uniform1i(e,i.u_depth),u_terrain:new t.Uniform1i(e,i.u_terrain),u_terrain_dim:new t.Uniform1f(e,i.u_terrain_dim),u_terrain_matrix:new t.UniformMatrix4f(e,i.u_terrain_matrix),u_terrain_unpack:new t.Uniform4f(e,i.u_terrain_unpack),u_terrain_offset:new t.Uniform1f(e,i.u_terrain_offset),u_terrain_exaggeration:new t.Uniform1f(e,i.u_terrain_exaggeration)}))(e,w),this.binderUniforms=a?a.getUniforms(e,w):[]}draw(t,e,i,o,a,s,r,n,l,c,h,u,d,m,p,_,f,g){const x=t.gl;if(this.failedToCreate)return;if(t.program.set(this.program),t.setDepthMode(i),t.setStencilMode(o),t.setColorMode(a),t.setCullFace(s),n){t.activeTexture.set(x.TEXTURE2),x.bindTexture(x.TEXTURE_2D,n.depthTexture),t.activeTexture.set(x.TEXTURE3),x.bindTexture(x.TEXTURE_2D,n.texture);for(const t in this.terrainUniforms)this.terrainUniforms[t].set(n[t])}for(const t in this.fixedUniforms)this.fixedUniforms[t].set(r[t]);p&&p.setUniforms(t,this.binderUniforms,d,{zoom:m});const v={[x.LINES]:2,[x.TRIANGLES]:3,[x.LINE_STRIP]:1}[e];for(const i of u.get()){const o=i.vaos||(i.vaos={});(o[l]||(o[l]=new Re)).bind(t,this,c,p?p.getPaintVertexBuffers():[],h,i.vertexOffset,_,f,g),x.drawElements(e,i.primitiveLength*v,x.UNSIGNED_SHORT,i.primitiveOffset*v*2)}}}function Be(t,e,i){const o=1/Ht(i,1,e.transform.tileZoom),a=Math.pow(2,i.tileID.overscaledZ),s=i.tileSize*Math.pow(2,e.transform.tileZoom)/a,r=s*(i.tileID.canonical.x+i.tileID.wrap*a),n=s*i.tileID.canonical.y;return{u_image:0,u_texsize:i.imageAtlasTexture.size,u_scale:[o,t.fromScale,t.toScale],u_fade:t.t,u_pixel_coord_upper:[r>>16,n>>16],u_pixel_coord_lower:[65535&r,65535&n]}}const Fe=(e,i,o,a)=>{const s=i.style.light,r=s.properties.get("position"),n=[r.x,r.y,r.z],l=function(){var e=new t.ARRAY_TYPE(9);return t.ARRAY_TYPE!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}();"viewport"===s.properties.get("anchor")&&function(t,e){var i=Math.sin(e),o=Math.cos(e);t[0]=o,t[1]=i,t[2]=0,t[3]=-i,t[4]=o,t[5]=0,t[6]=0,t[7]=0,t[8]=1}(l,-i.transform.angle),function(t,e,i){var o=e[0],a=e[1],s=e[2];t[0]=o*i[0]+a*i[3]+s*i[6],t[1]=o*i[1]+a*i[4]+s*i[7],t[2]=o*i[2]+a*i[5]+s*i[8]}(n,n,l);const c=s.properties.get("color");return{u_matrix:e,u_lightpos:n,u_lightintensity:s.properties.get("intensity"),u_lightcolor:[c.r,c.g,c.b],u_vertical_gradient:+o,u_opacity:a}},Oe=(e,i,o,a,s,r,n)=>t.extend(Fe(e,i,o,a),Be(r,i,n),{u_height_factor:-Math.pow(2,s.overscaledZ)/n.tileSize/8}),Ue=t=>({u_matrix:t}),Ne=(e,i,o,a)=>t.extend(Ue(e),Be(o,i,a)),Ge=(t,e)=>({u_matrix:t,u_world:e}),Ze=(e,i,o,a,s)=>t.extend(Ne(e,i,o,a),{u_world:s}),qe=(t,e,i,o)=>{const a=t.transform;let s,r;if("map"===o.paint.get("circle-pitch-alignment")){const t=Ht(i,1,a.zoom);s=!0,r=[t,t]}else s=!1,r=a.pixelsToGLUnits;return{u_camera_to_center_distance:a.cameraToCenterDistance,u_scale_with_map:+("map"===o.paint.get("circle-pitch-scale")),u_matrix:t.translatePosMatrix(e.posMatrix,i,o.paint.get("circle-translate"),o.paint.get("circle-translate-anchor")),u_pitch_with_map:+s,u_device_pixel_ratio:t.pixelRatio,u_extrude_scale:r}},je=(t,e,i)=>{const o=Ht(i,1,e.zoom),a=Math.pow(2,e.zoom-i.tileID.overscaledZ),s=i.tileID.overscaleFactor();return{u_matrix:t,u_camera_to_center_distance:e.cameraToCenterDistance,u_pixels_to_tile_units:o,u_extrude_scale:[e.pixelsToGLUnits[0]/(o*a),e.pixelsToGLUnits[1]/(o*a)],u_overscale_factor:s}},Ve=(t,e,i=1)=>({u_matrix:t,u_color:e,u_overlay:0,u_overlay_scale:i}),Xe=t=>({u_matrix:t}),$e=(t,e,i,o)=>({u_matrix:t,u_extrude_scale:Ht(e,1,i),u_intensity:o});function We(e,i){const o=Math.pow(2,i.canonical.z),a=i.canonical.y;return[new t.MercatorCoordinate(0,a/o).toLngLat().lat,new t.MercatorCoordinate(0,(a+1)/o).toLngLat().lat]}const He=(t,e,i,o)=>{const a=t.transform;return{u_matrix:ti(t,e,i,o),u_ratio:1/Ht(e,1,a.zoom),u_device_pixel_ratio:t.pixelRatio,u_units_to_pixels:[1/a.pixelsToGLUnits[0],1/a.pixelsToGLUnits[1]]}},Ke=(e,i,o,a,s)=>t.extend(He(e,i,o,s),{u_image:0,u_image_height:a}),Ye=(t,e,i,o,a)=>{const s=t.transform,r=Qe(e,s);return{u_matrix:ti(t,e,i,a),u_texsize:e.imageAtlasTexture.size,u_ratio:1/Ht(e,1,s.zoom),u_device_pixel_ratio:t.pixelRatio,u_image:0,u_scale:[r,o.fromScale,o.toScale],u_fade:o.t,u_units_to_pixels:[1/s.pixelsToGLUnits[0],1/s.pixelsToGLUnits[1]]}},Je=(e,i,o,a,s,r)=>{const n=e.lineAtlas,l=Qe(i,e.transform),c="round"===o.layout.get("line-cap"),h=n.getDash(a.from,c),u=n.getDash(a.to,c),d=h.width*s.fromScale,m=u.width*s.toScale;return t.extend(He(e,i,o,r),{u_patternscale_a:[l/d,-h.height/2],u_patternscale_b:[l/m,-u.height/2],u_sdfgamma:n.width/(256*Math.min(d,m)*e.pixelRatio)/2,u_image:0,u_tex_y_a:h.y,u_tex_y_b:u.y,u_mix:s.t})};function Qe(t,e){return 1/Ht(t,1,e.tileZoom)}function ti(t,e,i,o){return t.translatePosMatrix(o?o.posMatrix:e.tileID.posMatrix,e,i.paint.get("line-translate"),i.paint.get("line-translate-anchor"))}const ei=(t,e,i,o,a)=>{return{u_matrix:t,u_tl_parent:e,u_scale_parent:i,u_buffer_scale:1,u_fade_t:o.mix,u_opacity:o.opacity*a.paint.get("raster-opacity"),u_image0:0,u_image1:1,u_brightness_low:a.paint.get("raster-brightness-min"),u_brightness_high:a.paint.get("raster-brightness-max"),u_saturation_factor:(r=a.paint.get("raster-saturation"),r>0?1-1/(1.001-r):-r),u_contrast_factor:(s=a.paint.get("raster-contrast"),s>0?1/(1-s):1+s),u_spin_weights:ii(a.paint.get("raster-hue-rotate"))};var s,r};function ii(t){t*=Math.PI/180;const e=Math.sin(t),i=Math.cos(t);return[(2*i+1)/3,(-Math.sqrt(3)*e-i+1)/3,(Math.sqrt(3)*e-i+1)/3]}const oi=(t,e,i,o,a,s,r,n,l,c)=>{const h=a.transform;return{u_is_size_zoom_constant:+("constant"===t||"source"===t),u_is_size_feature_constant:+("constant"===t||"camera"===t),u_size_t:e?e.uSizeT:0,u_size:e?e.uSize:0,u_camera_to_center_distance:h.cameraToCenterDistance,u_pitch:h.pitch/360*2*Math.PI,u_rotate_symbol:+i,u_aspect_ratio:h.width/h.height,u_fade_change:a.options.fadeDuration?a.symbolFadeChange:1,u_matrix:s,u_label_plane_matrix:r,u_coord_matrix:n,u_is_text:+l,u_pitch_with_map:+o,u_texsize:c,u_texture:0}},ai=(e,i,o,a,s,r,n,l,c,h,u)=>{const d=s.transform;return t.extend(oi(e,i,o,a,s,r,n,l,c,h),{u_gamma_scale:a?Math.cos(d._pitch)*d.cameraToCenterDistance:1,u_device_pixel_ratio:s.pixelRatio,u_is_halo:+u})},si=(e,i,o,a,s,r,n,l,c,h)=>t.extend(ai(e,i,o,a,s,r,n,l,!0,c,!0),{u_texsize_icon:h,u_texture_icon:1}),ri=(t,e,i)=>({u_matrix:t,u_opacity:e,u_color:i}),ni=(e,i,o,a,s,r)=>t.extend(function(t,e,i,o){const a=i.imageManager.getPattern(t.from.toString()),s=i.imageManager.getPattern(t.to.toString()),{width:r,height:n}=i.imageManager.getPixelSize(),l=Math.pow(2,o.tileID.overscaledZ),c=o.tileSize*Math.pow(2,i.transform.tileZoom)/l,h=c*(o.tileID.canonical.x+o.tileID.wrap*l),u=c*o.tileID.canonical.y;return{u_image:0,u_pattern_tl_a:a.tl,u_pattern_br_a:a.br,u_pattern_tl_b:s.tl,u_pattern_br_b:s.br,u_texsize:[r,n],u_mix:e.t,u_pattern_size_a:a.displaySize,u_pattern_size_b:s.displaySize,u_scale_a:e.fromScale,u_scale_b:e.toScale,u_tile_units_to_pixels:1/Ht(o,1,i.transform.tileZoom),u_pixel_coord_upper:[h>>16,u>>16],u_pixel_coord_lower:[65535&h,65535&u]}}(a,r,o,s),{u_matrix:e,u_opacity:i}),li={fillExtrusion:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_lightpos:new t.Uniform3f(e,i.u_lightpos),u_lightintensity:new t.Uniform1f(e,i.u_lightintensity),u_lightcolor:new t.Uniform3f(e,i.u_lightcolor),u_vertical_gradient:new t.Uniform1f(e,i.u_vertical_gradient),u_opacity:new t.Uniform1f(e,i.u_opacity)}),fillExtrusionPattern:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_lightpos:new t.Uniform3f(e,i.u_lightpos),u_lightintensity:new t.Uniform1f(e,i.u_lightintensity),u_lightcolor:new t.Uniform3f(e,i.u_lightcolor),u_vertical_gradient:new t.Uniform1f(e,i.u_vertical_gradient),u_height_factor:new t.Uniform1f(e,i.u_height_factor),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade),u_opacity:new t.Uniform1f(e,i.u_opacity)}),fill:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}),fillPattern:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}),fillOutline:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world)}),fillOutlinePattern:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}),circle:(e,i)=>({u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_scale_with_map:new t.Uniform1i(e,i.u_scale_with_map),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_extrude_scale:new t.Uniform2f(e,i.u_extrude_scale),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}),collisionBox:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pixels_to_tile_units:new t.Uniform1f(e,i.u_pixels_to_tile_units),u_extrude_scale:new t.Uniform2f(e,i.u_extrude_scale),u_overscale_factor:new t.Uniform1f(e,i.u_overscale_factor)}),collisionCircle:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_inv_matrix:new t.UniformMatrix4f(e,i.u_inv_matrix),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_viewport_size:new t.Uniform2f(e,i.u_viewport_size)}),debug:(e,i)=>({u_color:new t.UniformColor(e,i.u_color),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_overlay:new t.Uniform1i(e,i.u_overlay),u_overlay_scale:new t.Uniform1f(e,i.u_overlay_scale)}),clippingMask:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}),heatmap:(e,i)=>({u_extrude_scale:new t.Uniform1f(e,i.u_extrude_scale),u_intensity:new t.Uniform1f(e,i.u_intensity),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}),heatmapTexture:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_color_ramp:new t.Uniform1i(e,i.u_color_ramp),u_opacity:new t.Uniform1f(e,i.u_opacity)}),hillshade:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_latrange:new t.Uniform2f(e,i.u_latrange),u_light:new t.Uniform2f(e,i.u_light),u_shadow:new t.UniformColor(e,i.u_shadow),u_highlight:new t.UniformColor(e,i.u_highlight),u_accent:new t.UniformColor(e,i.u_accent)}),hillshadePrepare:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_dimension:new t.Uniform2f(e,i.u_dimension),u_zoom:new t.Uniform1f(e,i.u_zoom),u_unpack:new t.Uniform4f(e,i.u_unpack)}),line:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels)}),lineGradient:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels),u_image:new t.Uniform1i(e,i.u_image),u_image_height:new t.Uniform1f(e,i.u_image_height)}),linePattern:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_texsize:new t.Uniform2f(e,i.u_texsize),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_image:new t.Uniform1i(e,i.u_image),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}),lineSDF:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels),u_patternscale_a:new t.Uniform2f(e,i.u_patternscale_a),u_patternscale_b:new t.Uniform2f(e,i.u_patternscale_b),u_sdfgamma:new t.Uniform1f(e,i.u_sdfgamma),u_image:new t.Uniform1i(e,i.u_image),u_tex_y_a:new t.Uniform1f(e,i.u_tex_y_a),u_tex_y_b:new t.Uniform1f(e,i.u_tex_y_b),u_mix:new t.Uniform1f(e,i.u_mix)}),raster:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_tl_parent:new t.Uniform2f(e,i.u_tl_parent),u_scale_parent:new t.Uniform1f(e,i.u_scale_parent),u_buffer_scale:new t.Uniform1f(e,i.u_buffer_scale),u_fade_t:new t.Uniform1f(e,i.u_fade_t),u_opacity:new t.Uniform1f(e,i.u_opacity),u_image0:new t.Uniform1i(e,i.u_image0),u_image1:new t.Uniform1i(e,i.u_image1),u_brightness_low:new t.Uniform1f(e,i.u_brightness_low),u_brightness_high:new t.Uniform1f(e,i.u_brightness_high),u_saturation_factor:new t.Uniform1f(e,i.u_saturation_factor),u_contrast_factor:new t.Uniform1f(e,i.u_contrast_factor),u_spin_weights:new t.Uniform3f(e,i.u_spin_weights)}),symbolIcon:(e,i)=>({u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_coord_matrix:new t.UniformMatrix4f(e,i.u_coord_matrix),u_is_text:new t.Uniform1i(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texture:new t.Uniform1i(e,i.u_texture)}),symbolSDF:(e,i)=>({u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_coord_matrix:new t.UniformMatrix4f(e,i.u_coord_matrix),u_is_text:new t.Uniform1i(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texture:new t.Uniform1i(e,i.u_texture),u_gamma_scale:new t.Uniform1f(e,i.u_gamma_scale),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_is_halo:new t.Uniform1i(e,i.u_is_halo)}),symbolTextAndIcon:(e,i)=>({u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_coord_matrix:new t.UniformMatrix4f(e,i.u_coord_matrix),u_is_text:new t.Uniform1i(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texsize_icon:new t.Uniform2f(e,i.u_texsize_icon),u_texture:new t.Uniform1i(e,i.u_texture),u_texture_icon:new t.Uniform1i(e,i.u_texture_icon),u_gamma_scale:new t.Uniform1f(e,i.u_gamma_scale),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_is_halo:new t.Uniform1i(e,i.u_is_halo)}),background:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_opacity:new t.Uniform1f(e,i.u_opacity),u_color:new t.UniformColor(e,i.u_color)}),backgroundPattern:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_opacity:new t.Uniform1f(e,i.u_opacity),u_image:new t.Uniform1i(e,i.u_image),u_pattern_tl_a:new t.Uniform2f(e,i.u_pattern_tl_a),u_pattern_br_a:new t.Uniform2f(e,i.u_pattern_br_a),u_pattern_tl_b:new t.Uniform2f(e,i.u_pattern_tl_b),u_pattern_br_b:new t.Uniform2f(e,i.u_pattern_br_b),u_texsize:new t.Uniform2f(e,i.u_texsize),u_mix:new t.Uniform1f(e,i.u_mix),u_pattern_size_a:new t.Uniform2f(e,i.u_pattern_size_a),u_pattern_size_b:new t.Uniform2f(e,i.u_pattern_size_b),u_scale_a:new t.Uniform1f(e,i.u_scale_a),u_scale_b:new t.Uniform1f(e,i.u_scale_b),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_tile_units_to_pixels:new t.Uniform1f(e,i.u_tile_units_to_pixels)}),terrain:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_texture:new t.Uniform1i(e,i.u_texture)}),terrainDepth:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}),terrainCoords:(e,i)=>({u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_texture:new t.Uniform1i(e,i.u_texture),u_terrain_coords_id:new t.Uniform1f(e,i.u_terrain_coords_id)})};class ci{constructor(t,e,i){this.context=t;const o=t.gl;this.buffer=o.createBuffer(),this.dynamicDraw=Boolean(i),this.context.unbindVAO(),t.bindElementBuffer.set(this.buffer),o.bufferData(o.ELEMENT_ARRAY_BUFFER,e.arrayBuffer,this.dynamicDraw?o.DYNAMIC_DRAW:o.STATIC_DRAW),this.dynamicDraw||delete e.arrayBuffer}bind(){this.context.bindElementBuffer.set(this.buffer)}updateData(t){const e=this.context.gl;this.context.unbindVAO(),this.bind(),e.bufferSubData(e.ELEMENT_ARRAY_BUFFER,0,t.arrayBuffer)}destroy(){this.buffer&&(this.context.gl.deleteBuffer(this.buffer),delete this.buffer)}}const hi={Int8:"BYTE",Uint8:"UNSIGNED_BYTE",Int16:"SHORT",Uint16:"UNSIGNED_SHORT",Int32:"INT",Uint32:"UNSIGNED_INT",Float32:"FLOAT"};class ui{constructor(t,e,i,o){this.length=e.length,this.attributes=i,this.itemSize=e.bytesPerElement,this.dynamicDraw=o,this.context=t;const a=t.gl;this.buffer=a.createBuffer(),t.bindVertexBuffer.set(this.buffer),a.bufferData(a.ARRAY_BUFFER,e.arrayBuffer,this.dynamicDraw?a.DYNAMIC_DRAW:a.STATIC_DRAW),this.dynamicDraw||delete e.arrayBuffer}bind(){this.context.bindVertexBuffer.set(this.buffer)}updateData(t){const e=this.context.gl;this.bind(),e.bufferSubData(e.ARRAY_BUFFER,0,t.arrayBuffer)}enableAttributes(t,e){for(let i=0;i<this.attributes.length;i++){const o=e.attributes[this.attributes[i].name];void 0!==o&&t.enableVertexAttribArray(o)}}setVertexAttribPointers(t,e,i){for(let o=0;o<this.attributes.length;o++){const a=this.attributes[o],s=e.attributes[a.name];void 0!==s&&t.vertexAttribPointer(s,a.components,t[hi[a.type]],!1,this.itemSize,a.offset+this.itemSize*(i||0))}}destroy(){this.buffer&&(this.context.gl.deleteBuffer(this.buffer),delete this.buffer)}}class di{constructor(t){this.gl=t.gl,this.default=this.getDefault(),this.current=this.default,this.dirty=!1}get(){return this.current}set(t){}getDefault(){return this.default}setDefault(){this.set(this.default)}}class mi extends di{getDefault(){return t.Color.transparent}set(t){const e=this.current;(t.r!==e.r||t.g!==e.g||t.b!==e.b||t.a!==e.a||this.dirty)&&(this.gl.clearColor(t.r,t.g,t.b,t.a),this.current=t,this.dirty=!1)}}class pi extends di{getDefault(){return 1}set(t){(t!==this.current||this.dirty)&&(this.gl.clearDepth(t),this.current=t,this.dirty=!1)}}class _i extends di{getDefault(){return 0}set(t){(t!==this.current||this.dirty)&&(this.gl.clearStencil(t),this.current=t,this.dirty=!1)}}class fi extends di{getDefault(){return[!0,!0,!0,!0]}set(t){const e=this.current;(t[0]!==e[0]||t[1]!==e[1]||t[2]!==e[2]||t[3]!==e[3]||this.dirty)&&(this.gl.colorMask(t[0],t[1],t[2],t[3]),this.current=t,this.dirty=!1)}}class gi extends di{getDefault(){return!0}set(t){(t!==this.current||this.dirty)&&(this.gl.depthMask(t),this.current=t,this.dirty=!1)}}class xi extends di{getDefault(){return 255}set(t){(t!==this.current||this.dirty)&&(this.gl.stencilMask(t),this.current=t,this.dirty=!1)}}class vi extends di{getDefault(){return{func:this.gl.ALWAYS,ref:0,mask:255}}set(t){const e=this.current;(t.func!==e.func||t.ref!==e.ref||t.mask!==e.mask||this.dirty)&&(this.gl.stencilFunc(t.func,t.ref,t.mask),this.current=t,this.dirty=!1)}}class yi extends di{getDefault(){const t=this.gl;return[t.KEEP,t.KEEP,t.KEEP]}set(t){const e=this.current;(t[0]!==e[0]||t[1]!==e[1]||t[2]!==e[2]||this.dirty)&&(this.gl.stencilOp(t[0],t[1],t[2]),this.current=t,this.dirty=!1)}}class bi extends di{getDefault(){return!1}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;t?e.enable(e.STENCIL_TEST):e.disable(e.STENCIL_TEST),this.current=t,this.dirty=!1}}class wi extends di{getDefault(){return[0,1]}set(t){const e=this.current;(t[0]!==e[0]||t[1]!==e[1]||this.dirty)&&(this.gl.depthRange(t[0],t[1]),this.current=t,this.dirty=!1)}}class Ti extends di{getDefault(){return!1}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;t?e.enable(e.DEPTH_TEST):e.disable(e.DEPTH_TEST),this.current=t,this.dirty=!1}}class Ei extends di{getDefault(){return this.gl.LESS}set(t){(t!==this.current||this.dirty)&&(this.gl.depthFunc(t),this.current=t,this.dirty=!1)}}class Ii extends di{getDefault(){return!1}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;t?e.enable(e.BLEND):e.disable(e.BLEND),this.current=t,this.dirty=!1}}class Si extends di{getDefault(){const t=this.gl;return[t.ONE,t.ZERO]}set(t){const e=this.current;(t[0]!==e[0]||t[1]!==e[1]||this.dirty)&&(this.gl.blendFunc(t[0],t[1]),this.current=t,this.dirty=!1)}}class Ci extends di{getDefault(){return t.Color.transparent}set(t){const e=this.current;(t.r!==e.r||t.g!==e.g||t.b!==e.b||t.a!==e.a||this.dirty)&&(this.gl.blendColor(t.r,t.g,t.b,t.a),this.current=t,this.dirty=!1)}}class zi extends di{getDefault(){return this.gl.FUNC_ADD}set(t){(t!==this.current||this.dirty)&&(this.gl.blendEquation(t),this.current=t,this.dirty=!1)}}class Di extends di{getDefault(){return!1}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;t?e.enable(e.CULL_FACE):e.disable(e.CULL_FACE),this.current=t,this.dirty=!1}}class Pi extends di{getDefault(){return this.gl.BACK}set(t){(t!==this.current||this.dirty)&&(this.gl.cullFace(t),this.current=t,this.dirty=!1)}}class Ai extends di{getDefault(){return this.gl.CCW}set(t){(t!==this.current||this.dirty)&&(this.gl.frontFace(t),this.current=t,this.dirty=!1)}}class Mi extends di{getDefault(){return null}set(t){(t!==this.current||this.dirty)&&(this.gl.useProgram(t),this.current=t,this.dirty=!1)}}class Ri extends di{getDefault(){return this.gl.TEXTURE0}set(t){(t!==this.current||this.dirty)&&(this.gl.activeTexture(t),this.current=t,this.dirty=!1)}}class Li extends di{getDefault(){const t=this.gl;return[0,0,t.drawingBufferWidth,t.drawingBufferHeight]}set(t){const e=this.current;(t[0]!==e[0]||t[1]!==e[1]||t[2]!==e[2]||t[3]!==e[3]||this.dirty)&&(this.gl.viewport(t[0],t[1],t[2],t[3]),this.current=t,this.dirty=!1)}}class ki extends di{getDefault(){return null}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,t),this.current=t,this.dirty=!1}}class Bi extends di{getDefault(){return null}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.bindRenderbuffer(e.RENDERBUFFER,t),this.current=t,this.dirty=!1}}class Fi extends di{getDefault(){return null}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.bindTexture(e.TEXTURE_2D,t),this.current=t,this.dirty=!1}}class Oi extends di{getDefault(){return null}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,t),this.current=t,this.dirty=!1}}class Ui extends di{getDefault(){return null}set(t){const e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),this.current=t,this.dirty=!1}}class Ni extends di{constructor(t){super(t),this.vao=t.extVertexArrayObject}getDefault(){return null}set(t){this.vao&&(t!==this.current||this.dirty)&&(this.vao.bindVertexArrayOES(t),this.current=t,this.dirty=!1)}}class Gi extends di{getDefault(){return 4}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.pixelStorei(e.UNPACK_ALIGNMENT,t),this.current=t,this.dirty=!1}}class Zi extends di{getDefault(){return!1}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t),this.current=t,this.dirty=!1}}class qi extends di{getDefault(){return!1}set(t){if(t===this.current&&!this.dirty)return;const e=this.gl;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t),this.current=t,this.dirty=!1}}class ji extends di{constructor(t,e){super(t),this.context=t,this.parent=e}getDefault(){return null}}class Vi extends ji{setDirty(){this.dirty=!0}set(t){if(t===this.current&&!this.dirty)return;this.context.bindFramebuffer.set(this.parent);const e=this.gl;e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0),this.current=t,this.dirty=!1}}class Xi extends ji{set(t){if(t===this.current&&!this.dirty)return;this.context.bindFramebuffer.set(this.parent);const e=this.gl;e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t),this.current=t,this.dirty=!1}}class $i{constructor(t,e,i,o){this.context=t,this.width=e,this.height=i;const a=this.framebuffer=t.gl.createFramebuffer();this.colorAttachment=new Vi(t,a),o&&(this.depthAttachment=new Xi(t,a))}destroy(){const t=this.context.gl,e=this.colorAttachment.get();if(e&&t.deleteTexture(e),this.depthAttachment){const e=this.depthAttachment.get();e&&t.deleteRenderbuffer(e)}t.deleteFramebuffer(this.framebuffer)}}class Wi{constructor(t,e,i){this.blendFunction=t,this.blendColor=e,this.mask=i}}Wi.Replace=[1,0],Wi.disabled=new Wi(Wi.Replace,t.Color.transparent,[!1,!1,!1,!1]),Wi.unblended=new Wi(Wi.Replace,t.Color.transparent,[!0,!0,!0,!0]),Wi.alphaBlended=new Wi([1,771],t.Color.transparent,[!0,!0,!0,!0]);class Hi{constructor(t){this.gl=t,this.extVertexArrayObject=this.gl.getExtension("OES_vertex_array_object"),this.clearColor=new mi(this),this.clearDepth=new pi(this),this.clearStencil=new _i(this),this.colorMask=new fi(this),this.depthMask=new gi(this),this.stencilMask=new xi(this),this.stencilFunc=new vi(this),this.stencilOp=new yi(this),this.stencilTest=new bi(this),this.depthRange=new wi(this),this.depthTest=new Ti(this),this.depthFunc=new Ei(this),this.blend=new Ii(this),this.blendFunc=new Si(this),this.blendColor=new Ci(this),this.blendEquation=new zi(this),this.cullFace=new Di(this),this.cullFaceSide=new Pi(this),this.frontFace=new Ai(this),this.program=new Mi(this),this.activeTexture=new Ri(this),this.viewport=new Li(this),this.bindFramebuffer=new ki(this),this.bindRenderbuffer=new Bi(this),this.bindTexture=new Fi(this),this.bindVertexBuffer=new Oi(this),this.bindElementBuffer=new Ui(this),this.bindVertexArrayOES=this.extVertexArrayObject&&new Ni(this),this.pixelStoreUnpack=new Gi(this),this.pixelStoreUnpackPremultiplyAlpha=new Zi(this),this.pixelStoreUnpackFlipY=new qi(this),this.extTextureFilterAnisotropic=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic"),this.extTextureFilterAnisotropic&&(this.extTextureFilterAnisotropicMax=t.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)),this.extTextureHalfFloat=t.getExtension("OES_texture_half_float"),this.extTextureHalfFloat&&(t.getExtension("OES_texture_half_float_linear"),this.extRenderToTextureHalfFloat=t.getExtension("EXT_color_buffer_half_float")),this.extTimerQuery=t.getExtension("EXT_disjoint_timer_query"),this.maxTextureSize=t.getParameter(t.MAX_TEXTURE_SIZE)}setDefault(){this.unbindVAO(),this.clearColor.setDefault(),this.clearDepth.setDefault(),this.clearStencil.setDefault(),this.colorMask.setDefault(),this.depthMask.setDefault(),this.stencilMask.setDefault(),this.stencilFunc.setDefault(),this.stencilOp.setDefault(),this.stencilTest.setDefault(),this.depthRange.setDefault(),this.depthTest.setDefault(),this.depthFunc.setDefault(),this.blend.setDefault(),this.blendFunc.setDefault(),this.blendColor.setDefault(),this.blendEquation.setDefault(),this.cullFace.setDefault(),this.cullFaceSide.setDefault(),this.frontFace.setDefault(),this.program.setDefault(),this.activeTexture.setDefault(),this.bindFramebuffer.setDefault(),this.pixelStoreUnpack.setDefault(),this.pixelStoreUnpackPremultiplyAlpha.setDefault(),this.pixelStoreUnpackFlipY.setDefault()}setDirty(){this.clearColor.dirty=!0,this.clearDepth.dirty=!0,this.clearStencil.dirty=!0,this.colorMask.dirty=!0,this.depthMask.dirty=!0,this.stencilMask.dirty=!0,this.stencilFunc.dirty=!0,this.stencilOp.dirty=!0,this.stencilTest.dirty=!0,this.depthRange.dirty=!0,this.depthTest.dirty=!0,this.depthFunc.dirty=!0,this.blend.dirty=!0,this.blendFunc.dirty=!0,this.blendColor.dirty=!0,this.blendEquation.dirty=!0,this.cullFace.dirty=!0,this.cullFaceSide.dirty=!0,this.frontFace.dirty=!0,this.program.dirty=!0,this.activeTexture.dirty=!0,this.viewport.dirty=!0,this.bindFramebuffer.dirty=!0,this.bindRenderbuffer.dirty=!0,this.bindTexture.dirty=!0,this.bindVertexBuffer.dirty=!0,this.bindElementBuffer.dirty=!0,this.extVertexArrayObject&&(this.bindVertexArrayOES.dirty=!0),this.pixelStoreUnpack.dirty=!0,this.pixelStoreUnpackPremultiplyAlpha.dirty=!0,this.pixelStoreUnpackFlipY.dirty=!0}createIndexBuffer(t,e){return new ci(this,t,e)}createVertexBuffer(t,e,i){return new ui(this,t,e,i)}createRenderbuffer(t,e,i){const o=this.gl,a=o.createRenderbuffer();return this.bindRenderbuffer.set(a),o.renderbufferStorage(o.RENDERBUFFER,t,e,i),this.bindRenderbuffer.set(null),a}createFramebuffer(t,e,i){return new $i(this,t,e,i)}clear({color:t,depth:e}){const i=this.gl;let o=0;t&&(o|=i.COLOR_BUFFER_BIT,this.clearColor.set(t),this.colorMask.set([!0,!0,!0,!0])),void 0!==e&&(o|=i.DEPTH_BUFFER_BIT,this.depthRange.set([0,1]),this.clearDepth.set(e),this.depthMask.set(!0)),i.clear(o)}setCullFace(t){!1===t.enable?this.cullFace.set(!1):(this.cullFace.set(!0),this.cullFaceSide.set(t.mode),this.frontFace.set(t.frontFace))}setDepthMode(t){t.func!==this.gl.ALWAYS||t.mask?(this.depthTest.set(!0),this.depthFunc.set(t.func),this.depthMask.set(t.mask),this.depthRange.set(t.range)):this.depthTest.set(!1)}setStencilMode(t){t.test.func!==this.gl.ALWAYS||t.mask?(this.stencilTest.set(!0),this.stencilMask.set(t.mask),this.stencilOp.set([t.fail,t.depthFail,t.pass]),this.stencilFunc.set({func:t.test.func,ref:t.ref,mask:t.test.mask})):this.stencilTest.set(!1)}setColorMode(t){a(t.blendFunction,Wi.Replace)?this.blend.set(!1):(this.blend.set(!0),this.blendFunc.set(t.blendFunction),this.blendColor.set(t.blendColor)),this.colorMask.set(t.mask)}unbindVAO(){this.extVertexArrayObject&&this.bindVertexArrayOES.set(null)}}class Ki{constructor(t,e,i){this.func=t,this.mask=e,this.range=i}}Ki.ReadOnly=!1,Ki.ReadWrite=!0,Ki.disabled=new Ki(519,Ki.ReadOnly,[0,1]);const Yi=7680;class Ji{constructor(t,e,i,o,a,s){this.test=t,this.ref=e,this.mask=i,this.fail=o,this.depthFail=a,this.pass=s}}Ji.disabled=new Ji({func:519,mask:0},0,0,Yi,Yi,Yi);class Qi{constructor(t,e,i){this.enable=t,this.mode=e,this.frontFace=i}}let to;function eo(e,i,o,a,s,r,n){const l=e.context,c=l.gl,h=e.useProgram("collisionBox"),u=[];let d=0,m=0;for(let p=0;p<a.length;p++){const _=a[p],f=i.getTile(_),g=f.getBucket(o);if(!g)continue;let x=_.posMatrix;0===s[0]&&0===s[1]||(x=e.translatePosMatrix(_.posMatrix,f,s,r));const v=n?g.textCollisionBox:g.iconCollisionBox,y=g.collisionCircleArray;if(y.length>0){const i=t.create(),o=x;t.mul(i,g.placementInvProjMatrix,e.transform.glCoordMatrix),t.mul(i,i,g.placementViewportMatrix),u.push({circleArray:y,circleOffset:m,transform:o,invTransform:i,coord:_}),d+=y.length/4,m=d}v&&h.draw(l,c.LINES,Ki.disabled,Ji.disabled,e.colorModeForRenderPass(),Qi.disabled,je(x,e.transform,f),e.style.terrain&&e.style.terrain.getTerrainData(_),o.id,v.layoutVertexBuffer,v.indexBuffer,v.segments,null,e.transform.zoom,null,null,v.collisionVertexBuffer)}if(!n||!u.length)return;const p=e.useProgram("collisionCircle"),_=new t.CollisionCircleLayoutArray;_.resize(4*d),_._trim();let f=0;for(const t of u)for(let e=0;e<t.circleArray.length/4;e++){const i=4*e,o=t.circleArray[i+0],a=t.circleArray[i+1],s=t.circleArray[i+2],r=t.circleArray[i+3];_.emplace(f++,o,a,s,r,0),_.emplace(f++,o,a,s,r,1),_.emplace(f++,o,a,s,r,2),_.emplace(f++,o,a,s,r,3)}(!to||to.length<2*d)&&(to=function(e){const i=2*e,o=new t.QuadTriangleArray;o.resize(i),o._trim();for(let t=0;t<i;t++){const e=6*t;o.uint16[e+0]=4*t+0,o.uint16[e+1]=4*t+1,o.uint16[e+2]=4*t+2,o.uint16[e+3]=4*t+2,o.uint16[e+4]=4*t+3,o.uint16[e+5]=4*t+0}return o}(d));const g=l.createIndexBuffer(to,!0),x=l.createVertexBuffer(_,t.collisionCircleLayout.members,!0);for(const i of u){const a={u_matrix:i.transform,u_inv_matrix:i.invTransform,u_camera_to_center_distance:(v=e.transform).cameraToCenterDistance,u_viewport_size:[v.width,v.height]};p.draw(l,c.TRIANGLES,Ki.disabled,Ji.disabled,e.colorModeForRenderPass(),Qi.disabled,a,e.style.terrain&&e.style.terrain.getTerrainData(i.coord),o.id,x,g,t.SegmentVector.simpleSegment(0,2*i.circleOffset,i.circleArray.length,i.circleArray.length/2),null,e.transform.zoom,null,null,null)}var v;x.destroy(),g.destroy()}Qi.disabled=new Qi(!1,1029,2305),Qi.backCCW=new Qi(!0,1029,2305);const io=t.identity(new Float32Array(16));function oo(e,i,o,a,s,r){const{horizontalAlign:n,verticalAlign:l}=t.getAnchorAlignment(e),c=-(n-.5)*i,h=-(l-.5)*o,u=t.evaluateVariableOffset(e,a);return new t.pointGeometry((c/s+u[0])*r,(h/s+u[1])*r)}function ao(e,i,o,a,s,r,n,l,c,h,u){const d=e.text.placedSymbolArray,m=e.text.dynamicLayoutVertexArray,p=e.icon.dynamicLayoutVertexArray,_={};m.clear();for(let p=0;p<d.length;p++){const f=d.get(p),g=e.allowVerticalPlacement&&!f.placedOrientation,x=f.hidden||!f.crossTileID||g?null:a[f.crossTileID];if(x){const a=new t.pointGeometry(f.anchorX,f.anchorY),d=kt(a,o?n:r,u),p=Bt(s.cameraToCenterDistance,d.signedDistanceFromCamera);let g=t.evaluateSizeForFeature(e.textSizeData,c,f)*p/t.ONE_EM;o&&(g*=e.tilePixelRatio/l);const{width:v,height:y,anchor:b,textOffset:w,textBoxScale:T}=x,E=oo(b,v,y,w,T,g),I=o?kt(a.add(E),r,u).point:d.point.add(i?E.rotate(-s.angle):E),S=e.allowVerticalPlacement&&f.placedOrientation===t.WritingMode.vertical?Math.PI/2:0;for(let e=0;e<f.numGlyphs;e++)t.addDynamicAttributes(m,I,S);h&&f.associatedIconIndex>=0&&(_[f.associatedIconIndex]={shiftedAnchor:I,angle:S})}else Vt(f.numGlyphs,m)}if(h){p.clear();const i=e.icon.placedSymbolArray;for(let e=0;e<i.length;e++){const o=i.get(e);if(o.hidden)Vt(o.numGlyphs,p);else{const i=_[e];if(i)for(let e=0;e<o.numGlyphs;e++)t.addDynamicAttributes(p,i.shiftedAnchor,i.angle);else Vt(o.numGlyphs,p)}}e.icon.dynamicLayoutVertexBuffer.updateData(p)}e.text.dynamicLayoutVertexBuffer.updateData(m)}function so(t,e,i){return i.iconsInText&&e?"symbolTextAndIcon":t?"symbolSDF":"symbolIcon"}function ro(e,i,o,a,s,r,n,l,c,h,u,d){const m=e.context,p=m.gl,_=e.transform,f="map"===l,g="map"===c,x="viewport"!==l&&"point"!==o.layout.get("symbol-placement"),v=f&&!g&&!x,y=!o.layout.get("symbol-sort-key").isConstant();let b=!1;const w=e.depthModeForSublayer(0,Ki.ReadOnly),T=o.layout.get("text-variable-anchor"),E=[];for(const l of a){const a=i.getTile(l),c=a.getBucket(o);if(!c)continue;const u=s?c.text:c.icon;if(!u||!u.segments.get().length)continue;const d=u.programConfigurations.get(o.id),m=s||c.sdfIcons,w=s?c.textSizeData:c.iconSizeData,I=g||0!==_.pitch,S=e.useProgram(so(m,s,c),d),C=t.evaluateSizeForZoom(w,_.zoom),z=e.style.terrain&&e.style.terrain.getTerrainData(l);let D,P,A,M,R=[0,0],L=null;if(s){if(P=a.glyphAtlasTexture,A=p.LINEAR,D=a.glyphAtlasTexture.size,c.iconsInText){R=a.imageAtlasTexture.size,L=a.imageAtlasTexture;const t="composite"===w.kind||"camera"===w.kind;M=I||e.options.rotating||e.options.zooming||t?p.LINEAR:p.NEAREST}}else{const t=1!==o.layout.get("icon-size").constantOr(0)||c.iconsNeedLinear;P=a.imageAtlasTexture,A=m||e.options.rotating||e.options.zooming||t||I?p.LINEAR:p.NEAREST,D=a.imageAtlasTexture.size}const k=Ht(a,1,e.transform.zoom),B=Rt(l.posMatrix,g,f,e.transform,k),F=Lt(l.posMatrix,g,f,e.transform,k),O=T&&c.hasTextData(),U="none"!==o.layout.get("icon-text-fit")&&O&&c.hasIconData();if(x){const t=e.style.terrain?(t,i)=>e.style.terrain.getElevation(l,t,i):null,i="map"===o.layout.get("text-rotation-alignment");Ot(c,l.posMatrix,e,s,B,F,g,h,i,t)}const N=e.translatePosMatrix(l.posMatrix,a,r,n),G=x||s&&T||U?io:B,Z=e.translatePosMatrix(F,a,r,n,!0),q=m&&0!==o.paint.get(s?"text-halo-width":"icon-halo-width").constantOr(1);let j;j=m?c.iconsInText?si(w.kind,C,v,g,e,N,G,Z,D,R):ai(w.kind,C,v,g,e,N,G,Z,s,D,!0):oi(w.kind,C,v,g,e,N,G,Z,s,D);const V={program:S,buffers:u,uniformValues:j,atlasTexture:P,atlasTextureIcon:L,atlasInterpolation:A,atlasInterpolationIcon:M,isSDF:m,hasHalo:q};if(y&&c.canOverlap){b=!0;const e=u.segments.get();for(const i of e)E.push({segments:new t.SegmentVector([i]),sortKey:i.sortKey,state:V,terrainData:z})}else E.push({segments:u.segments,sortKey:0,state:V,terrainData:z})}b&&E.sort(((t,e)=>t.sortKey-e.sortKey));for(const t of E){const i=t.state;if(m.activeTexture.set(p.TEXTURE0),i.atlasTexture.bind(i.atlasInterpolation,p.CLAMP_TO_EDGE),i.atlasTextureIcon&&(m.activeTexture.set(p.TEXTURE1),i.atlasTextureIcon&&i.atlasTextureIcon.bind(i.atlasInterpolationIcon,p.CLAMP_TO_EDGE)),i.isSDF){const a=i.uniformValues;i.hasHalo&&(a.u_is_halo=1,no(i.buffers,t.segments,o,e,i.program,w,u,d,a,t.terrainData)),a.u_is_halo=0}no(i.buffers,t.segments,o,e,i.program,w,u,d,i.uniformValues,t.terrainData)}}function no(t,e,i,o,a,s,r,n,l,c){const h=o.context;a.draw(h,h.gl.TRIANGLES,s,r,n,Qi.disabled,l,c,i.id,t.layoutVertexBuffer,t.indexBuffer,e,i.paint,o.transform.zoom,t.programConfigurations.get(i.id),t.dynamicLayoutVertexBuffer,t.opacityVertexBuffer)}function lo(t,e,i,o,a,s,r){const n=t.context.gl,l=i.paint.get("fill-pattern"),c=l&&l.constantOr(1),h=i.getCrossfadeParameters();let u,d,m,p,_;r?(d=c&&!i.getPaintProperty("fill-outline-color")?"fillOutlinePattern":"fillOutline",u=n.LINES):(d=c?"fillPattern":"fill",u=n.TRIANGLES);for(const f of o){const o=e.getTile(f);if(c&&!o.patternsLoaded())continue;const g=o.getBucket(i);if(!g)continue;const x=g.programConfigurations.get(i.id),v=t.useProgram(d,x),y=t.style.terrain&&t.style.terrain.getTerrainData(f);c&&(t.context.activeTexture.set(n.TEXTURE0),o.imageAtlasTexture.bind(n.LINEAR,n.CLAMP_TO_EDGE),x.updatePaintBuffers(h));const b=l.constantOr(null);if(b&&o.imageAtlas){const t=o.imageAtlas,e=t.patternPositions[b.to.toString()],i=t.patternPositions[b.from.toString()];e&&i&&x.setConstantPatternPositions(e,i)}const w=y?f:null,T=t.translatePosMatrix(w?w.posMatrix:f.posMatrix,o,i.paint.get("fill-translate"),i.paint.get("fill-translate-anchor"));if(r){p=g.indexBuffer2,_=g.segments2;const e=[n.drawingBufferWidth,n.drawingBufferHeight];m="fillOutlinePattern"===d&&c?Ze(T,t,h,o,e):Ge(T,e)}else p=g.indexBuffer,_=g.segments,m=c?Ne(T,t,h,o):Ue(T);v.draw(t.context,u,a,t.stencilModeForClipping(f),s,Qi.disabled,m,y,i.id,g.layoutVertexBuffer,p,_,i.paint,t.transform.zoom,x)}}function co(t,e,i,o,a,s,r){const n=t.context,l=n.gl,c=i.paint.get("fill-extrusion-pattern"),h=c.constantOr(1),u=i.getCrossfadeParameters(),d=i.paint.get("fill-extrusion-opacity");for(const m of o){const o=e.getTile(m),p=o.getBucket(i);if(!p)continue;const _=t.style.terrain&&t.style.terrain.getTerrainData(m),f=p.programConfigurations.get(i.id),g=t.useProgram(h?"fillExtrusionPattern":"fillExtrusion",f);h&&(t.context.activeTexture.set(l.TEXTURE0),o.imageAtlasTexture.bind(l.LINEAR,l.CLAMP_TO_EDGE),f.updatePaintBuffers(u));const x=c.constantOr(null);if(x&&o.imageAtlas){const t=o.imageAtlas,e=t.patternPositions[x.to.toString()],i=t.patternPositions[x.from.toString()];e&&i&&f.setConstantPatternPositions(e,i)}const v=t.translatePosMatrix(m.posMatrix,o,i.paint.get("fill-extrusion-translate"),i.paint.get("fill-extrusion-translate-anchor")),y=i.paint.get("fill-extrusion-vertical-gradient"),b=h?Oe(v,t,y,d,m,u,o):Fe(v,t,y,d);g.draw(n,n.gl.TRIANGLES,a,s,r,Qi.backCCW,b,_,i.id,p.layoutVertexBuffer,p.indexBuffer,p.segments,i.paint,t.transform.zoom,f,t.style.terrain&&p.centroidVertexBuffer)}}function ho(t,e,i,o,a,s,r){const n=t.context,l=n.gl,c=i.fbo;if(!c)return;const h=t.useProgram("hillshade"),u=t.style.terrain&&t.style.terrain.getTerrainData(e);n.activeTexture.set(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,c.colorAttachment.get()),h.draw(n,l.TRIANGLES,a,s,r,Qi.disabled,((t,e,i,o)=>{const a=i.paint.get("hillshade-shadow-color"),s=i.paint.get("hillshade-highlight-color"),r=i.paint.get("hillshade-accent-color");let n=i.paint.get("hillshade-illumination-direction")*(Math.PI/180);"viewport"===i.paint.get("hillshade-illumination-anchor")&&(n-=t.transform.angle);const l=!t.options.moving;return{u_matrix:o?o.posMatrix:t.transform.calculatePosMatrix(e.tileID.toUnwrapped(),l),u_image:0,u_latrange:We(0,e.tileID),u_light:[i.paint.get("hillshade-exaggeration"),n],u_shadow:a,u_highlight:s,u_accent:r}})(t,i,o,u?e:null),u,o.id,t.rasterBoundsBuffer,t.quadTriangleIndexBuffer,t.rasterBoundsSegments)}function uo(e,i,o,a,s,r){const n=e.context,l=n.gl,c=i.dem;if(c&&c.data){const h=c.dim,u=c.stride,d=c.getPixels();if(n.activeTexture.set(l.TEXTURE1),n.pixelStoreUnpackPremultiplyAlpha.set(!1),i.demTexture=i.demTexture||e.getTileTexture(u),i.demTexture){const t=i.demTexture;t.update(d,{premultiply:!1}),t.bind(l.NEAREST,l.CLAMP_TO_EDGE)}else i.demTexture=new B(n,d,l.RGBA,{premultiply:!1}),i.demTexture.bind(l.NEAREST,l.CLAMP_TO_EDGE);n.activeTexture.set(l.TEXTURE0);let m=i.fbo;if(!m){const t=new B(n,{width:h,height:h,data:null},l.RGBA);t.bind(l.LINEAR,l.CLAMP_TO_EDGE),m=i.fbo=n.createFramebuffer(h,h,!0),m.colorAttachment.set(t.texture)}n.bindFramebuffer.set(m.framebuffer),n.viewport.set([0,0,h,h]),e.useProgram("hillshadePrepare").draw(n,l.TRIANGLES,a,s,r,Qi.disabled,((e,i)=>{const o=i.stride,a=t.create();return t.ortho(a,0,t.EXTENT,-t.EXTENT,0,0,1),t.translate(a,a,[0,-t.EXTENT,0]),{u_matrix:a,u_image:1,u_dimension:[o,o],u_zoom:e.overscaledZ,u_unpack:i.getUnpackVector()}})(i.tileID,c),null,o.id,e.rasterBoundsBuffer,e.quadTriangleIndexBuffer,e.rasterBoundsSegments),i.needsHillshadePrepare=!1}}function mo(e,i,o,a,s,r){const n=a.paint.get("raster-fade-duration");if(!r&&n>0){const a=t.exported.now(),r=(a-e.timeAdded)/n,l=i?(a-i.timeAdded)/n:-1,c=o.getSource(),h=s.coveringZoomLevel({tileSize:c.tileSize,roundZoom:c.roundZoom}),u=!i||Math.abs(i.tileID.overscaledZ-h)>Math.abs(e.tileID.overscaledZ-h),d=u&&e.refreshedUponExpiration?1:t.clamp(u?r:1-l,0,1);return e.refreshedUponExpiration&&r>=1&&(e.refreshedUponExpiration=!1),i?{opacity:1,mix:1-d}:{opacity:d,mix:0}}return{opacity:1,mix:0}}const po=new t.Color(1,0,0,1),_o=new t.Color(0,1,0,1),fo=new t.Color(0,0,1,1),go=new t.Color(1,0,1,1),xo=new t.Color(0,1,1,1);function vo(t,e,i,o){bo(t,0,e+i/2,t.transform.width,i,o)}function yo(t,e,i,o){bo(t,e-i/2,0,i,t.transform.height,o)}function bo(t,e,i,o,a,s){const r=t.context,n=r.gl;n.enable(n.SCISSOR_TEST),n.scissor(e*t.pixelRatio,i*t.pixelRatio,o*t.pixelRatio,a*t.pixelRatio),r.clear({color:s}),n.disable(n.SCISSOR_TEST)}function wo(e,i,o){const a=e.context,s=a.gl,r=o.posMatrix,n=e.useProgram("debug"),l=Ki.disabled,c=Ji.disabled,h=e.colorModeForRenderPass(),u="$debug",d=e.style.terrain&&e.style.terrain.getTerrainData(o);a.activeTexture.set(s.TEXTURE0),e.emptyTexture.bind(s.LINEAR,s.CLAMP_TO_EDGE);const m=i.getTileByID(o.key).latestRawTileData,p=Math.floor((m&&m.byteLength||0)/1024),_=i.getTile(o).tileSize,f=512/Math.min(_,512)*(o.overscaledZ/e.transform.zoom)*.5;let g=o.canonical.toString();o.overscaledZ!==o.canonical.z&&(g+=` => ${o.overscaledZ}`),function(t,e){t.initDebugOverlayCanvas();const i=t.debugOverlayCanvas,o=t.context.gl,a=t.debugOverlayCanvas.getContext("2d");a.clearRect(0,0,i.width,i.height),a.shadowColor="white",a.shadowBlur=2,a.lineWidth=1.5,a.strokeStyle="white",a.textBaseline="top",a.font="bold 36px Open Sans, sans-serif",a.fillText(e,5,5),a.strokeText(e,5,5),t.debugOverlayTexture.update(i),t.debugOverlayTexture.bind(o.LINEAR,o.CLAMP_TO_EDGE)}(e,`${g} ${p}kb`),n.draw(a,s.TRIANGLES,l,c,Wi.alphaBlended,Qi.disabled,Ve(r,t.Color.transparent,f),null,u,e.debugBuffer,e.quadTriangleIndexBuffer,e.debugSegments),n.draw(a,s.LINE_STRIP,l,c,h,Qi.disabled,Ve(r,t.Color.red),d,u,e.debugBuffer,e.tileBorderIndexBuffer,e.debugSegments)}function To(t,e,i){const o=t.context,a=o.gl,s=t.colorModeForRenderPass(),r=new Ki(a.LEQUAL,Ki.ReadWrite,t.depthRangeFor3D),n=t.useProgram("terrain"),l=e.getTerrainMesh(),c=e.getTerrainData(i.tileID);o.bindFramebuffer.set(null),o.viewport.set([0,0,t.width,t.height]),o.activeTexture.set(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,e.getRTTFramebuffer().colorAttachment.get());const h=t.transform.calculatePosMatrix(i.tileID.toUnwrapped());n.draw(o,a.TRIANGLES,r,Ji.disabled,s,Qi.backCCW,{u_matrix:h,u_texture:0},c,"terrain",l.vertexBuffer,l.indexBuffer,l.segments)}function Eo(t,e,i,o){const a=t.context,s=i.tileSize*e.qualityFactor;i.textures[o]||(i.textures[o]=t.getTileTexture(s)||new B(a,{width:s,height:s,data:null},a.gl.RGBA),i.textures[o].bind(a.gl.LINEAR,a.gl.CLAMP_TO_EDGE),0===o&&e.sourceCache.renderHistory.push(i.tileID.key));const r=e.getRTTFramebuffer();r.colorAttachment.set(i.textures[o].texture),a.bindFramebuffer.set(r.framebuffer),a.viewport.set([0,0,s,s])}class Io{constructor(t){this._coordsDescendingInv={},this._coordsDescendingInvStr={},this.painter=t,this._renderToTexture={background:!0,fill:!0,line:!0,raster:!0},this._coordsDescendingInv={},this._coordsDescendingInvStr={},this._stacks=[],this._prevType=null,this._rerender={},this._renderableTiles=t.style.terrain.sourceCache.getRenderableTiles(),this._init()}_init(){const t=this.painter.style,e=t.terrain;for(const i in t.sourceCaches){this._coordsDescendingInv[i]={};const o=t.sourceCaches[i].getVisibleCoordinates();for(const t of o){const o=e.sourceCache.getTerrainCoords(t);for(const t in o)this._coordsDescendingInv[i][t]||(this._coordsDescendingInv[i][t]=[]),this._coordsDescendingInv[i][t].push(o[t])}}for(const e of t._order){const i=t._layers[e],o=i.source;if(this._renderToTexture[i.type]&&!this._coordsDescendingInvStr[o]){this._coordsDescendingInvStr[o]={};for(const t in this._coordsDescendingInv[o])this._coordsDescendingInvStr[o][t]=this._coordsDescendingInv[o][t].map((t=>t.key)).sort().join()}}return this._renderableTiles.forEach((t=>{for(const i in this._coordsDescendingInvStr){const o=this._coordsDescendingInvStr[i][t.tileID.key];o&&o!==t.textureCoords[i]&&t.clearTextures(this.painter),e.needsRerender(i,t.tileID)&&t.clearTextures(this.painter)}this._rerender[t.tileID.key]=!t.textures.length})),e.clearRerenderCache(),e.sourceCache.removeOutdated(this.painter),this}renderLayer(e){const i=e.type,o=this.painter,a=o.style._order,s=o.currentLayer,r=s+1===a.length;if(this._renderToTexture[i]&&(this._prevType&&this._renderToTexture[this._prevType]||this._stacks.push([]),this._prevType=i,this._stacks[this._stacks.length-1].push(a[s]),!r))return!0;if(this._renderToTexture[this._prevType]||"hillshade"===i||this._renderToTexture[i]&&r){this._prevType=i;const r=this._stacks.length-1,n=this._stacks[r]||[];for(const e of this._renderableTiles){if(Eo(o,o.style.terrain,e,r),this._rerender[e.tileID.key]){o.context.clear({color:t.Color.transparent});for(let t=0;t<n.length;t++){const i=o.style._layers[n[t]],a=i.source?this._coordsDescendingInv[i.source][e.tileID.key]:[e.tileID];o._renderTileClippingMasks(i,a),o.renderLayer(o,o.style.sourceCaches[i.source],i,a),i.source&&(e.textureCoords[i.source]=this._coordsDescendingInvStr[i.source][e.tileID.key])}}To(o,o.style.terrain,e)}if("hillshade"===i){this._stacks.push([a[s]]);for(const i of this._renderableTiles){const a=this._coordsDescendingInv[e.source][i.tileID.key];Eo(o,o.style.terrain,i,this._stacks.length-1),o.context.clear({color:t.Color.transparent}),o._renderTileClippingMasks(e,a),o.renderLayer(o,o.style.sourceCaches[e.source],e,a),To(o,o.style.terrain,i)}return!0}return this._renderToTexture[i]}return!1}}const So={symbol:function(e,i,o,a,s){if("translucent"!==e.renderPass)return;const r=Ji.disabled,n=e.colorModeForRenderPass();o.layout.get("text-variable-anchor")&&function(e,i,o,a,s,r,n){const l=i.transform,c="map"===s,h="map"===r;for(const s of e){const e=a.getTile(s),r=e.getBucket(o);if(!r||!r.text||!r.text.segments.get().length)continue;const u=t.evaluateSizeForZoom(r.textSizeData,l.zoom),d=Ht(e,1,i.transform.zoom),m=Rt(s.posMatrix,h,c,i.transform,d),p="none"!==o.layout.get("icon-text-fit")&&r.hasIconData();if(u){const t=Math.pow(2,l.zoom-e.tileID.overscaledZ);ao(r,c,h,n,l,m,s.posMatrix,t,u,p,i.style.terrain?(t,e)=>i.style.terrain.getElevation(s,t,e):null)}}}(a,e,o,i,o.layout.get("text-rotation-alignment"),o.layout.get("text-pitch-alignment"),s),0!==o.paint.get("icon-opacity").constantOr(1)&&ro(e,i,o,a,!1,o.paint.get("icon-translate"),o.paint.get("icon-translate-anchor"),o.layout.get("icon-rotation-alignment"),o.layout.get("icon-pitch-alignment"),o.layout.get("icon-keep-upright"),r,n),0!==o.paint.get("text-opacity").constantOr(1)&&ro(e,i,o,a,!0,o.paint.get("text-translate"),o.paint.get("text-translate-anchor"),o.layout.get("text-rotation-alignment"),o.layout.get("text-pitch-alignment"),o.layout.get("text-keep-upright"),r,n),i.map.showCollisionBoxes&&(eo(e,i,o,a,o.paint.get("text-translate"),o.paint.get("text-translate-anchor"),!0),eo(e,i,o,a,o.paint.get("icon-translate"),o.paint.get("icon-translate-anchor"),!1))},circle:function(e,i,o,a){if("translucent"!==e.renderPass)return;const s=o.paint.get("circle-opacity"),r=o.paint.get("circle-stroke-width"),n=o.paint.get("circle-stroke-opacity"),l=!o.layout.get("circle-sort-key").isConstant();if(0===s.constantOr(1)&&(0===r.constantOr(1)||0===n.constantOr(1)))return;const c=e.context,h=c.gl,u=e.depthModeForSublayer(0,Ki.ReadOnly),d=Ji.disabled,m=e.colorModeForRenderPass(),p=[];for(let s=0;s<a.length;s++){const r=a[s],n=i.getTile(r),c=n.getBucket(o);if(!c)continue;const h=c.programConfigurations.get(o.id),u=e.useProgram("circle",h),d=c.layoutVertexBuffer,m=c.indexBuffer,_=e.style.terrain&&e.style.terrain.getTerrainData(r),f={programConfiguration:h,program:u,layoutVertexBuffer:d,indexBuffer:m,uniformValues:qe(e,r,n,o),terrainData:_};if(l){const e=c.segments.get();for(const i of e)p.push({segments:new t.SegmentVector([i]),sortKey:i.sortKey,state:f})}else p.push({segments:c.segments,sortKey:0,state:f})}l&&p.sort(((t,e)=>t.sortKey-e.sortKey));for(const t of p){const{programConfiguration:i,program:a,layoutVertexBuffer:s,indexBuffer:r,uniformValues:n,terrainData:l}=t.state;a.draw(c,h.TRIANGLES,u,d,m,Qi.disabled,n,l,o.id,s,r,t.segments,o.paint,e.transform.zoom,i)}},heatmap:function(e,i,o,a){if(0!==o.paint.get("heatmap-opacity"))if("offscreen"===e.renderPass){const s=e.context,r=s.gl,n=Ji.disabled,l=new Wi([r.ONE,r.ONE],t.Color.transparent,[!0,!0,!0,!0]);!function(t,e,i){const o=t.gl;t.activeTexture.set(o.TEXTURE1),t.viewport.set([0,0,e.width/4,e.height/4]);let a=i.heatmapFbo;if(a)o.bindTexture(o.TEXTURE_2D,a.colorAttachment.get()),t.bindFramebuffer.set(a.framebuffer);else{const s=o.createTexture();o.bindTexture(o.TEXTURE_2D,s),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MIN_FILTER,o.LINEAR),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MAG_FILTER,o.LINEAR),a=i.heatmapFbo=t.createFramebuffer(e.width/4,e.height/4,!1),function(t,e,i,o){const a=t.gl;a.texImage2D(a.TEXTURE_2D,0,a.RGBA,e.width/4,e.height/4,0,a.RGBA,t.extRenderToTextureHalfFloat?t.extTextureHalfFloat.HALF_FLOAT_OES:a.UNSIGNED_BYTE,null),o.colorAttachment.set(i)}(t,e,s,a)}}(s,e,o),s.clear({color:t.Color.transparent});for(let t=0;t<a.length;t++){const c=a[t];if(i.hasRenderableParent(c))continue;const h=i.getTile(c),u=h.getBucket(o);if(!u)continue;const d=u.programConfigurations.get(o.id),m=e.useProgram("heatmap",d),{zoom:p}=e.transform;m.draw(s,r.TRIANGLES,Ki.disabled,n,l,Qi.disabled,$e(c.posMatrix,h,p,o.paint.get("heatmap-intensity")),null,o.id,u.layoutVertexBuffer,u.indexBuffer,u.segments,o.paint,e.transform.zoom,d)}s.viewport.set([0,0,e.width,e.height])}else"translucent"===e.renderPass&&(e.context.setColorMode(e.colorModeForRenderPass()),function(e,i){const o=e.context,a=o.gl,s=i.heatmapFbo;if(!s)return;o.activeTexture.set(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,s.colorAttachment.get()),o.activeTexture.set(a.TEXTURE1);let r=i.colorRampTexture;r||(r=i.colorRampTexture=new B(o,i.colorRamp,a.RGBA)),r.bind(a.LINEAR,a.CLAMP_TO_EDGE),e.useProgram("heatmapTexture").draw(o,a.TRIANGLES,Ki.disabled,Ji.disabled,e.colorModeForRenderPass(),Qi.disabled,((e,i,o,a)=>{const s=t.create();t.ortho(s,0,e.width,e.height,0,0,1);const r=e.context.gl;return{u_matrix:s,u_world:[r.drawingBufferWidth,r.drawingBufferHeight],u_image:0,u_color_ramp:1,u_opacity:i.paint.get("heatmap-opacity")}})(e,i),null,i.id,e.viewportBuffer,e.quadTriangleIndexBuffer,e.viewportSegments,i.paint,e.transform.zoom)}(e,o))},line:function(e,i,o,a){if("translucent"!==e.renderPass)return;const s=o.paint.get("line-opacity"),r=o.paint.get("line-width");if(0===s.constantOr(1)||0===r.constantOr(1))return;const n=e.depthModeForSublayer(0,Ki.ReadOnly),l=e.colorModeForRenderPass(),c=o.paint.get("line-dasharray"),h=o.paint.get("line-pattern"),u=h.constantOr(1),d=o.paint.get("line-gradient"),m=o.getCrossfadeParameters(),p=u?"linePattern":c?"lineSDF":d?"lineGradient":"line",_=e.context,f=_.gl;let g=!0;for(const s of a){const a=i.getTile(s);if(u&&!a.patternsLoaded())continue;const r=a.getBucket(o);if(!r)continue;const x=r.programConfigurations.get(o.id),v=e.context.program.get(),y=e.useProgram(p,x),b=g||y.program!==v,w=e.style.terrain&&e.style.terrain.getTerrainData(s),T=h.constantOr(null);if(T&&a.imageAtlas){const t=a.imageAtlas,e=t.patternPositions[T.to.toString()],i=t.patternPositions[T.from.toString()];e&&i&&x.setConstantPatternPositions(e,i)}const E=w?s:null,I=u?Ye(e,a,o,m,E):c?Je(e,a,o,c,m,E):d?Ke(e,a,o,r.lineClipsArray.length,E):He(e,a,o,E);if(u)_.activeTexture.set(f.TEXTURE0),a.imageAtlasTexture.bind(f.LINEAR,f.CLAMP_TO_EDGE),x.updatePaintBuffers(m);else if(c&&(b||e.lineAtlas.dirty))_.activeTexture.set(f.TEXTURE0),e.lineAtlas.bind(_);else if(d){const a=r.gradients[o.id];let n=a.texture;if(o.gradientVersion!==a.version){let l=256;if(o.stepInterpolant){const o=i.getSource().maxzoom,a=s.canonical.z===o?Math.ceil(1<<e.transform.maxZoom-s.canonical.z):1;l=t.clamp(t.nextPowerOfTwo(r.maxLineLength/t.EXTENT*1024*a),256,_.maxTextureSize)}a.gradient=t.renderColorRamp({expression:o.gradientExpression(),evaluationKey:"lineProgress",resolution:l,image:a.gradient||void 0,clips:r.lineClipsArray}),a.texture?a.texture.update(a.gradient):a.texture=new B(_,a.gradient,f.RGBA),a.version=o.gradientVersion,n=a.texture}_.activeTexture.set(f.TEXTURE0),n.bind(o.stepInterpolant?f.NEAREST:f.LINEAR,f.CLAMP_TO_EDGE)}y.draw(_,f.TRIANGLES,n,e.stencilModeForClipping(s),l,Qi.disabled,I,w,o.id,r.layoutVertexBuffer,r.indexBuffer,r.segments,o.paint,e.transform.zoom,x,r.layoutVertexBuffer2),g=!1}},fill:function(e,i,o,a){const s=o.paint.get("fill-color"),r=o.paint.get("fill-opacity");if(0===r.constantOr(1))return;const n=e.colorModeForRenderPass(),l=o.paint.get("fill-pattern"),c=e.opaquePassEnabledForLayer()&&!l.constantOr(1)&&1===s.constantOr(t.Color.transparent).a&&1===r.constantOr(0)?"opaque":"translucent";if(e.renderPass===c){const t=e.depthModeForSublayer(1,"opaque"===e.renderPass?Ki.ReadWrite:Ki.ReadOnly);lo(e,i,o,a,t,n,!1)}if("translucent"===e.renderPass&&o.paint.get("fill-antialias")){const t=e.depthModeForSublayer(o.getPaintProperty("fill-outline-color")?2:0,Ki.ReadOnly);lo(e,i,o,a,t,n,!0)}},"fill-extrusion":function(t,e,i,o){const a=i.paint.get("fill-extrusion-opacity");if(0!==a&&"translucent"===t.renderPass){const s=new Ki(t.context.gl.LEQUAL,Ki.ReadWrite,t.depthRangeFor3D);if(1!==a||i.paint.get("fill-extrusion-pattern").constantOr(1))co(t,e,i,o,s,Ji.disabled,Wi.disabled),co(t,e,i,o,s,t.stencilModeFor3D(),t.colorModeForRenderPass());else{const a=t.colorModeForRenderPass();co(t,e,i,o,s,Ji.disabled,a)}}},hillshade:function(t,e,i,o){if("offscreen"!==t.renderPass&&"translucent"!==t.renderPass)return;const a=t.context,s=t.depthModeForSublayer(0,Ki.ReadOnly),r=t.colorModeForRenderPass(),[n,l]="translucent"===t.renderPass?t.stencilConfigForOverlap(o):[{},o];for(const o of l){const a=e.getTile(o);void 0!==a.needsHillshadePrepare&&a.needsHillshadePrepare&&"offscreen"===t.renderPass?uo(t,a,i,s,Ji.disabled,r):"translucent"===t.renderPass&&ho(t,o,a,i,s,n[o.overscaledZ],r)}a.viewport.set([0,0,t.width,t.height])},raster:function(t,e,i,o){if("translucent"!==t.renderPass)return;if(0===i.paint.get("raster-opacity"))return;if(!o.length)return;const a=t.context,s=a.gl,r=e.getSource(),n=t.useProgram("raster"),l=t.colorModeForRenderPass(),[c,h]=r instanceof it?[{},o]:t.stencilConfigForOverlap(o),u=h[h.length-1].overscaledZ,d=!t.options.moving;for(const o of h){const h=t.depthModeForSublayer(o.overscaledZ-u,1===i.paint.get("raster-opacity")?Ki.ReadWrite:Ki.ReadOnly,s.LESS),m=e.getTile(o);m.registerFadeDuration(i.paint.get("raster-fade-duration"));const p=e.findLoadedParent(o,0),_=mo(m,p,e,i,t.transform,t.style.terrain);let f,g;const x="nearest"===i.paint.get("raster-resampling")?s.NEAREST:s.LINEAR;a.activeTexture.set(s.TEXTURE0),m.texture.bind(x,s.CLAMP_TO_EDGE,s.LINEAR_MIPMAP_NEAREST),a.activeTexture.set(s.TEXTURE1),p?(p.texture.bind(x,s.CLAMP_TO_EDGE,s.LINEAR_MIPMAP_NEAREST),f=Math.pow(2,p.tileID.overscaledZ-m.tileID.overscaledZ),g=[m.tileID.canonical.x*f%1,m.tileID.canonical.y*f%1]):m.texture.bind(x,s.CLAMP_TO_EDGE,s.LINEAR_MIPMAP_NEAREST);const v=t.style.terrain&&t.style.terrain.getTerrainData(o),y=v?o:null,b=y?y.posMatrix:t.transform.calculatePosMatrix(o.toUnwrapped(),d),w=ei(b,g||[0,0],f||1,_,i);r instanceof it?n.draw(a,s.TRIANGLES,h,Ji.disabled,l,Qi.disabled,w,v,i.id,r.boundsBuffer,t.quadTriangleIndexBuffer,r.boundsSegments):n.draw(a,s.TRIANGLES,h,c[o.overscaledZ],l,Qi.disabled,w,v,i.id,t.rasterBoundsBuffer,t.quadTriangleIndexBuffer,t.rasterBoundsSegments)}},background:function(t,e,i,o){const a=i.paint.get("background-color"),s=i.paint.get("background-opacity");if(0===s)return;const r=t.context,n=r.gl,l=t.transform,c=l.tileSize,h=i.paint.get("background-pattern");if(t.isPatternMissing(h))return;const u=!h&&1===a.a&&1===s&&t.opaquePassEnabledForLayer()?"opaque":"translucent";if(t.renderPass!==u)return;const d=Ji.disabled,m=t.depthModeForSublayer(0,"opaque"===u?Ki.ReadWrite:Ki.ReadOnly),p=t.colorModeForRenderPass(),_=t.useProgram(h?"backgroundPattern":"background"),f=o||l.coveringTiles({tileSize:c,terrain:t.style.terrain});h&&(r.activeTexture.set(n.TEXTURE0),t.imageManager.bind(t.context));const g=i.getCrossfadeParameters();for(const e of f){const l=o?e.posMatrix:t.transform.calculatePosMatrix(e.toUnwrapped()),u=h?ni(l,s,t,h,{tileID:e,tileSize:c},g):ri(l,s,a),f=t.style.terrain&&t.style.terrain.getTerrainData(e);_.draw(r,n.TRIANGLES,m,d,p,Qi.disabled,u,f,i.id,t.tileExtentBuffer,t.quadTriangleIndexBuffer,t.tileExtentSegments)}},debug:function(t,e,i){for(let o=0;o<i.length;o++)wo(t,e,i[o])},custom:function(t,e,i){const o=t.context,a=i.implementation;if("offscreen"===t.renderPass){const e=a.prerender;e&&(t.setCustomLayerDefaults(),o.setColorMode(t.colorModeForRenderPass()),e.call(a,o.gl,t.transform.customLayerMatrix()),o.setDirty(),t.setBaseState())}else if("translucent"===t.renderPass){t.setCustomLayerDefaults(),o.setColorMode(t.colorModeForRenderPass()),o.setStencilMode(Ji.disabled);const e="3d"===a.renderingMode?new Ki(t.context.gl.LEQUAL,Ki.ReadWrite,t.depthRangeFor3D):t.depthModeForSublayer(0,Ki.ReadOnly);o.setDepthMode(e),a.render(o.gl,t.transform.customLayerMatrix()),o.setDirty(),t.setBaseState(),o.bindFramebuffer.set(null)}}};class Co{constructor(e,i){this.context=new Hi(e),this.transform=i,this._tileTextures={},this.terrainFacilitator={dirty:!0,matrix:t.create(),renderTime:0},this.setup(),this.numSublayers=dt.maxUnderzooming+dt.maxOverzooming+1,this.depthEpsilon=1/Math.pow(2,16),this.crossTileSymbolIndex=new be,this.gpuTimers={}}resize(t,e,i){if(this.width=t*i,this.height=e*i,this.pixelRatio=i,this.context.viewport.set([0,0,this.width,this.height]),this.style)for(const t of this.style._order)this.style._layers[t].resize()}setup(){const e=this.context,i=new t.PosArray;i.emplaceBack(0,0),i.emplaceBack(t.EXTENT,0),i.emplaceBack(0,t.EXTENT),i.emplaceBack(t.EXTENT,t.EXTENT),this.tileExtentBuffer=e.createVertexBuffer(i,we.members),this.tileExtentSegments=t.SegmentVector.simpleSegment(0,0,4,2);const o=new t.PosArray;o.emplaceBack(0,0),o.emplaceBack(t.EXTENT,0),o.emplaceBack(0,t.EXTENT),o.emplaceBack(t.EXTENT,t.EXTENT),this.debugBuffer=e.createVertexBuffer(o,we.members),this.debugSegments=t.SegmentVector.simpleSegment(0,0,4,5);const a=new t.RasterBoundsArray;a.emplaceBack(0,0,0,0),a.emplaceBack(t.EXTENT,0,t.EXTENT,0),a.emplaceBack(0,t.EXTENT,0,t.EXTENT),a.emplaceBack(t.EXTENT,t.EXTENT,t.EXTENT,t.EXTENT),this.rasterBoundsBuffer=e.createVertexBuffer(a,et.members),this.rasterBoundsSegments=t.SegmentVector.simpleSegment(0,0,4,2);const s=new t.PosArray;s.emplaceBack(0,0),s.emplaceBack(1,0),s.emplaceBack(0,1),s.emplaceBack(1,1),this.viewportBuffer=e.createVertexBuffer(s,we.members),this.viewportSegments=t.SegmentVector.simpleSegment(0,0,4,2);const r=new t.LineStripIndexArray;r.emplaceBack(0),r.emplaceBack(1),r.emplaceBack(3),r.emplaceBack(2),r.emplaceBack(0),this.tileBorderIndexBuffer=e.createIndexBuffer(r);const n=new t.TriangleIndexArray;n.emplaceBack(0,1,2),n.emplaceBack(2,1,3),this.quadTriangleIndexBuffer=e.createIndexBuffer(n),this.emptyTexture=new B(e,{width:1,height:1,data:new Uint8Array([0,0,0,0])},e.gl.RGBA);const l=this.context.gl;this.stencilClearMode=new Ji({func:l.ALWAYS,mask:0},0,255,l.ZERO,l.ZERO,l.ZERO)}clearStencil(){const e=this.context,i=e.gl;this.nextStencilID=1,this.currentStencilSource=void 0;const o=t.create();t.ortho(o,0,this.width,this.height,0,0,1),t.scale(o,o,[i.drawingBufferWidth,i.drawingBufferHeight,0]),this.useProgram("clippingMask").draw(e,i.TRIANGLES,Ki.disabled,this.stencilClearMode,Wi.disabled,Qi.disabled,Xe(o),null,"$clipping",this.viewportBuffer,this.quadTriangleIndexBuffer,this.viewportSegments)}_renderTileClippingMasks(t,e){if(this.currentStencilSource===t.source||!t.isTileClipped()||!e||!e.length)return;this.currentStencilSource=t.source;const i=this.context,o=i.gl;this.nextStencilID+e.length>256&&this.clearStencil(),i.setColorMode(Wi.disabled),i.setDepthMode(Ki.disabled);const a=this.useProgram("clippingMask");this._tileClippingMaskIDs={};for(const t of e){const e=this._tileClippingMaskIDs[t.key]=this.nextStencilID++,s=this.style.terrain&&this.style.terrain.getTerrainData(t);a.draw(i,o.TRIANGLES,Ki.disabled,new Ji({func:o.ALWAYS,mask:0},e,255,o.KEEP,o.KEEP,o.REPLACE),Wi.disabled,Qi.disabled,Xe(t.posMatrix),s,"$clipping",this.tileExtentBuffer,this.quadTriangleIndexBuffer,this.tileExtentSegments)}}stencilModeFor3D(){this.currentStencilSource=void 0,this.nextStencilID+1>256&&this.clearStencil();const t=this.nextStencilID++,e=this.context.gl;return new Ji({func:e.NOTEQUAL,mask:255},t,255,e.KEEP,e.KEEP,e.REPLACE)}stencilModeForClipping(t){const e=this.context.gl;return new Ji({func:e.EQUAL,mask:255},this._tileClippingMaskIDs[t.key],0,e.KEEP,e.KEEP,e.REPLACE)}stencilConfigForOverlap(t){const e=this.context.gl,i=t.sort(((t,e)=>e.overscaledZ-t.overscaledZ)),o=i[i.length-1].overscaledZ,a=i[0].overscaledZ-o+1;if(a>1){this.currentStencilSource=void 0,this.nextStencilID+a>256&&this.clearStencil();const t={};for(let i=0;i<a;i++)t[i+o]=new Ji({func:e.GEQUAL,mask:255},i+this.nextStencilID,255,e.KEEP,e.KEEP,e.REPLACE);return this.nextStencilID+=a,[t,i]}return[{[o]:Ji.disabled},i]}colorModeForRenderPass(){const e=this.context.gl;if(this._showOverdrawInspector){const i=1/8;return new Wi([e.CONSTANT_COLOR,e.ONE],new t.Color(i,i,i,0),[!0,!0,!0,!0])}return"opaque"===this.renderPass?Wi.unblended:Wi.alphaBlended}depthModeForSublayer(t,e,i){if(!this.opaquePassEnabledForLayer())return Ki.disabled;const o=1-((1+this.currentLayer)*this.numSublayers+t)*this.depthEpsilon;return new Ki(i||this.context.gl.LEQUAL,e,[o,o])}opaquePassEnabledForLayer(){return this.currentLayer<this.opaquePassCutoff}render(e,i){this.style=e,this.options=i,this.lineAtlas=e.lineAtlas,this.imageManager=e.imageManager,this.glyphManager=e.glyphManager,this.symbolFadeChange=e.placement.symbolFadeChange(t.exported.now()),this.imageManager.beginFrame();const o=this.style._order,a=this.style.sourceCaches,s=this.style.terrain&&new Io(this);for(const t in a){const e=a[t];(null==e?void 0:e.used)&&e.prepare(this.context)}const r={},n={},l={};for(const t in a){const e=a[t];r[t]=e.getVisibleCoordinates(),n[t]=r[t].slice().reverse(),l[t]=e.getVisibleCoordinates(!0).reverse()}this.opaquePassCutoff=1/0;for(let t=0;t<o.length;t++)if(this.style._layers[o[t]].is3D()){this.opaquePassCutoff=t;break}if(s){this.opaquePassCutoff=0;const e=this.style.terrain.sourceCache.tilesAfterTime(this.terrainFacilitator.renderTime);(this.terrainFacilitator.dirty||!t.equals(this.terrainFacilitator.matrix,this.transform.projMatrix)||e.length)&&(t.copy(this.terrainFacilitator.matrix,this.transform.projMatrix),this.terrainFacilitator.renderTime=Date.now(),this.terrainFacilitator.dirty=!1,function(e,i){const o=e.context,a=o.gl,s=Wi.unblended,r=new Ki(a.LEQUAL,Ki.ReadWrite,[0,1]),n=i.getTerrainMesh(),l=i.sourceCache.getRenderableTiles(),c=e.useProgram("terrainDepth");o.bindFramebuffer.set(i.getFramebuffer("depth").framebuffer),o.viewport.set([0,0,e.width/devicePixelRatio,e.height/devicePixelRatio]),o.clear({color:t.Color.transparent,depth:1});for(const t of l){const l=i.getTerrainData(t.tileID),h=e.transform.calculatePosMatrix(t.tileID.toUnwrapped());c.draw(o,a.TRIANGLES,r,Ji.disabled,s,Qi.backCCW,{u_matrix:h},l,"terrain",n.vertexBuffer,n.indexBuffer,n.segments)}o.bindFramebuffer.set(null),o.viewport.set([0,0,e.width,e.height])}(this,this.style.terrain),function(e,i){const o=e.context,a=o.gl,s=Wi.unblended,r=new Ki(a.LEQUAL,Ki.ReadWrite,[0,1]),n=i.getTerrainMesh(),l=i.getCoordsTexture(),c=i.sourceCache.getRenderableTiles(),h=e.useProgram("terrainCoords");o.bindFramebuffer.set(i.getFramebuffer("coords").framebuffer),o.viewport.set([0,0,e.width/devicePixelRatio,e.height/devicePixelRatio]),o.clear({color:t.Color.transparent,depth:1}),i.coordsIndex=[];for(const t of c){const c=i.getTerrainData(t.tileID);o.activeTexture.set(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,l.texture);const u=e.transform.calculatePosMatrix(t.tileID.toUnwrapped());h.draw(o,a.TRIANGLES,r,Ji.disabled,s,Qi.backCCW,{u_matrix:u,u_terrain_coords_id:(255-i.coordsIndex.length)/255,u_texture:0},c,"terrain",n.vertexBuffer,n.indexBuffer,n.segments),i.coordsIndex.push(t.tileID.key)}o.bindFramebuffer.set(null),o.viewport.set([0,0,e.width,e.height])}(this,this.style.terrain))}this.renderPass="offscreen";for(const t of o){const e=this.style._layers[t];if(!e.hasOffscreenPass()||e.isHidden(this.transform.zoom))continue;const i=n[e.source];("custom"===e.type||i.length)&&this.renderLayer(this,a[e.source],e,i)}if(this.context.bindFramebuffer.set(null),this.context.clear({color:i.showOverdrawInspector?t.Color.black:t.Color.transparent,depth:1}),this.clearStencil(),this._showOverdrawInspector=i.showOverdrawInspector,this.depthRangeFor3D=[0,1-(e._order.length+2)*this.numSublayers*this.depthEpsilon],!s)for(this.renderPass="opaque",this.currentLayer=o.length-1;this.currentLayer>=0;this.currentLayer--){const t=this.style._layers[o[this.currentLayer]],e=a[t.source],i=r[t.source];this._renderTileClippingMasks(t,i),this.renderLayer(this,e,t,i)}for(this.renderPass="translucent",this.currentLayer=0;this.currentLayer<o.length;this.currentLayer++){const t=this.style._layers[o[this.currentLayer]],e=a[t.source];if(s&&s.renderLayer(t))continue;const i=("symbol"===t.type?l:n)[t.source];this._renderTileClippingMasks(t,r[t.source]),this.renderLayer(this,e,t,i)}if(this.options.showTileBoundaries){let t,e;Object.values(this.style._layers).forEach((i=>{i.source&&!i.isHidden(this.transform.zoom)&&(i.source!==(e&&e.id)&&(e=this.style.sourceCaches[i.source]),(!t||t.getSource().maxzoom<e.getSource().maxzoom)&&(t=e))})),t&&So.debug(this,t,t.getVisibleCoordinates())}this.options.showPadding&&function(t){const e=t.transform.padding;vo(t,t.transform.height-(e.top||0),3,po),vo(t,e.bottom||0,3,_o),yo(t,e.left||0,3,fo),yo(t,t.transform.width-(e.right||0),3,go);const i=t.transform.centerPoint;!function(t,e,i,o){bo(t,e-1,i-10,2,20,o),bo(t,e-10,i-1,20,2,o)}(t,i.x,t.transform.height-i.y,xo)}(this),this.context.setDefault()}renderLayer(t,e,i,o){i.isHidden(this.transform.zoom)||("background"===i.type||"custom"===i.type||(o||[]).length)&&(this.id=i.id,this.gpuTimingStart(i),So[i.type](t,e,i,o,this.style.placement.variableOffsets),this.gpuTimingEnd())}gpuTimingStart(t){if(!this.options.gpuTiming)return;const e=this.context.extTimerQuery;let i=this.gpuTimers[t.id];i||(i=this.gpuTimers[t.id]={calls:0,cpuTime:0,query:e.createQueryEXT()}),i.calls++,e.beginQueryEXT(e.TIME_ELAPSED_EXT,i.query)}gpuTimingEnd(){if(!this.options.gpuTiming)return;const t=this.context.extTimerQuery;t.endQueryEXT(t.TIME_ELAPSED_EXT)}collectGpuTimers(){const t=this.gpuTimers;return this.gpuTimers={},t}queryGpuTimers(t){const e={};for(const i in t){const o=t[i],a=this.context.extTimerQuery,s=a.getQueryObjectEXT(o.query,a.QUERY_RESULT_EXT)/1e6;a.deleteQueryEXT(o.query),e[i]=s}return e}translatePosMatrix(e,i,o,a,s){if(!o[0]&&!o[1])return e;const r=s?"map"===a?this.transform.angle:0:"viewport"===a?-this.transform.angle:0;if(r){const t=Math.sin(r),e=Math.cos(r);o=[o[0]*e-o[1]*t,o[0]*t+o[1]*e]}const n=[s?o[0]:Ht(i,o[0],this.transform.zoom),s?o[1]:Ht(i,o[1],this.transform.zoom),0],l=new Float32Array(16);return t.translate(l,e,n),l}saveTileTexture(t){const e=this._tileTextures[t.size[0]];e?e.push(t):this._tileTextures[t.size[0]]=[t]}getTileTexture(t){const e=this._tileTextures[t];return e&&e.length>0?e.pop():null}isPatternMissing(t){if(!t)return!1;if(!t.from||!t.to)return!0;const e=this.imageManager.getPattern(t.from.toString()),i=this.imageManager.getPattern(t.to.toString());return!e||!i}useProgram(t,e){this.cache=this.cache||{};const i=t+(e?e.cacheKey:"")+(this._showOverdrawInspector?"/overdraw":"")+(this.style.terrain?"/terrain":"");return this.cache[i]||(this.cache[i]=new ke(this.context,t,Ae[t],e,li[t],this._showOverdrawInspector,this.style.terrain)),this.cache[i]}setCustomLayerDefaults(){this.context.unbindVAO(),this.context.cullFace.setDefault(),this.context.activeTexture.setDefault(),this.context.pixelStoreUnpack.setDefault(),this.context.pixelStoreUnpackPremultiplyAlpha.setDefault(),this.context.pixelStoreUnpackFlipY.setDefault()}setBaseState(){const t=this.context.gl;this.context.cullFace.set(!1),this.context.viewport.set([0,0,this.width,this.height]),this.context.blendEquation.set(t.FUNC_ADD)}initDebugOverlayCanvas(){null==this.debugOverlayCanvas&&(this.debugOverlayCanvas=document.createElement("canvas"),this.debugOverlayCanvas.width=512,this.debugOverlayCanvas.height=512,this.debugOverlayTexture=new B(this.context,this.debugOverlayCanvas,this.context.gl.RGBA))}destroy(){this.emptyTexture.destroy(),this.debugOverlayTexture&&this.debugOverlayTexture.destroy()}}class zo{constructor(t,e){this.points=t,this.planes=e}static fromInvProjectionMatrix(e,i,o){const a=Math.pow(2,o),s=[[-1,1,-1,1],[1,1,-1,1],[1,-1,-1,1],[-1,-1,-1,1],[-1,1,1,1],[1,1,1,1],[1,-1,1,1],[-1,-1,1,1]].map((o=>{const s=1/(o=t.transformMat4([],o,e))[3]/i*a;return t.mul$1(o,o,[s,s,1/o[3],s])})),r=[[0,1,2],[6,5,4],[0,3,7],[2,1,5],[3,2,6],[0,4,5]].map((t=>{const e=function(t,e){var i=e[0],o=e[1],a=e[2],s=i*i+o*o+a*a;return s>0&&(s=1/Math.sqrt(s)),t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}([],function(t,e,i){var o=e[0],a=e[1],s=e[2],r=i[0],n=i[1],l=i[2];return t[0]=a*l-s*n,t[1]=s*r-o*l,t[2]=o*n-a*r,t}([],L([],s[t[0]],s[t[1]]),L([],s[t[2]],s[t[1]]))),i=-((o=e)[0]*(a=s[t[1]])[0]+o[1]*a[1]+o[2]*a[2]);var o,a;return e.concat(i)}));return new zo(s,r)}}class Do{constructor(t,e){this.min=t,this.max=e,this.center=function(t,e,i){return t[0]=.5*e[0],t[1]=.5*e[1],t[2]=.5*e[2],t}([],function(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}([],this.min,this.max))}quadrant(t){const e=[t%2==0,t<2],i=M(this.min),o=M(this.max);for(let t=0;t<e.length;t++)i[t]=e[t]?this.min[t]:this.center[t],o[t]=e[t]?this.center[t]:this.max[t];return o[2]=this.max[2],new Do(i,o)}distanceX(t){return Math.max(Math.min(this.max[0],t[0]),this.min[0])-t[0]}distanceY(t){return Math.max(Math.min(this.max[1],t[1]),this.min[1])-t[1]}intersects(e){const i=[[this.min[0],this.min[1],this.min[2],1],[this.max[0],this.min[1],this.min[2],1],[this.max[0],this.max[1],this.min[2],1],[this.min[0],this.max[1],this.min[2],1],[this.min[0],this.min[1],this.max[2],1],[this.max[0],this.min[1],this.max[2],1],[this.max[0],this.max[1],this.max[2],1],[this.min[0],this.max[1],this.max[2],1]];let o=!0;for(let a=0;a<e.planes.length;a++){const s=e.planes[a];let r=0;for(let e=0;e<i.length;e++)t.dot(s,i[e])>=0&&r++;if(0===r)return 0;r!==i.length&&(o=!1)}if(o)return 2;for(let t=0;t<3;t++){let i=Number.MAX_VALUE,o=-Number.MAX_VALUE;for(let a=0;a<e.points.length;a++){const s=e.points[a][t]-this.min[t];i=Math.min(i,s),o=Math.max(o,s)}if(o<0||i>this.max[t]-this.min[t])return 0}return 1}}class Po{constructor(t=0,e=0,i=0,o=0){if(isNaN(t)||t<0||isNaN(e)||e<0||isNaN(i)||i<0||isNaN(o)||o<0)throw new Error("Invalid value for edge-insets, top, bottom, left and right must all be numbers");this.top=t,this.bottom=e,this.left=i,this.right=o}interpolate(e,i,o){return null!=i.top&&null!=e.top&&(this.top=t.number(e.top,i.top,o)),null!=i.bottom&&null!=e.bottom&&(this.bottom=t.number(e.bottom,i.bottom,o)),null!=i.left&&null!=e.left&&(this.left=t.number(e.left,i.left,o)),null!=i.right&&null!=e.right&&(this.right=t.number(e.right,i.right,o)),this}getCenter(e,i){const o=t.clamp((this.left+e-this.right)/2,0,e),a=t.clamp((this.top+i-this.bottom)/2,0,i);return new t.pointGeometry(o,a)}equals(t){return this.top===t.top&&this.bottom===t.bottom&&this.left===t.left&&this.right===t.right}clone(){return new Po(this.top,this.bottom,this.left,this.right)}toJSON(){return{top:this.top,bottom:this.bottom,left:this.left,right:this.right}}}class Ao{constructor(e,i,o,a,s){this.tileSize=512,this.maxValidLatitude=85.051129,this.freezeElevation=!1,this._renderWorldCopies=void 0===s||!!s,this._minZoom=e||0,this._maxZoom=i||22,this._minPitch=null==o?0:o,this._maxPitch=null==a?60:a,this.setMaxBounds(),this.width=0,this.height=0,this._center=new t.LngLat(0,0),this._elevation=0,this.zoom=0,this.angle=0,this._fov=.6435011087932844,this._pitch=0,this._unmodified=!0,this._edgeInsets=new Po,this._posMatrixCache={},this._alignedPosMatrixCache={}}clone(){const t=new Ao(this._minZoom,this._maxZoom,this._minPitch,this.maxPitch,this._renderWorldCopies);return t.tileSize=this.tileSize,t.latRange=this.latRange,t.width=this.width,t.height=this.height,t._center=this._center,t._elevation=this._elevation,t.zoom=this.zoom,t.angle=this.angle,t._fov=this._fov,t._pitch=this._pitch,t._unmodified=this._unmodified,t._edgeInsets=this._edgeInsets.clone(),t._calcMatrices(),t}get minZoom(){return this._minZoom}set minZoom(t){this._minZoom!==t&&(this._minZoom=t,this.zoom=Math.max(this.zoom,t))}get maxZoom(){return this._maxZoom}set maxZoom(t){this._maxZoom!==t&&(this._maxZoom=t,this.zoom=Math.min(this.zoom,t))}get minPitch(){return this._minPitch}set minPitch(t){this._minPitch!==t&&(this._minPitch=t,this.pitch=Math.max(this.pitch,t))}get maxPitch(){return this._maxPitch}set maxPitch(t){this._maxPitch!==t&&(this._maxPitch=t,this.pitch=Math.min(this.pitch,t))}get renderWorldCopies(){return this._renderWorldCopies}set renderWorldCopies(t){void 0===t?t=!0:null===t&&(t=!1),this._renderWorldCopies=t}get worldSize(){return this.tileSize*this.scale}get centerOffset(){return this.centerPoint._sub(this.size._div(2))}get size(){return new t.pointGeometry(this.width,this.height)}get bearing(){return-this.angle/Math.PI*180}set bearing(e){const i=-t.wrap(e,-180,180)*Math.PI/180;this.angle!==i&&(this._unmodified=!1,this.angle=i,this._calcMatrices(),this.rotationMatrix=function(){var e=new t.ARRAY_TYPE(4);return t.ARRAY_TYPE!=Float32Array&&(e[1]=0,e[2]=0),e[0]=1,e[3]=1,e}(),function(t,e,i){var o=e[0],a=e[1],s=e[2],r=e[3],n=Math.sin(i),l=Math.cos(i);t[0]=o*l+s*n,t[1]=a*l+r*n,t[2]=o*-n+s*l,t[3]=a*-n+r*l}(this.rotationMatrix,this.rotationMatrix,this.angle))}get pitch(){return this._pitch/Math.PI*180}set pitch(e){const i=t.clamp(e,this.minPitch,this.maxPitch)/180*Math.PI;this._pitch!==i&&(this._unmodified=!1,this._pitch=i,this._calcMatrices())}get fov(){return this._fov/Math.PI*180}set fov(t){t=Math.max(.01,Math.min(60,t)),this._fov!==t&&(this._unmodified=!1,this._fov=t/180*Math.PI,this._calcMatrices())}get zoom(){return this._zoom}set zoom(t){const e=Math.min(Math.max(t,this.minZoom),this.maxZoom);this._zoom!==e&&(this._unmodified=!1,this._zoom=e,this.scale=this.zoomScale(e),this.tileZoom=Math.floor(e),this.zoomFraction=e-this.tileZoom,this._constrain(),this._calcMatrices())}get center(){return this._center}set center(t){t.lat===this._center.lat&&t.lng===this._center.lng||(this._unmodified=!1,this._center=t,this._constrain(),this._calcMatrices())}get elevation(){return this._elevation}set elevation(t){t!==this._elevation&&(this._elevation=t,this._constrain(),this._calcMatrices())}get padding(){return this._edgeInsets.toJSON()}set padding(t){this._edgeInsets.equals(t)||(this._unmodified=!1,this._edgeInsets.interpolate(this._edgeInsets,t,1),this._calcMatrices())}get centerPoint(){return this._edgeInsets.getCenter(this.width,this.height)}isPaddingEqual(t){return this._edgeInsets.equals(t)}interpolatePadding(t,e,i){this._unmodified=!1,this._edgeInsets.interpolate(t,e,i),this._constrain(),this._calcMatrices()}coveringZoomLevel(t){const e=(t.roundZoom?Math.round:Math.floor)(this.zoom+this.scaleZoom(this.tileSize/t.tileSize));return Math.max(0,e)}getVisibleUnwrappedCoordinates(e){const i=[new t.UnwrappedTileID(0,e)];if(this._renderWorldCopies){const o=this.pointCoordinate(new t.pointGeometry(0,0)),a=this.pointCoordinate(new t.pointGeometry(this.width,0)),s=this.pointCoordinate(new t.pointGeometry(this.width,this.height)),r=this.pointCoordinate(new t.pointGeometry(0,this.height)),n=Math.floor(Math.min(o.x,a.x,s.x,r.x)),l=Math.floor(Math.max(o.x,a.x,s.x,r.x)),c=1;for(let o=n-c;o<=l+c;o++)0!==o&&i.push(new t.UnwrappedTileID(o,e))}return i}coveringTiles(e){let i=this.coveringZoomLevel(e);const o=i;if(void 0!==e.minzoom&&i<e.minzoom)return[];void 0!==e.maxzoom&&i>e.maxzoom&&(i=e.maxzoom);const a=this.pointCoordinate(this.getCameraPoint()),s=t.MercatorCoordinate.fromLngLat(this.center),r=Math.pow(2,i),n=[r*a.x,r*a.y,0],l=[r*s.x,r*s.y,0],c=zo.fromInvProjectionMatrix(this.invProjMatrix,this.worldSize,i);let h=e.minzoom||0;!e.terrain&&this.pitch<=60&&this._edgeInsets.top<.1&&(h=i);const u=e.terrain?2/Math.min(this.tileSize,e.tileSize)*this.tileSize:3,d=t=>({aabb:new Do([t*r,0,0],[(t+1)*r,r,0]),zoom:0,x:0,y:0,wrap:t,fullyVisible:!1}),m=[],p=[],_=i,f=e.reparseOverscaled?o:i;if(this._renderWorldCopies)for(let t=1;t<=3;t++)m.push(d(-t)),m.push(d(t));for(m.push(d(0));m.length>0;){const i=m.pop(),o=i.x,a=i.y;let s=i.fullyVisible;if(!s){const t=i.aabb.intersects(c);if(0===t)continue;s=2===t}const r=e.terrain?n:l,d=i.aabb.distanceX(r),g=i.aabb.distanceY(r),x=Math.max(Math.abs(d),Math.abs(g)),v=u+(1<<_-i.zoom)-2;if(i.zoom===_||x>v&&i.zoom>=h){const e=_-i.zoom,s=n[0]-.5-(o<<e),r=n[1]-.5-(a<<e);p.push({tileID:new t.OverscaledTileID(i.zoom===_?f:i.zoom,i.wrap,i.zoom,o,a),distanceSq:k([l[0]-.5-o,l[1]-.5-a]),tileDistanceToCamera:Math.sqrt(s*s+r*r)})}else for(let r=0;r<4;r++){const n=(o<<1)+r%2,l=(a<<1)+(r>>1),c=i.zoom+1;let h=i.aabb.quadrant(r);if(e.terrain){const o=new t.OverscaledTileID(c,i.wrap,c,n,l),a=e.terrain.getTerrainData(o).tile;let s=this.elevation,r=this.elevation;a&&a.dem&&(s=a.dem.min*e.terrain.exaggeration,r=a.dem.max*e.terrain.exaggeration),h=new Do([h.min[0],h.min[1],s],[h.max[0],h.max[1],r])}m.push({aabb:h,zoom:c,x:n,y:l,wrap:i.wrap,fullyVisible:s})}}return p.sort(((t,e)=>t.distanceSq-e.distanceSq)).map((t=>t.tileID))}resize(t,e){this.width=t,this.height=e,this.pixelsToGLUnits=[2/t,-2/e],this._constrain(),this._calcMatrices()}get unmodified(){return this._unmodified}zoomScale(t){return Math.pow(2,t)}scaleZoom(t){return Math.log(t)/Math.LN2}project(e){const i=t.clamp(e.lat,-this.maxValidLatitude,this.maxValidLatitude);return new t.pointGeometry(t.mercatorXfromLng(e.lng)*this.worldSize,t.mercatorYfromLat(i)*this.worldSize)}unproject(e){return new t.MercatorCoordinate(e.x/this.worldSize,e.y/this.worldSize).toLngLat()}get point(){return this.project(this.center)}updateElevation(t){this.freezeElevation||(this.elevation=t?this.getElevation(this._center,t):0)}getElevation(e,i){const o=t.MercatorCoordinate.fromLngLat(e),a=(1<<this.tileZoom)*t.EXTENT,s=o.x*a,r=o.y*a,n=Math.floor(s/t.EXTENT),l=Math.floor(r/t.EXTENT),c=new t.OverscaledTileID(this.tileZoom,0,this.tileZoom,n,l);return i.getElevation(c,s%t.EXTENT,r%t.EXTENT,t.EXTENT)}getCameraPosition(){return{lngLat:this.pointLocation(this.getCameraPoint()),altitude:Math.cos(this._pitch)*this.cameraToCenterDistance/this._pixelPerMeter+this.elevation}}recalculateZoom(e){const i=this.pointLocation(this.centerPoint,e),o=this.getElevation(i,e);if(!(this.elevation-o))return;const a=this.getCameraPosition(),s=t.MercatorCoordinate.fromLngLat(a.lngLat,a.altitude),r=t.MercatorCoordinate.fromLngLat(i,o),n=s.x-r.x,l=s.y-r.y,c=s.z-r.z,h=Math.sqrt(n*n+l*l+c*c),u=this.scaleZoom(this.cameraToCenterDistance/h/this.tileSize);this._elevation=o,this._center=i,this.zoom=u}setLocationAtPoint(e,i){const o=this.pointCoordinate(i),a=this.pointCoordinate(this.centerPoint),s=this.locationCoordinate(e),r=new t.MercatorCoordinate(s.x-(o.x-a.x),s.y-(o.y-a.y));this.center=this.coordinateLocation(r),this._renderWorldCopies&&(this.center=this.center.wrap())}locationPoint(t,e){return e?this.coordinatePoint(this.locationCoordinate(t),this.getElevation(t,e),this.pixelMatrix3D):this.coordinatePoint(this.locationCoordinate(t))}pointLocation(t,e){return this.coordinateLocation(this.pointCoordinate(t,e))}locationCoordinate(e){return t.MercatorCoordinate.fromLngLat(e)}coordinateLocation(t){return t&&t.toLngLat()}pointCoordinate(e,i){if(i){const t=i.pointCoordinate(e);if(null!=t)return t}const o=[e.x,e.y,0,1],a=[e.x,e.y,1,1];t.transformMat4(o,o,this.pixelMatrixInverse),t.transformMat4(a,a,this.pixelMatrixInverse);const s=o[3],r=a[3],n=o[1]/s,l=a[1]/r,c=o[2]/s,h=a[2]/r,u=c===h?0:(0-c)/(h-c);return new t.MercatorCoordinate(t.number(o[0]/s,a[0]/r,u)/this.worldSize,t.number(n,l,u)/this.worldSize)}coordinatePoint(e,i=0,o=this.pixelMatrix){const a=[e.x*this.worldSize,e.y*this.worldSize,i,1];return t.transformMat4(a,a,o),new t.pointGeometry(a[0]/a[3],a[1]/a[3])}getBounds(){const e=Math.max(0,this.height/2-this.getHorizon());return(new t.LngLatBounds).extend(this.pointLocation(new t.pointGeometry(0,e))).extend(this.pointLocation(new t.pointGeometry(this.width,e))).extend(this.pointLocation(new t.pointGeometry(this.width,this.height))).extend(this.pointLocation(new t.pointGeometry(0,this.height)))}getMaxBounds(){return this.latRange&&2===this.latRange.length&&this.lngRange&&2===this.lngRange.length?new t.LngLatBounds([this.lngRange[0],this.latRange[0]],[this.lngRange[1],this.latRange[1]]):null}getHorizon(){return Math.tan(Math.PI/2-this._pitch)*this.cameraToCenterDistance*.85}setMaxBounds(t){t?(this.lngRange=[t.getWest(),t.getEast()],this.latRange=[t.getSouth(),t.getNorth()],this._constrain()):(this.lngRange=null,this.latRange=[-this.maxValidLatitude,this.maxValidLatitude])}calculatePosMatrix(e,i=!1){const o=e.key,a=i?this._alignedPosMatrixCache:this._posMatrixCache;if(a[o])return a[o];const s=e.canonical,r=this.worldSize/this.zoomScale(s.z),n=s.x+Math.pow(2,s.z)*e.wrap,l=t.identity(new Float64Array(16));return t.translate(l,l,[n*r,s.y*r,0]),t.scale(l,l,[r/t.EXTENT,r/t.EXTENT,1]),t.multiply(l,i?this.alignedProjMatrix:this.projMatrix,l),a[o]=new Float32Array(l),a[o]}customLayerMatrix(){return this.mercatorMatrix.slice()}_constrain(){if(!this.center||!this.width||!this.height||this._constraining)return;this._constraining=!0;let e,i,o,a,s=-90,r=90,n=-180,l=180;const c=this.size,h=this._unmodified;if(this.latRange){const i=this.latRange;s=t.mercatorYfromLat(i[1])*this.worldSize,r=t.mercatorYfromLat(i[0])*this.worldSize,e=r-s<c.y?c.y/(r-s):0}if(this.lngRange){const e=this.lngRange;n=t.mercatorXfromLng(e[0])*this.worldSize,l=t.mercatorXfromLng(e[1])*this.worldSize,i=l-n<c.x?c.x/(l-n):0}const u=this.point,d=Math.max(i||0,e||0);if(d)return this.center=this.unproject(new t.pointGeometry(i?(l+n)/2:u.x,e?(r+s)/2:u.y)),this.zoom+=this.scaleZoom(d),this._unmodified=h,void(this._constraining=!1);if(this.latRange){const t=u.y,e=c.y/2;t-e<s&&(a=s+e),t+e>r&&(a=r-e)}if(this.lngRange){const t=u.x,e=c.x/2;t-e<n&&(o=n+e),t+e>l&&(o=l-e)}void 0===o&&void 0===a||(this.center=this.unproject(new t.pointGeometry(void 0!==o?o:u.x,void 0!==a?a:u.y))),this._unmodified=h,this._constraining=!1}_calcMatrices(){if(!this.height)return;const e=this.centerOffset,i=this.point.x,o=this.point.y;this.cameraToCenterDistance=.5/Math.tan(this._fov/2)*this.height,this._pixelPerMeter=t.mercatorZfromAltitude(1,this.center.lat)*this.worldSize;let a=t.identity(new Float64Array(16));t.scale(a,a,[this.width/2,-this.height/2,1]),t.translate(a,a,[1,-1,0]),this.labelPlaneMatrix=a,a=t.identity(new Float64Array(16)),t.scale(a,a,[1,-1,1]),t.translate(a,a,[-1,-1,0]),t.scale(a,a,[2/this.width,2/this.height,1]),this.glCoordMatrix=a,this.cameraToSeaLevelDistance=this.cameraToCenterDistance+this._elevation*this._pixelPerMeter/Math.cos(this._pitch);const s=Math.PI/2+this._pitch,r=this._fov*(.5+e.y/this.height),n=Math.sin(r)*this.cameraToSeaLevelDistance/Math.sin(t.clamp(Math.PI-s-r,.01,Math.PI-.01)),l=this.getHorizon(),c=2*Math.atan(l/this.cameraToCenterDistance)*(.5+e.y/(2*l)),h=Math.sin(c)*this.cameraToSeaLevelDistance/Math.sin(t.clamp(Math.PI-s-c,.01,Math.PI-.01)),u=Math.cos(Math.PI/2-this._pitch)*n+this.cameraToSeaLevelDistance,d=Math.cos(Math.PI/2-this._pitch)*h+this.cameraToSeaLevelDistance,m=1.01*Math.min(u,d),p=this.height/50;a=new Float64Array(16),t.perspective(a,this._fov,this.width/this.height,p,m),a[8]=2*-e.x/this.width,a[9]=2*e.y/this.height,t.scale(a,a,[1,-1,1]),t.translate(a,a,[0,0,-this.cameraToCenterDistance]),t.rotateX(a,a,this._pitch),t.rotateZ(a,a,this.angle),t.translate(a,a,[-i,-o,0]),this.mercatorMatrix=t.scale([],a,[this.worldSize,this.worldSize,this.worldSize]),t.scale(a,a,[1,1,this._pixelPerMeter]),this.pixelMatrix=t.multiply(new Float64Array(16),this.labelPlaneMatrix,a),t.translate(a,a,[0,0,-this.elevation]),this.projMatrix=a,this.invProjMatrix=t.invert([],a),this.pixelMatrix3D=t.multiply(new Float64Array(16),this.labelPlaneMatrix,a);const _=this.width%2/2,f=this.height%2/2,g=Math.cos(this.angle),x=Math.sin(this.angle),v=i-Math.round(i)+g*_+x*f,y=o-Math.round(o)+g*f+x*_,b=new Float64Array(a);if(t.translate(b,b,[v>.5?v-1:v,y>.5?y-1:y,0]),this.alignedProjMatrix=b,a=t.invert(new Float64Array(16),this.pixelMatrix),!a)throw new Error("failed to invert matrix");this.pixelMatrixInverse=a,this._posMatrixCache={},this._alignedPosMatrixCache={}}maxPitchScaleFactor(){if(!this.pixelMatrixInverse)return 1;const e=this.pointCoordinate(new t.pointGeometry(0,0)),i=[e.x*this.worldSize,e.y*this.worldSize,0,1];return t.transformMat4(i,i,this.pixelMatrix)[3]/this.cameraToCenterDistance}getCameraPoint(){const e=Math.tan(this._pitch)*(this.cameraToCenterDistance||1);return this.centerPoint.add(new t.pointGeometry(0,e))}getCameraQueryGeometry(e){const i=this.getCameraPoint();if(1===e.length)return[e[0],i];{let o=i.x,a=i.y,s=i.x,r=i.y;for(const t of e)o=Math.min(o,t.x),a=Math.min(a,t.y),s=Math.max(s,t.x),r=Math.max(r,t.y);return[new t.pointGeometry(o,a),new t.pointGeometry(s,a),new t.pointGeometry(s,r),new t.pointGeometry(o,r),new t.pointGeometry(o,a)]}}}class Mo{constructor(e){this._hashName=e&&encodeURIComponent(e),t.bindAll(["_getCurrentHash","_onHashChange","_updateHash"],this),this._updateHash=function(t,e){let i=!1,o=null;const a=()=>{o=null,i&&(t(),o=setTimeout(a,300),i=!1)};return()=>(i=!0,o||a(),o)}(this._updateHashUnthrottled.bind(this))}addTo(t){return this._map=t,addEventListener("hashchange",this._onHashChange,!1),this._map.on("moveend",this._updateHash),this}remove(){return removeEventListener("hashchange",this._onHashChange,!1),this._map.off("moveend",this._updateHash),clearTimeout(this._updateHash()),delete this._map,this}getHashString(t){const e=this._map.getCenter(),i=Math.round(100*this._map.getZoom())/100,o=Math.ceil((i*Math.LN2+Math.log(512/360/.5))/Math.LN10),a=Math.pow(10,o),s=Math.round(e.lng*a)/a,r=Math.round(e.lat*a)/a,n=this._map.getBearing(),l=this._map.getPitch();let c="";if(c+=t?`/${s}/${r}/${i}`:`${i}/${r}/${s}`,(n||l)&&(c+="/"+Math.round(10*n)/10),l&&(c+=`/${Math.round(l)}`),this._hashName){const t=this._hashName;let e=!1;const i=window.location.hash.slice(1).split("&").map((i=>{const o=i.split("=")[0];return o===t?(e=!0,`${o}=${c}`):i})).filter((t=>t));return e||i.push(`${t}=${c}`),`#${i.join("&")}`}return`#${c}`}_getCurrentHash(){const t=window.location.hash.replace("#","");if(this._hashName){let e;return t.split("&").map((t=>t.split("="))).forEach((t=>{t[0]===this._hashName&&(e=t)})),(e&&e[1]||"").split("/")}return t.split("/")}_onHashChange(){const t=this._getCurrentHash();if(t.length>=3&&!t.some((t=>isNaN(t)))){const e=this._map.dragRotate.isEnabled()&&this._map.touchZoomRotate.isEnabled()?+(t[3]||0):this._map.getBearing();return this._map.jumpTo({center:[+t[2],+t[1]],zoom:+t[0],bearing:e,pitch:+(t[4]||0)}),!0}return!1}_updateHashUnthrottled(){const t=window.location.href.replace(/(#.+)?$/,this.getHashString());try{window.history.replaceState(window.history.state,null,t)}catch(t){}}}const Ro={linearity:.3,easing:t.bezier(0,0,.3,1)},Lo=t.extend({deceleration:2500,maxSpeed:1400},Ro),ko=t.extend({deceleration:20,maxSpeed:1400},Ro),Bo=t.extend({deceleration:1e3,maxSpeed:360},Ro),Fo=t.extend({deceleration:1e3,maxSpeed:90},Ro);class Oo{constructor(t){this._map=t,this.clear()}clear(){this._inertiaBuffer=[]}record(e){this._drainInertiaBuffer(),this._inertiaBuffer.push({time:t.exported.now(),settings:e})}_drainInertiaBuffer(){const e=this._inertiaBuffer,i=t.exported.now();for(;e.length>0&&i-e[0].time>160;)e.shift()}_onMoveEnd(e){if(this._drainInertiaBuffer(),this._inertiaBuffer.length<2)return;const i={zoom:0,bearing:0,pitch:0,pan:new t.pointGeometry(0,0),pinchAround:void 0,around:void 0};for(const{settings:t}of this._inertiaBuffer)i.zoom+=t.zoomDelta||0,i.bearing+=t.bearingDelta||0,i.pitch+=t.pitchDelta||0,t.panDelta&&i.pan._add(t.panDelta),t.around&&(i.around=t.around),t.pinchAround&&(i.pinchAround=t.pinchAround);const o=this._inertiaBuffer[this._inertiaBuffer.length-1].time-this._inertiaBuffer[0].time,a={};if(i.pan.mag()){const s=No(i.pan.mag(),o,t.extend({},Lo,e||{}));a.offset=i.pan.mult(s.amount/i.pan.mag()),a.center=this._map.transform.center,Uo(a,s)}if(i.zoom){const t=No(i.zoom,o,ko);a.zoom=this._map.transform.zoom+t.amount,Uo(a,t)}if(i.bearing){const e=No(i.bearing,o,Bo);a.bearing=this._map.transform.bearing+t.clamp(e.amount,-179,179),Uo(a,e)}if(i.pitch){const t=No(i.pitch,o,Fo);a.pitch=this._map.transform.pitch+t.amount,Uo(a,t)}if(a.zoom||a.bearing){const t=void 0===i.pinchAround?i.around:i.pinchAround;a.around=t?this._map.unproject(t):this._map.getCenter()}return this.clear(),t.extend(a,{noMoveStart:!0})}}function Uo(t,e){(!t.duration||t.duration<e.duration)&&(t.duration=e.duration,t.easing=e.easing)}function No(e,i,o){const{maxSpeed:a,linearity:s,deceleration:r}=o,n=t.clamp(e*s/(i/1e3),-a,a),l=Math.abs(n)/(r*s);return{easing:o.easing,duration:1e3*l,amount:n*(l/2)}}class Go extends t.Event{constructor(e,i,o,a={}){const r=s.mousePos(i.getCanvasContainer(),o),n=i.unproject(r);super(e,t.extend({point:r,lngLat:n,originalEvent:o},a)),this._defaultPrevented=!1,this.target=i}preventDefault(){this._defaultPrevented=!0}get defaultPrevented(){return this._defaultPrevented}}class Zo extends t.Event{constructor(e,i,o){const a="touchend"===e?o.changedTouches:o.touches,r=s.touchPos(i.getCanvasContainer(),a),n=r.map((t=>i.unproject(t))),l=r.reduce(((t,e,i,o)=>t.add(e.div(o.length))),new t.pointGeometry(0,0));super(e,{points:r,point:l,lngLats:n,lngLat:i.unproject(l),originalEvent:o}),this._defaultPrevented=!1}preventDefault(){this._defaultPrevented=!0}get defaultPrevented(){return this._defaultPrevented}}class qo extends t.Event{constructor(t,e,i){super(t,{originalEvent:i}),this._defaultPrevented=!1}preventDefault(){this._defaultPrevented=!0}get defaultPrevented(){return this._defaultPrevented}}class jo{constructor(t,e){this._map=t,this._clickTolerance=e.clickTolerance}reset(){delete this._mousedownPos}wheel(t){return this._firePreventable(new qo(t.type,this._map,t))}mousedown(t,e){return this._mousedownPos=e,this._firePreventable(new Go(t.type,this._map,t))}mouseup(t){this._map.fire(new Go(t.type,this._map,t))}click(t,e){this._mousedownPos&&this._mousedownPos.dist(e)>=this._clickTolerance||this._map.fire(new Go(t.type,this._map,t))}dblclick(t){return this._firePreventable(new Go(t.type,this._map,t))}mouseover(t){this._map.fire(new Go(t.type,this._map,t))}mouseout(t){this._map.fire(new Go(t.type,this._map,t))}touchstart(t){return this._firePreventable(new Zo(t.type,this._map,t))}touchmove(t){this._map.fire(new Zo(t.type,this._map,t))}touchend(t){this._map.fire(new Zo(t.type,this._map,t))}touchcancel(t){this._map.fire(new Zo(t.type,this._map,t))}_firePreventable(t){if(this._map.fire(t),t.defaultPrevented)return{}}isEnabled(){return!0}isActive(){return!1}enable(){}disable(){}}class Vo{constructor(t){this._map=t}reset(){this._delayContextMenu=!1,delete this._contextMenuEvent}mousemove(t){this._map.fire(new Go(t.type,this._map,t))}mousedown(){this._delayContextMenu=!0}mouseup(){this._delayContextMenu=!1,this._contextMenuEvent&&(this._map.fire(new Go("contextmenu",this._map,this._contextMenuEvent)),delete this._contextMenuEvent)}contextmenu(t){this._delayContextMenu?this._contextMenuEvent=t:this._map.fire(new Go(t.type,this._map,t)),this._map.listens("contextmenu")&&t.preventDefault()}isEnabled(){return!0}isActive(){return!1}enable(){}disable(){}}class Xo{constructor(t,e){this._map=t,this._el=t.getCanvasContainer(),this._container=t.getContainer(),this._clickTolerance=e.clickTolerance||1}isEnabled(){return!!this._enabled}isActive(){return!!this._active}enable(){this.isEnabled()||(this._enabled=!0)}disable(){this.isEnabled()&&(this._enabled=!1)}mousedown(t,e){this.isEnabled()&&t.shiftKey&&0===t.button&&(s.disableDrag(),this._startPos=this._lastPos=e,this._active=!0)}mousemoveWindow(t,e){if(!this._active)return;const i=e;if(this._lastPos.equals(i)||!this._box&&i.dist(this._startPos)<this._clickTolerance)return;const o=this._startPos;this._lastPos=i,this._box||(this._box=s.create("div","maplibregl-boxzoom mapboxgl-boxzoom",this._container),this._container.classList.add("maplibregl-crosshair","mapboxgl-crosshair"),this._fireEvent("boxzoomstart",t));const a=Math.min(o.x,i.x),r=Math.max(o.x,i.x),n=Math.min(o.y,i.y),l=Math.max(o.y,i.y);s.setTransform(this._box,`translate(${a}px,${n}px)`),this._box.style.width=r-a+"px",this._box.style.height=l-n+"px"}mouseupWindow(e,i){if(!this._active)return;if(0!==e.button)return;const o=this._startPos,a=i;if(this.reset(),s.suppressClick(),o.x!==a.x||o.y!==a.y)return this._map.fire(new t.Event("boxzoomend",{originalEvent:e})),{cameraAnimation:t=>t.fitScreenCoordinates(o,a,this._map.getBearing(),{linear:!0})};this._fireEvent("boxzoomcancel",e)}keydown(t){this._active&&27===t.keyCode&&(this.reset(),this._fireEvent("boxzoomcancel",t))}reset(){this._active=!1,this._container.classList.remove("maplibregl-crosshair","mapboxgl-crosshair"),this._box&&(s.remove(this._box),this._box=null),s.enableDrag(),delete this._startPos,delete this._lastPos}_fireEvent(e,i){return this._map.fire(new t.Event(e,{originalEvent:i}))}}function $o(t,e){const i={};for(let o=0;o<t.length;o++)i[t[o].identifier]=e[o];return i}class Wo{constructor(t){this.reset(),this.numTouches=t.numTouches}reset(){delete this.centroid,delete this.startTime,delete this.touches,this.aborted=!1}touchstart(e,i,o){(this.centroid||o.length>this.numTouches)&&(this.aborted=!0),this.aborted||(void 0===this.startTime&&(this.startTime=e.timeStamp),o.length===this.numTouches&&(this.centroid=function(e){const i=new t.pointGeometry(0,0);for(const t of e)i._add(t);return i.div(e.length)}(i),this.touches=$o(o,i)))}touchmove(t,e,i){if(this.aborted||!this.centroid)return;const o=$o(i,e);for(const t in this.touches){const e=this.touches[t],i=o[t];(!i||i.dist(e)>30)&&(this.aborted=!0)}}touchend(t,e,i){if((!this.centroid||t.timeStamp-this.startTime>500)&&(this.aborted=!0),0===i.length){const t=!this.aborted&&this.centroid;if(this.reset(),t)return t}}}class Ho{constructor(t){this.singleTap=new Wo(t),this.numTaps=t.numTaps,this.reset()}reset(){this.lastTime=1/0,delete this.lastTap,this.count=0,this.singleTap.reset()}touchstart(t,e,i){this.singleTap.touchstart(t,e,i)}touchmove(t,e,i){this.singleTap.touchmove(t,e,i)}touchend(t,e,i){const o=this.singleTap.touchend(t,e,i);if(o){const e=t.timeStamp-this.lastTime<500,i=!this.lastTap||this.lastTap.dist(o)<30;if(e&&i||this.reset(),this.count++,this.lastTime=t.timeStamp,this.lastTap=o,this.count===this.numTaps)return this.reset(),o}}}class Ko{constructor(){this._zoomIn=new Ho({numTouches:1,numTaps:2}),this._zoomOut=new Ho({numTouches:2,numTaps:1}),this.reset()}reset(){this._active=!1,this._zoomIn.reset(),this._zoomOut.reset()}touchstart(t,e,i){this._zoomIn.touchstart(t,e,i),this._zoomOut.touchstart(t,e,i)}touchmove(t,e,i){this._zoomIn.touchmove(t,e,i),this._zoomOut.touchmove(t,e,i)}touchend(t,e,i){const o=this._zoomIn.touchend(t,e,i),a=this._zoomOut.touchend(t,e,i);return o?(this._active=!0,t.preventDefault(),setTimeout((()=>this.reset()),0),{cameraAnimation:e=>e.easeTo({duration:300,zoom:e.getZoom()+1,around:e.unproject(o)},{originalEvent:t})}):a?(this._active=!0,t.preventDefault(),setTimeout((()=>this.reset()),0),{cameraAnimation:e=>e.easeTo({duration:300,zoom:e.getZoom()-1,around:e.unproject(a)},{originalEvent:t})}):void 0}touchcancel(){this.reset()}enable(){this._enabled=!0}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}}const Yo={0:1,2:2};class Jo{constructor(t){this.reset(),this._clickTolerance=t.clickTolerance||1}reset(){this._active=!1,this._moved=!1,delete this._lastPoint,delete this._eventButton}_correctButton(t,e){return!1}_move(t,e){return{}}mousedown(t,e){if(this._lastPoint)return;const i=s.mouseButton(t);this._correctButton(t,i)&&(this._lastPoint=e,this._eventButton=i)}mousemoveWindow(t,e){const i=this._lastPoint;if(i)if(t.preventDefault(),function(t,e){const i=Yo[e];return void 0===t.buttons||(t.buttons&i)!==i}(t,this._eventButton))this.reset();else if(this._moved||!(e.dist(i)<this._clickTolerance))return this._moved=!0,this._lastPoint=e,this._move(i,e)}mouseupWindow(t){this._lastPoint&&s.mouseButton(t)===this._eventButton&&(this._moved&&s.suppressClick(),this.reset())}enable(){this._enabled=!0}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}}class Qo extends Jo{mousedown(t,e){super.mousedown(t,e),this._lastPoint&&(this._active=!0)}_correctButton(t,e){return 0===e&&!t.ctrlKey}_move(t,e){return{around:e,panDelta:e.sub(t)}}}class ta extends Jo{_correctButton(t,e){return 0===e&&t.ctrlKey||2===e}_move(t,e){const i=.8*(e.x-t.x);if(i)return this._active=!0,{bearingDelta:i}}contextmenu(t){t.preventDefault()}}class ea extends Jo{_correctButton(t,e){return 0===e&&t.ctrlKey||2===e}_move(t,e){const i=-.5*(e.y-t.y);if(i)return this._active=!0,{pitchDelta:i}}contextmenu(t){t.preventDefault()}}class ia{constructor(t){this._minTouches=1,this._clickTolerance=t.clickTolerance||1,this.reset()}reset(){this._active=!1,this._touches={},this._sum=new t.pointGeometry(0,0)}touchstart(t,e,i){return this._calculateTransform(t,e,i)}touchmove(t,e,i){if(this._active&&!(i.length<this._minTouches))return t.preventDefault(),this._calculateTransform(t,e,i)}touchend(t,e,i){this._calculateTransform(t,e,i),this._active&&i.length<this._minTouches&&this.reset()}touchcancel(){this.reset()}_calculateTransform(e,i,o){o.length>0&&(this._active=!0);const a=$o(o,i),s=new t.pointGeometry(0,0),r=new t.pointGeometry(0,0);let n=0;for(const t in a){const e=a[t],i=this._touches[t];i&&(s._add(e),r._add(e.sub(i)),n++,a[t]=e)}if(this._touches=a,n<this._minTouches||!r.mag())return;const l=r.div(n);return this._sum._add(l),this._sum.mag()<this._clickTolerance?void 0:{around:s.div(n),panDelta:l}}enable(){this._enabled=!0}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}}class oa{constructor(){this.reset()}reset(){this._active=!1,delete this._firstTwoTouches}_start(t){}_move(t,e,i){return{}}touchstart(t,e,i){this._firstTwoTouches||i.length<2||(this._firstTwoTouches=[i[0].identifier,i[1].identifier],this._start([e[0],e[1]]))}touchmove(t,e,i){if(!this._firstTwoTouches)return;t.preventDefault();const[o,a]=this._firstTwoTouches,s=aa(i,e,o),r=aa(i,e,a);if(!s||!r)return;const n=this._aroundCenter?null:s.add(r).div(2);return this._move([s,r],n,t)}touchend(t,e,i){if(!this._firstTwoTouches)return;const[o,a]=this._firstTwoTouches,r=aa(i,e,o),n=aa(i,e,a);r&&n||(this._active&&s.suppressClick(),this.reset())}touchcancel(){this.reset()}enable(t){this._enabled=!0,this._aroundCenter=!!t&&"center"===t.around}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}}function aa(t,e,i){for(let o=0;o<t.length;o++)if(t[o].identifier===i)return e[o]}function sa(t,e){return Math.log(t/e)/Math.LN2}class ra extends oa{reset(){super.reset(),delete this._distance,delete this._startDistance}_start(t){this._startDistance=this._distance=t[0].dist(t[1])}_move(t,e){const i=this._distance;if(this._distance=t[0].dist(t[1]),this._active||!(Math.abs(sa(this._distance,this._startDistance))<.1))return this._active=!0,{zoomDelta:sa(this._distance,i),pinchAround:e}}}function na(t,e){return 180*t.angleWith(e)/Math.PI}class la extends oa{reset(){super.reset(),delete this._minDiameter,delete this._startVector,delete this._vector}_start(t){this._startVector=this._vector=t[0].sub(t[1]),this._minDiameter=t[0].dist(t[1])}_move(t,e){const i=this._vector;if(this._vector=t[0].sub(t[1]),this._active||!this._isBelowThreshold(this._vector))return this._active=!0,{bearingDelta:na(this._vector,i),pinchAround:e}}_isBelowThreshold(t){this._minDiameter=Math.min(this._minDiameter,t.mag());const e=25/(Math.PI*this._minDiameter)*360,i=na(t,this._startVector);return Math.abs(i)<e}}function ca(t){return Math.abs(t.y)>Math.abs(t.x)}class ha extends oa{reset(){super.reset(),this._valid=void 0,delete this._firstMove,delete this._lastPoints}_start(t){this._lastPoints=t,ca(t[0].sub(t[1]))&&(this._valid=!1)}_move(t,e,i){const o=t[0].sub(this._lastPoints[0]),a=t[1].sub(this._lastPoints[1]);if(this._valid=this.gestureBeginsVertically(o,a,i.timeStamp),this._valid)return this._lastPoints=t,this._active=!0,{pitchDelta:(o.y+a.y)/2*-.5}}gestureBeginsVertically(t,e,i){if(void 0!==this._valid)return this._valid;const o=t.mag()>=2,a=e.mag()>=2;if(!o&&!a)return;if(!o||!a)return void 0===this._firstMove&&(this._firstMove=i),i-this._firstMove<100&&void 0;const s=t.y>0==e.y>0;return ca(t)&&ca(e)&&s}}const ua={panStep:100,bearingStep:15,pitchStep:10};class da{constructor(){const t=ua;this._panStep=t.panStep,this._bearingStep=t.bearingStep,this._pitchStep=t.pitchStep,this._rotationDisabled=!1}reset(){this._active=!1}keydown(t){if(t.altKey||t.ctrlKey||t.metaKey)return;let e=0,i=0,o=0,a=0,s=0;switch(t.keyCode){case 61:case 107:case 171:case 187:e=1;break;case 189:case 109:case 173:e=-1;break;case 37:t.shiftKey?i=-1:(t.preventDefault(),a=-1);break;case 39:t.shiftKey?i=1:(t.preventDefault(),a=1);break;case 38:t.shiftKey?o=1:(t.preventDefault(),s=-1);break;case 40:t.shiftKey?o=-1:(t.preventDefault(),s=1);break;default:return}return this._rotationDisabled&&(i=0,o=0),{cameraAnimation:r=>{const n=r.getZoom();r.easeTo({duration:300,easeId:"keyboardHandler",easing:ma,zoom:e?Math.round(n)+e*(t.shiftKey?2:1):n,bearing:r.getBearing()+i*this._bearingStep,pitch:r.getPitch()+o*this._pitchStep,offset:[-a*this._panStep,-s*this._panStep],center:r.getCenter()},{originalEvent:t})}}}enable(){this._enabled=!0}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}disableRotation(){this._rotationDisabled=!0}enableRotation(){this._rotationDisabled=!1}}function ma(t){return t*(2-t)}const pa=4.000244140625;class _a{constructor(e,i){this._map=e,this._el=e.getCanvasContainer(),this._handler=i,this._delta=0,this._defaultZoomRate=.01,this._wheelZoomRate=.0022222222222222222,t.bindAll(["_onTimeout"],this)}setZoomRate(t){this._defaultZoomRate=t}setWheelZoomRate(t){this._wheelZoomRate=t}isEnabled(){return!!this._enabled}isActive(){return!!this._active||void 0!==this._finishTimeout}isZooming(){return!!this._zooming}enable(t){this.isEnabled()||(this._enabled=!0,this._aroundCenter=t&&"center"===t.around)}disable(){this.isEnabled()&&(this._enabled=!1)}wheel(e){if(!this.isEnabled())return;let i=e.deltaMode===WheelEvent.DOM_DELTA_LINE?40*e.deltaY:e.deltaY;const o=t.exported.now(),a=o-(this._lastWheelEventTime||0);this._lastWheelEventTime=o,0!==i&&i%pa==0?this._type="wheel":0!==i&&Math.abs(i)<4?this._type="trackpad":a>400?(this._type=null,this._lastValue=i,this._timeout=setTimeout(this._onTimeout,40,e)):this._type||(this._type=Math.abs(a*i)<200?"trackpad":"wheel",this._timeout&&(clearTimeout(this._timeout),this._timeout=null,i+=this._lastValue)),e.shiftKey&&i&&(i/=4),this._type&&(this._lastWheelEvent=e,this._delta-=i,this._active||this._start(e)),e.preventDefault()}_onTimeout(t){this._type="wheel",this._delta-=this._lastValue,this._active||this._start(t)}_start(e){if(!this._delta)return;this._frameId&&(this._frameId=null),this._active=!0,this.isZooming()||(this._zooming=!0),this._finishTimeout&&(clearTimeout(this._finishTimeout),delete this._finishTimeout);const i=s.mousePos(this._el,e);this._around=t.LngLat.convert(this._aroundCenter?this._map.getCenter():this._map.unproject(i)),this._aroundPoint=this._map.transform.locationPoint(this._around),this._frameId||(this._frameId=!0,this._handler._triggerRenderFrame())}renderFrame(){if(!this._frameId)return;if(this._frameId=null,!this.isActive())return;const e=this._map.transform;if(0!==this._delta){const t="wheel"===this._type&&Math.abs(this._delta)>pa?this._wheelZoomRate:this._defaultZoomRate;let i=2/(1+Math.exp(-Math.abs(this._delta*t)));this._delta<0&&0!==i&&(i=1/i);const o="number"==typeof this._targetZoom?e.zoomScale(this._targetZoom):e.scale;this._targetZoom=Math.min(e.maxZoom,Math.max(e.minZoom,e.scaleZoom(o*i))),"wheel"===this._type&&(this._startZoom=e.zoom,this._easing=this._smoothOutEasing(200)),this._delta=0}const i="number"==typeof this._targetZoom?this._targetZoom:e.zoom,o=this._startZoom,a=this._easing;let s,r=!1;if("wheel"===this._type&&o&&a){const e=Math.min((t.exported.now()-this._lastWheelEventTime)/200,1),n=a(e);s=t.number(o,i,n),e<1?this._frameId||(this._frameId=!0):r=!0}else s=i,r=!0;return this._active=!0,r&&(this._active=!1,this._finishTimeout=setTimeout((()=>{this._zooming=!1,this._handler._triggerRenderFrame(),delete this._targetZoom,delete this._finishTimeout}),200)),{noInertia:!0,needsRenderFrame:!r,zoomDelta:s-e.zoom,around:this._aroundPoint,originalEvent:this._lastWheelEvent}}_smoothOutEasing(e){let i=t.ease;if(this._prevEase){const e=this._prevEase,o=(t.exported.now()-e.start)/e.duration,a=e.easing(o+.01)-e.easing(o),s=.27/Math.sqrt(a*a+1e-4)*.01,r=Math.sqrt(.0729-s*s);i=t.bezier(s,r,.25,1)}return this._prevEase={start:t.exported.now(),duration:e,easing:i},i}reset(){this._active=!1}}class fa{constructor(t,e){this._clickZoom=t,this._tapZoom=e}enable(){this._clickZoom.enable(),this._tapZoom.enable()}disable(){this._clickZoom.disable(),this._tapZoom.disable()}isEnabled(){return this._clickZoom.isEnabled()&&this._tapZoom.isEnabled()}isActive(){return this._clickZoom.isActive()||this._tapZoom.isActive()}}class ga{constructor(){this.reset()}reset(){this._active=!1}dblclick(t,e){return t.preventDefault(),{cameraAnimation:i=>{i.easeTo({duration:300,zoom:i.getZoom()+(t.shiftKey?-1:1),around:i.unproject(e)},{originalEvent:t})}}}enable(){this._enabled=!0}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}}class xa{constructor(){this._tap=new Ho({numTouches:1,numTaps:1}),this.reset()}reset(){this._active=!1,delete this._swipePoint,delete this._swipeTouch,delete this._tapTime,this._tap.reset()}touchstart(t,e,i){this._swipePoint||(this._tapTime&&t.timeStamp-this._tapTime>500&&this.reset(),this._tapTime?i.length>0&&(this._swipePoint=e[0],this._swipeTouch=i[0].identifier):this._tap.touchstart(t,e,i))}touchmove(t,e,i){if(this._tapTime){if(this._swipePoint){if(i[0].identifier!==this._swipeTouch)return;const o=e[0],a=o.y-this._swipePoint.y;return this._swipePoint=o,t.preventDefault(),this._active=!0,{zoomDelta:a/128}}}else this._tap.touchmove(t,e,i)}touchend(t,e,i){this._tapTime?this._swipePoint&&0===i.length&&this.reset():this._tap.touchend(t,e,i)&&(this._tapTime=t.timeStamp)}touchcancel(){this.reset()}enable(){this._enabled=!0}disable(){this._enabled=!1,this.reset()}isEnabled(){return this._enabled}isActive(){return this._active}}class va{constructor(t,e,i){this._el=t,this._mousePan=e,this._touchPan=i}enable(t){this._inertiaOptions=t||{},this._mousePan.enable(),this._touchPan.enable(),this._el.classList.add("maplibregl-touch-drag-pan","mapboxgl-touch-drag-pan")}disable(){this._mousePan.disable(),this._touchPan.disable(),this._el.classList.remove("maplibregl-touch-drag-pan","mapboxgl-touch-drag-pan")}isEnabled(){return this._mousePan.isEnabled()&&this._touchPan.isEnabled()}isActive(){return this._mousePan.isActive()||this._touchPan.isActive()}}class ya{constructor(t,e,i){this._pitchWithRotate=t.pitchWithRotate,this._mouseRotate=e,this._mousePitch=i}enable(){this._mouseRotate.enable(),this._pitchWithRotate&&this._mousePitch.enable()}disable(){this._mouseRotate.disable(),this._mousePitch.disable()}isEnabled(){return this._mouseRotate.isEnabled()&&(!this._pitchWithRotate||this._mousePitch.isEnabled())}isActive(){return this._mouseRotate.isActive()||this._mousePitch.isActive()}}class ba{constructor(t,e,i,o){this._el=t,this._touchZoom=e,this._touchRotate=i,this._tapDragZoom=o,this._rotationDisabled=!1,this._enabled=!0}enable(t){this._touchZoom.enable(t),this._rotationDisabled||this._touchRotate.enable(t),this._tapDragZoom.enable(),this._el.classList.add("maplibregl-touch-zoom-rotate","mapboxgl-touch-zoom-rotate")}disable(){this._touchZoom.disable(),this._touchRotate.disable(),this._tapDragZoom.disable(),this._el.classList.remove("maplibregl-touch-zoom-rotate","mapboxgl-touch-zoom-rotate")}isEnabled(){return this._touchZoom.isEnabled()&&(this._rotationDisabled||this._touchRotate.isEnabled())&&this._tapDragZoom.isEnabled()}isActive(){return this._touchZoom.isActive()||this._touchRotate.isActive()||this._tapDragZoom.isActive()}disableRotation(){this._rotationDisabled=!0,this._touchRotate.disable()}enableRotation(){this._rotationDisabled=!1,this._touchZoom.isEnabled()&&this._touchRotate.enable()}}const wa=t=>t.zoom||t.drag||t.pitch||t.rotate;class Ta extends t.Event{}function Ea(t){return t.panDelta&&t.panDelta.mag()||t.zoomDelta||t.bearingDelta||t.pitchDelta}class Ia{constructor(e,i){this._map=e,this._el=this._map.getCanvasContainer(),this._handlers=[],this._handlersById={},this._changes=[],this._inertia=new Oo(e),this._bearingSnap=i.bearingSnap,this._previousActiveHandlers={},this._eventsInProgress={},this._addDefaultHandlers(i),t.bindAll(["handleEvent","handleWindowEvent"],this);const o=this._el;this._listeners=[[o,"touchstart",{passive:!0}],[o,"touchmove",{passive:!1}],[o,"touchend",void 0],[o,"touchcancel",void 0],[o,"mousedown",void 0],[o,"mousemove",void 0],[o,"mouseup",void 0],[document,"mousemove",{capture:!0}],[document,"mouseup",void 0],[o,"mouseover",void 0],[o,"mouseout",void 0],[o,"dblclick",void 0],[o,"click",void 0],[o,"keydown",{capture:!1}],[o,"keyup",void 0],[o,"wheel",{passive:!1}],[o,"contextmenu",void 0],[window,"blur",void 0]];for(const[t,e,i]of this._listeners)s.addEventListener(t,e,t===document?this.handleWindowEvent:this.handleEvent,i)}destroy(){for(const[t,e,i]of this._listeners)s.removeEventListener(t,e,t===document?this.handleWindowEvent:this.handleEvent,i)}_addDefaultHandlers(t){const e=this._map,i=e.getCanvasContainer();this._add("mapEvent",new jo(e,t));const o=e.boxZoom=new Xo(e,t);this._add("boxZoom",o);const a=new Ko,s=new ga;e.doubleClickZoom=new fa(s,a),this._add("tapZoom",a),this._add("clickZoom",s);const r=new xa;this._add("tapDragZoom",r);const n=e.touchPitch=new ha;this._add("touchPitch",n);const l=new ta(t),c=new ea(t);e.dragRotate=new ya(t,l,c),this._add("mouseRotate",l,["mousePitch"]),this._add("mousePitch",c,["mouseRotate"]);const h=new Qo(t),u=new ia(t);e.dragPan=new va(i,h,u),this._add("mousePan",h),this._add("touchPan",u,["touchZoom","touchRotate"]);const d=new la,m=new ra;e.touchZoomRotate=new ba(i,m,d,r),this._add("touchRotate",d,["touchPan","touchZoom"]),this._add("touchZoom",m,["touchPan","touchRotate"]);const p=e.scrollZoom=new _a(e,this);this._add("scrollZoom",p,["mousePan"]);const _=e.keyboard=new da;this._add("keyboard",_),this._add("blockableMapEvent",new Vo(e));for(const i of["boxZoom","doubleClickZoom","tapDragZoom","touchPitch","dragRotate","dragPan","touchZoomRotate","scrollZoom","keyboard"])t.interactive&&t[i]&&e[i].enable(t[i])}_add(t,e,i){this._handlers.push({handlerName:t,handler:e,allowed:i}),this._handlersById[t]=e}stop(t){if(!this._updatingCamera){for(const{handler:t}of this._handlers)t.reset();this._inertia.clear(),this._fireEvents({},{},t),this._changes=[]}}isActive(){for(const{handler:t}of this._handlers)if(t.isActive())return!0;return!1}isZooming(){return!!this._eventsInProgress.zoom||this._map.scrollZoom.isZooming()}isRotating(){return!!this._eventsInProgress.rotate}isMoving(){return Boolean(wa(this._eventsInProgress))||this.isZooming()}_blockedByActive(t,e,i){for(const o in t)if(o!==i&&(!e||e.indexOf(o)<0))return!0;return!1}handleWindowEvent(t){this.handleEvent(t,`${t.type}Window`)}_getMapTouches(t){const e=[];for(const i of t)this._el.contains(i.target)&&e.push(i);return e}handleEvent(t,e){if("blur"===t.type)return void this.stop(!0);this._updatingCamera=!0;const i="renderFrame"===t.type?void 0:t,o={needsRenderFrame:!1},a={},r={},n=t.touches,l=n?this._getMapTouches(n):void 0,c=l?s.touchPos(this._el,l):s.mousePos(this._el,t);for(const{handlerName:s,handler:n,allowed:h}of this._handlers){if(!n.isEnabled())continue;let u;this._blockedByActive(r,h,s)?n.reset():n[e||t.type]&&(u=n[e||t.type](t,c,l),this.mergeHandlerResult(o,a,u,s,i),u&&u.needsRenderFrame&&this._triggerRenderFrame()),(u||n.isActive())&&(r[s]=n)}const h={};for(const t in this._previousActiveHandlers)r[t]||(h[t]=i);this._previousActiveHandlers=r,(Object.keys(h).length||Ea(o))&&(this._changes.push([o,a,h]),this._triggerRenderFrame()),(Object.keys(r).length||Ea(o))&&this._map._stop(!0),this._updatingCamera=!1;const{cameraAnimation:u}=o;u&&(this._inertia.clear(),this._fireEvents({},{},!0),this._changes=[],u(this._map))}mergeHandlerResult(e,i,o,a,s){if(!o)return;t.extend(e,o);const r={handlerName:a,originalEvent:o.originalEvent||s};void 0!==o.zoomDelta&&(i.zoom=r),void 0!==o.panDelta&&(i.drag=r),void 0!==o.pitchDelta&&(i.pitch=r),void 0!==o.bearingDelta&&(i.rotate=r)}_applyChanges(){const e={},i={},o={};for(const[a,s,r]of this._changes)a.panDelta&&(e.panDelta=(e.panDelta||new t.pointGeometry(0,0))._add(a.panDelta)),a.zoomDelta&&(e.zoomDelta=(e.zoomDelta||0)+a.zoomDelta),a.bearingDelta&&(e.bearingDelta=(e.bearingDelta||0)+a.bearingDelta),a.pitchDelta&&(e.pitchDelta=(e.pitchDelta||0)+a.pitchDelta),void 0!==a.around&&(e.around=a.around),void 0!==a.pinchAround&&(e.pinchAround=a.pinchAround),a.noInertia&&(e.noInertia=a.noInertia),t.extend(i,s),t.extend(o,r);this._updateMapTransform(e,i,o),this._changes=[]}_updateMapTransform(e,i,o){const a=this._map,s=a.transform,r=a.style&&a.style.terrain;if(!(Ea(e)||r&&this._drag))return this._fireEvents(i,o,!0);let{panDelta:n,zoomDelta:l,bearingDelta:c,pitchDelta:h,around:u,pinchAround:d}=e;void 0!==d&&(u=d),a._stop(!0),u=u||a.transform.centerPoint;const m=s.pointLocation(n?u.sub(n):u);c&&(s.bearing+=c),h&&(s.pitch+=h),l&&(s.zoom+=l),r?i.drag&&!this._drag?(this._drag={center:s.centerPoint,lngLat:s.pointLocation(u),point:u,handlerName:i.drag.handlerName},a.fire(new t.Event("freezeElevation",{freeze:!0}))):this._drag&&o[this._drag.handlerName]?(a.fire(new t.Event("freezeElevation",{freeze:!1})),this._drag=null):i.drag&&this._drag&&(s.center=s.pointLocation(s.centerPoint.sub(n))):s.setLocationAtPoint(m,u),this._map._update(),e.noInertia||this._inertia.record(e),this._fireEvents(i,o,!0)}_fireEvents(e,i,o){const a=wa(this._eventsInProgress),s=wa(e),r={};for(const t in e){const{originalEvent:i}=e[t];this._eventsInProgress[t]||(r[`${t}start`]=i),this._eventsInProgress[t]=e[t]}!a&&s&&this._fireEvent("movestart",s.originalEvent);for(const t in r)this._fireEvent(t,r[t]);s&&this._fireEvent("move",s.originalEvent);for(const t in e){const{originalEvent:i}=e[t];this._fireEvent(t,i)}const n={};let l;for(const t in this._eventsInProgress){const{handlerName:e,originalEvent:o}=this._eventsInProgress[t];this._handlersById[e].isActive()||(delete this._eventsInProgress[t],l=i[e]||o,n[`${t}end`]=l)}for(const t in n)this._fireEvent(t,n[t]);const c=wa(this._eventsInProgress);if(o&&(a||s)&&!c){this._updatingCamera=!0;const e=this._inertia._onMoveEnd(this._map.dragPan._inertiaOptions),i=t=>0!==t&&-this._bearingSnap<t&&t<this._bearingSnap;e?(i(e.bearing||this._map.getBearing())&&(e.bearing=0),this._map.easeTo(e,{originalEvent:l})):(this._map.fire(new t.Event("moveend",{originalEvent:l})),i(this._map.getBearing())&&this._map.resetNorth()),this._updatingCamera=!1}}_fireEvent(e,i){this._map.fire(new t.Event(e,i?{originalEvent:i}:{}))}_requestFrame(){return this._map.triggerRepaint(),this._map._renderTaskQueue.add((t=>{delete this._frameId,this.handleEvent(new Ta("renderFrame",{timeStamp:t})),this._applyChanges()}))}_triggerRenderFrame(){void 0===this._frameId&&(this._frameId=this._requestFrame())}}const Sa={extend:(e,...i)=>t.extend(e,...i),run(t){t()},logToElement(t,e=!1,i="log"){const o=window.document.getElementById(i);o&&(e&&(o.innerHTML=""),o.innerHTML+=`<br>${t}`)}};class Ca extends t.Evented{constructor(e,i){super(),this._moving=!1,this._zooming=!1,this.transform=e,this._bearingSnap=i.bearingSnap,t.bindAll(["_renderFrameCallback"],this)}getCenter(){return new t.LngLat(this.transform.center.lng,this.transform.center.lat)}setCenter(t,e){return this.jumpTo({center:t},e)}panBy(e,i,o){return e=t.pointGeometry.convert(e).mult(-1),this.panTo(this.transform.center,t.extend({offset:e},i),o)}panTo(e,i,o){return this.easeTo(t.extend({center:e},i),o)}getZoom(){return this.transform.zoom}setZoom(t,e){return this.jumpTo({zoom:t},e),this}zoomTo(e,i,o){return this.easeTo(t.extend({zoom:e},i),o)}zoomIn(t,e){return this.zoomTo(this.getZoom()+1,t,e),this}zoomOut(t,e){return this.zoomTo(this.getZoom()-1,t,e),this}getBearing(){return this.transform.bearing}setBearing(t,e){return this.jumpTo({bearing:t},e),this}getPadding(){return this.transform.padding}setPadding(t,e){return this.jumpTo({padding:t},e),this}rotateTo(e,i,o){return this.easeTo(t.extend({bearing:e},i),o)}resetNorth(e,i){return this.rotateTo(0,t.extend({duration:1e3},e),i),this}resetNorthPitch(e,i){return this.easeTo(t.extend({bearing:0,pitch:0,duration:1e3},e),i),this}snapToNorth(t,e){return Math.abs(this.getBearing())<this._bearingSnap?this.resetNorth(t,e):this}getPitch(){return this.transform.pitch}setPitch(t,e){return this.jumpTo({pitch:t},e),this}cameraForBounds(e,i){e=t.LngLatBounds.convert(e);const o=i&&i.bearing||0;return this._cameraForBoxAndBearing(e.getNorthWest(),e.getSouthEast(),o,i)}_cameraForBoxAndBearing(e,i,o,a){const s={top:0,bottom:0,right:0,left:0};if("number"==typeof(a=t.extend({padding:s,offset:[0,0],maxZoom:this.transform.maxZoom},a)).padding){const t=a.padding;a.padding={top:t,bottom:t,right:t,left:t}}a.padding=t.extend(s,a.padding);const r=this.transform,n=r.padding,l=r.project(t.LngLat.convert(e)),c=r.project(t.LngLat.convert(i)),h=l.rotate(-o*Math.PI/180),u=c.rotate(-o*Math.PI/180),d=new t.pointGeometry(Math.max(h.x,u.x),Math.max(h.y,u.y)),m=new t.pointGeometry(Math.min(h.x,u.x),Math.min(h.y,u.y)),p=d.sub(m),_=(r.width-(n.left+n.right+a.padding.left+a.padding.right))/p.x,f=(r.height-(n.top+n.bottom+a.padding.top+a.padding.bottom))/p.y;if(f<0||_<0)return void t.warnOnce("Map cannot fit within canvas with the given bounds, padding, and/or offset.");const g=Math.min(r.scaleZoom(r.scale*Math.min(_,f)),a.maxZoom),x=t.pointGeometry.convert(a.offset),v=new t.pointGeometry((a.padding.left-a.padding.right)/2,(a.padding.top-a.padding.bottom)/2).rotate(o*Math.PI/180),y=x.add(v).mult(r.scale/r.zoomScale(g));return{center:r.unproject(l.add(c).div(2).sub(y)),zoom:g,bearing:o}}fitBounds(t,e,i){return this._fitInternal(this.cameraForBounds(t,e),e,i)}fitScreenCoordinates(e,i,o,a,s){return this._fitInternal(this._cameraForBoxAndBearing(this.transform.pointLocation(t.pointGeometry.convert(e)),this.transform.pointLocation(t.pointGeometry.convert(i)),o,a),a,s)}_fitInternal(e,i,o){return e?(delete(i=t.extend(e,i)).padding,i.linear?this.easeTo(i,o):this.flyTo(i,o)):this}jumpTo(e,i){this.stop();const o=this.transform;let a=!1,s=!1,r=!1;return"zoom"in e&&o.zoom!==+e.zoom&&(a=!0,o.zoom=+e.zoom),void 0!==e.center&&(o.center=t.LngLat.convert(e.center)),"bearing"in e&&o.bearing!==+e.bearing&&(s=!0,o.bearing=+e.bearing),"pitch"in e&&o.pitch!==+e.pitch&&(r=!0,o.pitch=+e.pitch),null==e.padding||o.isPaddingEqual(e.padding)||(o.padding=e.padding),this.fire(new t.Event("movestart",i)).fire(new t.Event("move",i)),a&&this.fire(new t.Event("zoomstart",i)).fire(new t.Event("zoom",i)).fire(new t.Event("zoomend",i)),s&&this.fire(new t.Event("rotatestart",i)).fire(new t.Event("rotate",i)).fire(new t.Event("rotateend",i)),r&&this.fire(new t.Event("pitchstart",i)).fire(new t.Event("pitch",i)).fire(new t.Event("pitchend",i)),this.fire(new t.Event("moveend",i))}easeTo(e,i){this._stop(!1,e.easeId),(!1===(e=t.extend({offset:[0,0],duration:500,easing:t.ease},e)).animate||!e.essential&&t.exported.prefersReducedMotion)&&(e.duration=0);const o=this.transform,a=this.getZoom(),s=this.getBearing(),r=this.getPitch(),n=this.getPadding(),l="zoom"in e?+e.zoom:a,c="bearing"in e?this._normalizeBearing(e.bearing,s):s,h="pitch"in e?+e.pitch:r,u="padding"in e?e.padding:o.padding,d=t.pointGeometry.convert(e.offset);let m=o.centerPoint.add(d);const p=o.pointLocation(m),_=t.LngLat.convert(e.center||p);this._normalizeCenter(_);const f=o.project(p),g=o.project(_).sub(f),x=o.zoomScale(l-a);let v,y;e.around&&(v=t.LngLat.convert(e.around),y=o.locationPoint(v));const b={moving:this._moving,zooming:this._zooming,rotating:this._rotating,pitching:this._pitching};return this._zooming=this._zooming||l!==a,this._rotating=this._rotating||s!==c,this._pitching=this._pitching||h!==r,this._padding=!o.isPaddingEqual(u),this._easeId=e.easeId,this._prepareEase(i,e.noMoveStart,b),this._ease((e=>{if(this._zooming&&(o.zoom=t.number(a,l,e)),this._rotating&&(o.bearing=t.number(s,c,e)),this._pitching&&(o.pitch=t.number(r,h,e)),this._padding&&(o.interpolatePadding(n,u,e),m=o.centerPoint.add(d)),v)o.setLocationAtPoint(v,y);else{const t=o.zoomScale(o.zoom-a),i=l>a?Math.min(2,x):Math.max(.5,x),s=Math.pow(i,1-e),r=o.unproject(f.add(g.mult(e*s)).mult(t));o.setLocationAtPoint(o.renderWorldCopies?r.wrap():r,m)}this._fireMoveEvents(i)}),(t=>{this._afterEase(i,t)}),e),this}_prepareEase(e,i,o={}){this._moving=!0,this.fire(new t.Event("freezeElevation",{freeze:!0})),i||o.moving||this.fire(new t.Event("movestart",e)),this._zooming&&!o.zooming&&this.fire(new t.Event("zoomstart",e)),this._rotating&&!o.rotating&&this.fire(new t.Event("rotatestart",e)),this._pitching&&!o.pitching&&this.fire(new t.Event("pitchstart",e))}_fireMoveEvents(e){this.fire(new t.Event("move",e)),this._zooming&&this.fire(new t.Event("zoom",e)),this._rotating&&this.fire(new t.Event("rotate",e)),this._pitching&&this.fire(new t.Event("pitch",e))}_afterEase(e,i){if(this._easeId&&i&&this._easeId===i)return;delete this._easeId,this.fire(new t.Event("freezeElevation",{freeze:!1}));const o=this._zooming,a=this._rotating,s=this._pitching;this._moving=!1,this._zooming=!1,this._rotating=!1,this._pitching=!1,this._padding=!1,o&&this.fire(new t.Event("zoomend",e)),a&&this.fire(new t.Event("rotateend",e)),s&&this.fire(new t.Event("pitchend",e)),this.fire(new t.Event("moveend",e))}flyTo(e,i){if(!e.essential&&t.exported.prefersReducedMotion){const o=t.pick(e,["center","zoom","bearing","pitch","around"]);return this.jumpTo(o,i)}this.stop(),e=t.extend({offset:[0,0],speed:1.2,curve:1.42,easing:t.ease},e);const o=this.transform,a=this.getZoom(),s=this.getBearing(),r=this.getPitch(),n=this.getPadding(),l="zoom"in e?t.clamp(+e.zoom,o.minZoom,o.maxZoom):a,c="bearing"in e?this._normalizeBearing(e.bearing,s):s,h="pitch"in e?+e.pitch:r,u="padding"in e?e.padding:o.padding,d=o.zoomScale(l-a),m=t.pointGeometry.convert(e.offset);let p=o.centerPoint.add(m);const _=o.pointLocation(p),f=t.LngLat.convert(e.center||_);this._normalizeCenter(f);const g=o.project(_),x=o.project(f).sub(g);let v=e.curve;const y=Math.max(o.width,o.height),b=y/d,w=x.mag();if("minZoom"in e){const i=t.clamp(Math.min(e.minZoom,a,l),o.minZoom,o.maxZoom),s=y/o.zoomScale(i-a);v=Math.sqrt(s/w*2)}const T=v*v;function E(t){const e=(b*b-y*y+(t?-1:1)*T*T*w*w)/(2*(t?b:y)*T*w);return Math.log(Math.sqrt(e*e+1)-e)}function I(t){return(Math.exp(t)-Math.exp(-t))/2}function S(t){return(Math.exp(t)+Math.exp(-t))/2}const C=E(0);let z=function(t){return S(C)/S(C+v*t)},D=function(t){return y*((S(C)*(I(e=C+v*t)/S(e))-I(C))/T)/w;var e},P=(E(1)-C)/v;if(Math.abs(w)<1e-6||!isFinite(P)){if(Math.abs(y-b)<1e-6)return this.easeTo(e,i);const t=b<y?-1:1;P=Math.abs(Math.log(b/y))/v,D=function(){return 0},z=function(e){return Math.exp(t*v*e)}}return e.duration="duration"in e?+e.duration:1e3*P/("screenSpeed"in e?+e.screenSpeed/v:+e.speed),e.maxDuration&&e.duration>e.maxDuration&&(e.duration=0),this._zooming=!0,this._rotating=s!==c,this._pitching=h!==r,this._padding=!o.isPaddingEqual(u),this._prepareEase(i,!1),this._ease((e=>{const d=e*P,_=1/z(d);o.zoom=1===e?l:a+o.scaleZoom(_),this._rotating&&(o.bearing=t.number(s,c,e)),this._pitching&&(o.pitch=t.number(r,h,e)),this._padding&&(o.interpolatePadding(n,u,e),p=o.centerPoint.add(m));const v=1===e?f:o.unproject(g.add(x.mult(D(d))).mult(_));o.setLocationAtPoint(o.renderWorldCopies?v.wrap():v,p),this._fireMoveEvents(i)}),(()=>this._afterEase(i)),e),this}isEasing(){return!!this._easeFrameId}stop(){return this._stop()}_stop(t,e){if(this._easeFrameId&&(this._cancelRenderFrame(this._easeFrameId),delete this._easeFrameId,delete this._onEaseFrame),this._onEaseEnd){const t=this._onEaseEnd;delete this._onEaseEnd,t.call(this,e)}if(!t){const t=this.handlers;t&&t.stop(!1)}return this}_ease(e,i,o){!1===o.animate||0===o.duration?(e(1),i()):(this._easeStart=t.exported.now(),this._easeOptions=o,this._onEaseFrame=e,this._onEaseEnd=i,this._easeFrameId=this._requestRenderFrame(this._renderFrameCallback))}_renderFrameCallback(){const e=Math.min((t.exported.now()-this._easeStart)/this._easeOptions.duration,1);this._onEaseFrame(this._easeOptions.easing(e)),e<1?this._easeFrameId=this._requestRenderFrame(this._renderFrameCallback):this.stop()}_normalizeBearing(e,i){e=t.wrap(e,-180,180);const o=Math.abs(e-i);return Math.abs(e-360-i)<o&&(e-=360),Math.abs(e+360-i)<o&&(e+=360),e}_normalizeCenter(t){const e=this.transform;if(!e.renderWorldCopies||e.lngRange)return;const i=t.lng-e.center.lng;t.lng+=i>180?-360:i<-180?360:0}}class za{constructor(e={}){this.options=e,t.bindAll(["_toggleAttribution","_updateData","_updateCompact","_updateCompactMinimize"],this)}getDefaultPosition(){return"bottom-right"}onAdd(t){return this._map=t,this._compact=this.options&&this.options.compact,this._container=s.create("details","maplibregl-ctrl maplibregl-ctrl-attrib mapboxgl-ctrl mapboxgl-ctrl-attrib"),this._compactButton=s.create("summary","maplibregl-ctrl-attrib-button mapboxgl-ctrl-attrib-button",this._container),this._compactButton.addEventListener("click",this._toggleAttribution),this._setElementTitle(this._compactButton,"ToggleAttribution"),this._innerContainer=s.create("div","maplibregl-ctrl-attrib-inner mapboxgl-ctrl-attrib-inner",this._container),this._updateAttributions(),this._updateCompact(),this._map.on("styledata",this._updateData),this._map.on("sourcedata",this._updateData),this._map.on("resize",this._updateCompact),this._map.on("drag",this._updateCompactMinimize),this._container}onRemove(){s.remove(this._container),this._map.off("styledata",this._updateData),this._map.off("sourcedata",this._updateData),this._map.off("resize",this._updateCompact),this._map.off("drag",this._updateCompactMinimize),this._map=void 0,this._compact=void 0,this._attribHTML=void 0}_setElementTitle(t,e){const i=this._map._getUIString(`AttributionControl.${e}`);t.title=i,t.setAttribute("aria-label",i)}_toggleAttribution(){this._container.classList.contains("maplibregl-compact")&&(this._container.classList.contains("maplibregl-compact-show")?(this._container.setAttribute("open",""),this._container.classList.remove("maplibregl-compact-show","mapboxgl-compact-show")):(this._container.classList.add("maplibregl-compact-show","mapboxgl-compact-show"),this._container.removeAttribute("open")))}_updateData(t){!t||"metadata"!==t.sourceDataType&&"visibility"!==t.sourceDataType&&"style"!==t.dataType||this._updateAttributions()}_updateAttributions(){if(!this._map.style)return;let t=[];if(this.options.customAttribution&&(Array.isArray(this.options.customAttribution)?t=t.concat(this.options.customAttribution.map((t=>"string"!=typeof t?"":t))):"string"==typeof this.options.customAttribution&&t.push(this.options.customAttribution)),this._map.style.stylesheet){const t=this._map.style.stylesheet;this.styleOwner=t.owner,this.styleId=t.id}const e=this._map.style.sourceCaches;for(const i in e){const o=e[i];if(null==o?void 0:o.used){const e=o.getSource();e.attribution&&t.indexOf(e.attribution)<0&&t.push(e.attribution)}}t=t.filter((t=>String(t).trim())),t.sort(((t,e)=>t.length-e.length)),t=t.filter(((e,i)=>{for(let o=i+1;o<t.length;o++)if(t[o].indexOf(e)>=0)return!1;return!0}));const i=t.join(" | ");i!==this._attribHTML&&(this._attribHTML=i,t.length?(this._innerContainer.innerHTML=i,this._container.classList.remove("maplibregl-attrib-empty","mapboxgl-attrib-empty")):this._container.classList.add("maplibregl-attrib-empty","mapboxgl-attrib-empty"),this._updateCompact(),this._editLink=null)}_updateCompact(){this._map.getCanvasContainer().offsetWidth<=640||this._compact?!1===this._compact?this._container.setAttribute("open",""):this._container.classList.contains("maplibregl-compact")||this._container.classList.contains("maplibregl-attrib-empty")||(this._container.setAttribute("open",""),this._container.classList.add("maplibregl-compact","mapboxgl-compact","maplibregl-compact-show","mapboxgl-compact-show")):(this._container.setAttribute("open",""),this._container.classList.contains("maplibregl-compact")&&this._container.classList.remove("maplibregl-compact","maplibregl-compact-show","mapboxgl-compact","mapboxgl-compact-show"))}_updateCompactMinimize(){this._container.classList.contains("maplibregl-compact")&&this._container.classList.contains("maplibregl-compact-show")&&this._container.classList.remove("maplibregl-compact-show","mapboxgl-compact-show")}}class Da{constructor(e={}){this.options=e,t.bindAll(["_updateCompact"],this)}getDefaultPosition(){return"bottom-left"}onAdd(t){this._map=t,this._compact=this.options&&this.options.compact,this._container=s.create("div","maplibregl-ctrl mapboxgl-ctrl");const e=s.create("a","maplibregl-ctrl-logo mapboxgl-ctrl-logo");return e.target="_blank",e.rel="noopener nofollow",e.href="https://maplibre.org/",e.setAttribute("aria-label",this._map._getUIString("LogoControl.Title")),e.setAttribute("rel","noopener nofollow"),this._container.appendChild(e),this._container.style.display="block",this._map.on("resize",this._updateCompact),this._updateCompact(),this._container}onRemove(){s.remove(this._container),this._map.off("resize",this._updateCompact),this._map=void 0,this._compact=void 0}_updateCompact(){const t=this._container.children;if(t.length){const e=t[0];this._map.getCanvasContainer().offsetWidth<=640||this._compact?!1!==this._compact&&e.classList.add("maplibregl-compact","mapboxgl-compact"):e.classList.remove("maplibregl-compact","mapboxgl-compact")}}}class Pa{constructor(){this._queue=[],this._id=0,this._cleared=!1,this._currentlyRunning=!1}add(t){const e=++this._id;return this._queue.push({callback:t,id:e,cancelled:!1}),e}remove(t){const e=this._currentlyRunning,i=e?this._queue.concat(e):this._queue;for(const e of i)if(e.id===t)return void(e.cancelled=!0)}run(t=0){const e=this._currentlyRunning=this._queue;this._queue=[];for(const i of e)if(!i.cancelled&&(i.callback(t),this._cleared))break;this._cleared=!1,this._currentlyRunning=!1}clear(){this._currentlyRunning&&(this._cleared=!0),this._queue=[]}}const Aa={"AttributionControl.ToggleAttribution":"Toggle attribution","AttributionControl.MapFeedback":"Map feedback","FullscreenControl.Enter":"Enter fullscreen","FullscreenControl.Exit":"Exit fullscreen","GeolocateControl.FindMyLocation":"Find my location","GeolocateControl.LocationNotAvailable":"Location not available","LogoControl.Title":"Mapbox logo","NavigationControl.ResetBearing":"Reset bearing to north","NavigationControl.ZoomIn":"Zoom in","NavigationControl.ZoomOut":"Zoom out","ScaleControl.Feet":"ft","ScaleControl.Meters":"m","ScaleControl.Kilometers":"km","ScaleControl.Miles":"mi","ScaleControl.NauticalMiles":"nm","TerrainControl.enableTerrain":"Enable terrain","TerrainControl.disableTerrain":"Disable terrain"},Ma={center:[0,0],zoom:0,bearing:0,pitch:0,minZoom:-2,maxZoom:22,minPitch:0,maxPitch:60,interactive:!0,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,bearingSnap:7,clickTolerance:3,pitchWithRotate:!0,hash:!1,attributionControl:!0,maplibreLogo:!1,failIfMajorPerformanceCaveat:!1,preserveDrawingBuffer:!1,trackResize:!0,renderWorldCopies:!0,refreshExpiredTiles:!0,maxTileCacheSize:null,localIdeographFontFamily:"sans-serif",transformRequest:null,fadeDuration:300,crossSourceCollisions:!0};class Ra extends Ca{constructor(e){var i;if(t.PerformanceUtils.mark(t.PerformanceMarkers.create),null!=(e=t.extend({},Ma,e)).minZoom&&null!=e.maxZoom&&e.minZoom>e.maxZoom)throw new Error("maxZoom must be greater than or equal to minZoom");if(null!=e.minPitch&&null!=e.maxPitch&&e.minPitch>e.maxPitch)throw new Error("maxPitch must be greater than or equal to minPitch");if(null!=e.minPitch&&e.minPitch<0)throw new Error("minPitch must be greater than or equal to 0");if(null!=e.maxPitch&&e.maxPitch>85)throw new Error("maxPitch must be less than or equal to 85");if(super(new Ao(e.minZoom,e.maxZoom,e.minPitch,e.maxPitch,e.renderWorldCopies),{bearingSnap:e.bearingSnap}),this._interactive=e.interactive,this._maxTileCacheSize=e.maxTileCacheSize,this._failIfMajorPerformanceCaveat=e.failIfMajorPerformanceCaveat,this._preserveDrawingBuffer=e.preserveDrawingBuffer,this._antialias=e.antialias,this._trackResize=e.trackResize,this._bearingSnap=e.bearingSnap,this._refreshExpiredTiles=e.refreshExpiredTiles,this._fadeDuration=e.fadeDuration,this._crossSourceCollisions=e.crossSourceCollisions,this._crossFadingFactor=1,this._collectResourceTiming=e.collectResourceTiming,this._renderTaskQueue=new Pa,this._controls=[],this._mapId=t.uniqueId(),this._locale=t.extend({},Aa,e.locale),this._clickTolerance=e.clickTolerance,this._pixelRatio=null!==(i=e.pixelRatio)&&void 0!==i?i:devicePixelRatio,this._requestManager=new r(e.transformRequest),"string"==typeof e.container){if(this._container=document.getElementById(e.container),!this._container)throw new Error(`Container '${e.container}' not found.`)}else{if(!(e.container instanceof HTMLElement))throw new Error("Invalid type: 'container' must be a String or HTMLElement.");this._container=e.container}if(e.maxBounds&&this.setMaxBounds(e.maxBounds),t.bindAll(["_onWindowOnline","_onWindowResize","_onMapScroll","_contextLost","_contextRestored"],this),this._setupContainer(),this._setupPainter(),void 0===this.painter)throw new Error("Failed to initialize WebGL.");this.on("move",(()=>this._update(!1))),this.on("moveend",(()=>this._update(!1))),this.on("zoom",(()=>this._update(!0))),this.on("terrain",(()=>{this.painter.terrainFacilitator.dirty=!0,this._update(!0)})),"undefined"!=typeof window&&(addEventListener("online",this._onWindowOnline,!1),addEventListener("resize",this._onWindowResize,!1),addEventListener("orientationchange",this._onWindowResize,!1)),this.handlers=new Ia(this,e),this._hash=e.hash&&new Mo("string"==typeof e.hash&&e.hash||void 0).addTo(this),this._hash&&this._hash._onHashChange()||(this.jumpTo({center:e.center,zoom:e.zoom,bearing:e.bearing,pitch:e.pitch}),e.bounds&&(this.resize(),this.fitBounds(e.bounds,t.extend({},e.fitBoundsOptions,{duration:0})))),this.resize(),this._localIdeographFontFamily=e.localIdeographFontFamily,e.style&&this.setStyle(e.style,{localIdeographFontFamily:e.localIdeographFontFamily}),e.attributionControl&&this.addControl(new za({customAttribution:e.customAttribution})),e.maplibreLogo&&this.addControl(new Da,e.logoPosition),this.on("style.load",(()=>{this.transform.unmodified&&this.jumpTo(this.style.stylesheet)})),this.on("data",(e=>{this._update("style"===e.dataType),this.fire(new t.Event(`${e.dataType}data`,e))})),this.on("dataloading",(e=>{this.fire(new t.Event(`${e.dataType}dataloading`,e))})),this.on("dataabort",(e=>{this.fire(new t.Event("sourcedataabort",e))}))}_getMapId(){return this._mapId}addControl(e,i){if(void 0===i&&(i=e.getDefaultPosition?e.getDefaultPosition():"top-right"),!e||!e.onAdd)return this.fire(new t.ErrorEvent(new Error("Invalid argument to map.addControl(). Argument must be a control with onAdd and onRemove methods.")));const o=e.onAdd(this);this._controls.push(e);const a=this._controlPositions[i];return-1!==i.indexOf("bottom")?a.insertBefore(o,a.firstChild):a.appendChild(o),this}removeControl(e){if(!e||!e.onRemove)return this.fire(new t.ErrorEvent(new Error("Invalid argument to map.removeControl(). Argument must be a control with onAdd and onRemove methods.")));const i=this._controls.indexOf(e);return i>-1&&this._controls.splice(i,1),e.onRemove(this),this}hasControl(t){return this._controls.indexOf(t)>-1}resize(e){const i=this._containerDimensions(),o=i[0],a=i[1];this._resizeCanvas(o,a,this.getPixelRatio()),this.transform.resize(o,a),this.painter.resize(o,a,this.getPixelRatio());const s=!this._moving;return s&&(this.stop(),this.fire(new t.Event("movestart",e)).fire(new t.Event("move",e))),this.fire(new t.Event("resize",e)),s&&this.fire(new t.Event("moveend",e)),this}getPixelRatio(){return this._pixelRatio}setPixelRatio(t){const[e,i]=this._containerDimensions();this._pixelRatio=t,this._resizeCanvas(e,i,t),this.painter.resize(e,i,t)}getBounds(){return this.transform.getBounds()}getMaxBounds(){return this.transform.getMaxBounds()}setMaxBounds(e){return this.transform.setMaxBounds(t.LngLatBounds.convert(e)),this._update()}setMinZoom(t){if((t=null==t?-2:t)>=-2&&t<=this.transform.maxZoom)return this.transform.minZoom=t,this._update(),this.getZoom()<t&&this.setZoom(t),this;throw new Error("minZoom must be between -2 and the current maxZoom, inclusive")}getMinZoom(){return this.transform.minZoom}setMaxZoom(t){if((t=null==t?22:t)>=this.transform.minZoom)return this.transform.maxZoom=t,this._update(),this.getZoom()>t&&this.setZoom(t),this;throw new Error("maxZoom must be greater than the current minZoom")}getMaxZoom(){return this.transform.maxZoom}setMinPitch(t){if((t=null==t?0:t)<0)throw new Error("minPitch must be greater than or equal to 0");if(t>=0&&t<=this.transform.maxPitch)return this.transform.minPitch=t,this._update(),this.getPitch()<t&&this.setPitch(t),this;throw new Error("minPitch must be between 0 and the current maxPitch, inclusive")}getMinPitch(){return this.transform.minPitch}setMaxPitch(t){if((t=null==t?60:t)>85)throw new Error("maxPitch must be less than or equal to 85");if(t>=this.transform.minPitch)return this.transform.maxPitch=t,this._update(),this.getPitch()>t&&this.setPitch(t),this;throw new Error("maxPitch must be greater than the current minPitch")}getMaxPitch(){return this.transform.maxPitch}getRenderWorldCopies(){return this.transform.renderWorldCopies}setRenderWorldCopies(t){return this.transform.renderWorldCopies=t,this._update()}project(e){return this.transform.locationPoint(t.LngLat.convert(e),this.style&&this.style.terrain)}unproject(e){return this.transform.pointLocation(t.pointGeometry.convert(e),this.style&&this.style.terrain)}isMoving(){return this._moving||this.handlers.isMoving()}isZooming(){return this._zooming||this.handlers.isZooming()}isRotating(){return this._rotating||this.handlers.isRotating()}_createDelegatedListener(t,e,i){if("mouseenter"===t||"mouseover"===t){let o=!1;const a=a=>{const s=this.getLayer(e)?this.queryRenderedFeatures(a.point,{layers:[e]}):[];s.length?o||(o=!0,i.call(this,new Go(t,this,a.originalEvent,{features:s}))):o=!1};return{layer:e,listener:i,delegates:{mousemove:a,mouseout:()=>{o=!1}}}}if("mouseleave"===t||"mouseout"===t){let o=!1;const a=a=>{(this.getLayer(e)?this.queryRenderedFeatures(a.point,{layers:[e]}):[]).length?o=!0:o&&(o=!1,i.call(this,new Go(t,this,a.originalEvent)))},s=e=>{o&&(o=!1,i.call(this,new Go(t,this,e.originalEvent)))};return{layer:e,listener:i,delegates:{mousemove:a,mouseout:s}}}{const o=t=>{const o=this.getLayer(e)?this.queryRenderedFeatures(t.point,{layers:[e]}):[];o.length&&(t.features=o,i.call(this,t),delete t.features)};return{layer:e,listener:i,delegates:{[t]:o}}}}on(t,e,i){if(void 0===i)return super.on(t,e);const o=this._createDelegatedListener(t,e,i);this._delegatedListeners=this._delegatedListeners||{},this._delegatedListeners[t]=this._delegatedListeners[t]||[],this._delegatedListeners[t].push(o);for(const t in o.delegates)this.on(t,o.delegates[t]);return this}once(t,e,i){if(void 0===i)return super.once(t,e);const o=this._createDelegatedListener(t,e,i);for(const t in o.delegates)this.once(t,o.delegates[t]);return this}off(t,e,i){return void 0===i?super.off(t,e):(this._delegatedListeners&&this._delegatedListeners[t]&&(o=>{const a=this._delegatedListeners[t];for(let t=0;t<a.length;t++){const o=a[t];if(o.layer===e&&o.listener===i){for(const t in o.delegates)this.off(t,o.delegates[t]);return a.splice(t,1),this}}})(),this)}queryRenderedFeatures(e,i){if(!this.style)return[];let o;if(void 0!==i||void 0===e||e instanceof t.pointGeometry||Array.isArray(e)||(i=e,e=void 0),i=i||{},(e=e||[[0,0],[this.transform.width,this.transform.height]])instanceof t.pointGeometry||"number"==typeof e[0])o=[t.pointGeometry.convert(e)];else{const i=t.pointGeometry.convert(e[0]),a=t.pointGeometry.convert(e[1]);o=[i,new t.pointGeometry(a.x,i.y),a,new t.pointGeometry(i.x,a.y),i]}return this.style.queryRenderedFeatures(o,i,this.transform)}querySourceFeatures(t,e){return this.style.querySourceFeatures(t,e)}setStyle(e,i){return!1!==(i=t.extend({},{localIdeographFontFamily:this._localIdeographFontFamily},i)).diff&&i.localIdeographFontFamily===this._localIdeographFontFamily&&this.style&&e?(this._diffStyle(e,i),this):(this._localIdeographFontFamily=i.localIdeographFontFamily,this._updateStyle(e,i))}setTransformRequest(t){return this._requestManager.setTransformRequest(t),this}_getUIString(t){const e=this._locale[t];if(null==e)throw new Error(`Missing UI string '${t}'`);return e}_updateStyle(t,e){return this.style&&(this.style.setEventedParent(null),this.style._remove()),t?(this.style=new De(this,e||{}),this.style.setEventedParent(this,{style:this.style}),"string"==typeof t?this.style.loadURL(t):this.style.loadJSON(t),this):(delete this.style,this)}_lazyInitEmptyStyle(){this.style||(this.style=new De(this,{}),this.style.setEventedParent(this,{style:this.style}),this.style.loadEmpty())}_diffStyle(e,i){if("string"==typeof e){const o=this._requestManager.transformRequest(e,t.ResourceType.Style);t.getJSON(o,((e,o)=>{e?this.fire(new t.ErrorEvent(e)):o&&this._updateDiff(o,i)}))}else"object"==typeof e&&this._updateDiff(e,i)}_updateDiff(e,i){try{this.style.setState(e)&&this._update(!0)}catch(o){t.warnOnce(`Unable to perform style diff: ${o.message||o.error||o}.  Rebuilding the style from scratch.`),this._updateStyle(e,i)}}getStyle(){if(this.style)return this.style.serialize()}isStyleLoaded(){return this.style?this.style.loaded():t.warnOnce("There is no style added to the map.")}addSource(t,e){return this._lazyInitEmptyStyle(),this.style.addSource(t,e),this._update(!0)}isSourceLoaded(e){const i=this.style&&this.style.sourceCaches[e];if(void 0!==i)return i.loaded();this.fire(new t.ErrorEvent(new Error(`There is no source with ID '${e}'`)))}setTerrain(t){return this.style.setTerrain(t),this}getTerrain(){return this.style.terrain&&this.style.terrain.options}areTilesLoaded(){const t=this.style&&this.style.sourceCaches;for(const e in t){const i=t[e]._tiles;for(const t in i){const e=i[t];if("loaded"!==e.state&&"errored"!==e.state)return!1}}return!0}addSourceType(t,e,i){return this._lazyInitEmptyStyle(),this.style.addSourceType(t,e,i)}removeSource(t){return this.style.removeSource(t),this._update(!0)}getSource(t){return this.style.getSource(t)}addImage(e,i,{pixelRatio:o=1,sdf:a=!1,stretchX:s,stretchY:r,content:n}={}){if(this._lazyInitEmptyStyle(),i instanceof HTMLImageElement||t.isImageBitmap(i)){const{width:l,height:c,data:h}=t.exported.getImageData(i);this.style.addImage(e,{data:new t.RGBAImage({width:l,height:c},h),pixelRatio:o,stretchX:s,stretchY:r,content:n,sdf:a,version:0})}else{if(void 0===i.width||void 0===i.height)return this.fire(new t.ErrorEvent(new Error("Invalid arguments to map.addImage(). The second argument must be an `HTMLImageElement`, `ImageData`, `ImageBitmap`, or object with `width`, `height`, and `data` properties with the same format as `ImageData`")));{const{width:l,height:c,data:h}=i,u=i;this.style.addImage(e,{data:new t.RGBAImage({width:l,height:c},new Uint8Array(h)),pixelRatio:o,stretchX:s,stretchY:r,content:n,sdf:a,version:0,userImage:u}),u.onAdd&&u.onAdd(this,e)}}}updateImage(e,i){const o=this.style.getImage(e);if(!o)return this.fire(new t.ErrorEvent(new Error("The map has no image with that id. If you are adding a new image use `map.addImage(...)` instead.")));const a=i instanceof HTMLImageElement||t.isImageBitmap(i)?t.exported.getImageData(i):i,{width:s,height:r,data:n}=a;if(void 0===s||void 0===r)return this.fire(new t.ErrorEvent(new Error("Invalid arguments to map.updateImage(). The second argument must be an `HTMLImageElement`, `ImageData`, `ImageBitmap`, or object with `width`, `height`, and `data` properties with the same format as `ImageData`")));if(s!==o.data.width||r!==o.data.height)return this.fire(new t.ErrorEvent(new Error("The width and height of the updated image must be that same as the previous version of the image")));const l=!(i instanceof HTMLImageElement||t.isImageBitmap(i));o.data.replace(n,l),this.style.updateImage(e,o)}hasImage(e){return e?!!this.style.getImage(e):(this.fire(new t.ErrorEvent(new Error("Missing required image id"))),!1)}removeImage(t){this.style.removeImage(t)}loadImage(e,i){t.getImage(this._requestManager.transformRequest(e,t.ResourceType.Image),i)}listImages(){return this.style.listImages()}addLayer(t,e){return this._lazyInitEmptyStyle(),this.style.addLayer(t,e),this._update(!0)}moveLayer(t,e){return this.style.moveLayer(t,e),this._update(!0)}removeLayer(t){return this.style.removeLayer(t),this._update(!0)}getLayer(t){return this.style.getLayer(t)}setLayerZoomRange(t,e,i){return this.style.setLayerZoomRange(t,e,i),this._update(!0)}setFilter(t,e,i={}){return this.style.setFilter(t,e,i),this._update(!0)}getFilter(t){return this.style.getFilter(t)}setPaintProperty(t,e,i,o={}){return this.style.setPaintProperty(t,e,i,o),this._update(!0)}getPaintProperty(t,e){return this.style.getPaintProperty(t,e)}setLayoutProperty(t,e,i,o={}){return this.style.setLayoutProperty(t,e,i,o),this._update(!0)}getLayoutProperty(t,e){return this.style.getLayoutProperty(t,e)}setLight(t,e={}){return this._lazyInitEmptyStyle(),this.style.setLight(t,e),this._update(!0)}getLight(){return this.style.getLight()}setFeatureState(t,e){return this.style.setFeatureState(t,e),this._update()}removeFeatureState(t,e){return this.style.removeFeatureState(t,e),this._update()}getFeatureState(t){return this.style.getFeatureState(t)}getContainer(){return this._container}getCanvasContainer(){return this._canvasContainer}getCanvas(){return this._canvas}_containerDimensions(){let t=0,e=0;return this._container&&(t=this._container.clientWidth||400,e=this._container.clientHeight||300),[t,e]}_setupContainer(){const t=this._container;t.classList.add("maplibregl-map","mapboxgl-map");const e=this._canvasContainer=s.create("div","maplibregl-canvas-container mapboxgl-canvas-container",t);this._interactive&&e.classList.add("maplibregl-interactive","mapboxgl-interactive"),this._canvas=s.create("canvas","maplibregl-canvas mapboxgl-canvas",e),this._canvas.addEventListener("webglcontextlost",this._contextLost,!1),this._canvas.addEventListener("webglcontextrestored",this._contextRestored,!1),this._canvas.setAttribute("tabindex","0"),this._canvas.setAttribute("aria-label","Map"),this._canvas.setAttribute("role","region");const i=this._containerDimensions();this._resizeCanvas(i[0],i[1],this.getPixelRatio());const o=this._controlContainer=s.create("div","maplibregl-control-container mapboxgl-control-container",t),a=this._controlPositions={};["top-left","top-right","bottom-left","bottom-right"].forEach((t=>{a[t]=s.create("div",`maplibregl-ctrl-${t} mapboxgl-ctrl-${t}`,o)})),this._container.addEventListener("scroll",this._onMapScroll,!1)}_resizeCanvas(t,e,i){this._canvas.width=i*t,this._canvas.height=i*e,this._canvas.style.width=`${t}px`,this._canvas.style.height=`${e}px`}_setupPainter(){const i=t.extend({},e.webGLContextAttributes,{failIfMajorPerformanceCaveat:this._failIfMajorPerformanceCaveat,preserveDrawingBuffer:this._preserveDrawingBuffer,antialias:this._antialias||!1}),o=this._canvas.getContext("webgl",i)||this._canvas.getContext("experimental-webgl",i);o?(this.painter=new Co(o,this.transform),t.exported$1.testSupport(o)):this.fire(new t.ErrorEvent(new Error("Failed to initialize WebGL")))}_contextLost(e){e.preventDefault(),this._frame&&(this._frame.cancel(),this._frame=null),this.fire(new t.Event("webglcontextlost",{originalEvent:e}))}_contextRestored(e){this._setupPainter(),this.resize(),this._update(),this.fire(new t.Event("webglcontextrestored",{originalEvent:e}))}_onMapScroll(t){if(t.target===this._container)return this._container.scrollTop=0,this._container.scrollLeft=0,!1}loaded(){return!this._styleDirty&&!this._sourcesDirty&&!!this.style&&this.style.loaded()}_update(t){return this.style?(this._styleDirty=this._styleDirty||t,this._sourcesDirty=!0,this.triggerRepaint(),this):this}_requestRenderFrame(t){return this._update(),this._renderTaskQueue.add(t)}_cancelRenderFrame(t){this._renderTaskQueue.remove(t)}_render(e){let i,o=0;const a=this.painter.context.extTimerQuery;if(this.listens("gpu-timing-frame")&&(i=a.createQueryEXT(),a.beginQueryEXT(a.TIME_ELAPSED_EXT,i),o=t.exported.now()),this.painter.context.setDirty(),this.painter.setBaseState(),this._renderTaskQueue.run(e),this._removed)return;let s=!1;if(this.style&&this._styleDirty){this._styleDirty=!1;const e=this.transform.zoom,i=t.exported.now();this.style.zoomHistory.update(e,i);const o=new t.EvaluationParameters(e,{now:i,fadeDuration:this._fadeDuration,zoomHistory:this.style.zoomHistory,transition:this.style.getTransition()}),a=o.crossFadingFactor();1===a&&a===this._crossFadingFactor||(s=!0,this._crossFadingFactor=a),this.style.update(o)}if(this.style&&this._sourcesDirty&&(this._sourcesDirty=!1,this.style._updateSources(this.transform)),this.style.terrain&&this.style.terrain.sourceCache.update(this.transform,this.style.terrain),this.transform.updateElevation(this.style.terrain),this._placementDirty=this.style&&this.style._updatePlacement(this.painter.transform,this.showCollisionBoxes,this._fadeDuration,this._crossSourceCollisions),this.painter.render(this.style,{showTileBoundaries:this.showTileBoundaries,showOverdrawInspector:this._showOverdrawInspector,rotating:this.isRotating(),zooming:this.isZooming(),moving:this.isMoving(),fadeDuration:this._fadeDuration,showPadding:this.showPadding,gpuTiming:!!this.listens("gpu-timing-layer")}),this.fire(new t.Event("render")),this.loaded()&&!this._loaded&&(this._loaded=!0,t.PerformanceUtils.mark(t.PerformanceMarkers.load),this.fire(new t.Event("load"))),this.style&&(this.style.hasTransitions()||s)&&(this._styleDirty=!0),this.style&&!this._placementDirty&&this.style._releaseSymbolFadeTiles(),this.listens("gpu-timing-frame")){const e=t.exported.now()-o;a.endQueryEXT(a.TIME_ELAPSED_EXT,i),setTimeout((()=>{const o=a.getQueryObjectEXT(i,a.QUERY_RESULT_EXT)/1e6;a.deleteQueryEXT(i),this.fire(new t.Event("gpu-timing-frame",{cpuTime:e,gpuTime:o}))}),50)}if(this.listens("gpu-timing-layer")){const e=this.painter.collectGpuTimers();setTimeout((()=>{const i=this.painter.queryGpuTimers(e);this.fire(new t.Event("gpu-timing-layer",{layerTimes:i}))}),50)}const r=this._sourcesDirty||this._styleDirty||this._placementDirty;return r||this._repaint?this.triggerRepaint():!this.isMoving()&&this.loaded()&&this.fire(new t.Event("idle")),!this._loaded||this._fullyLoaded||r||(this._fullyLoaded=!0,t.PerformanceUtils.mark(t.PerformanceMarkers.fullLoad)),this}redraw(){return this.style&&(this._frame&&(this._frame.cancel(),this._frame=null),this._render(0)),this}remove(){this._hash&&this._hash.remove();for(const t of this._controls)t.onRemove(this);this._controls=[],this._frame&&(this._frame.cancel(),this._frame=null),this._renderTaskQueue.clear(),this.painter.destroy(),this.handlers.destroy(),delete this.handlers,this.setStyle(null),"undefined"!=typeof window&&(removeEventListener("resize",this._onWindowResize,!1),removeEventListener("orientationchange",this._onWindowResize,!1),removeEventListener("online",this._onWindowOnline,!1));const e=this.painter.context.gl.getExtension("WEBGL_lose_context");e&&e.loseContext(),this._canvas.removeEventListener("webglcontextrestored",this._contextRestored,!1),this._canvas.removeEventListener("webglcontextlost",this._contextLost,!1),s.remove(this._canvasContainer),s.remove(this._controlContainer),this._container.classList.remove("maplibregl-map","mapboxgl-map"),t.PerformanceUtils.clearMetrics(),this._removed=!0,this.fire(new t.Event("remove"))}triggerRepaint(){this.style&&!this._frame&&(this._frame=t.exported.frame((e=>{t.PerformanceUtils.frame(e),this._frame=null,this._render(e)})))}_onWindowOnline(){this._update()}_onWindowResize(t){this._trackResize&&this.resize({originalEvent:t})._update()}get showTileBoundaries(){return!!this._showTileBoundaries}set showTileBoundaries(t){this._showTileBoundaries!==t&&(this._showTileBoundaries=t,this._update())}get showPadding(){return!!this._showPadding}set showPadding(t){this._showPadding!==t&&(this._showPadding=t,this._update())}get showCollisionBoxes(){return!!this._showCollisionBoxes}set showCollisionBoxes(t){this._showCollisionBoxes!==t&&(this._showCollisionBoxes=t,t?this.style._generateCollisionBoxes():this._update())}get showOverdrawInspector(){return!!this._showOverdrawInspector}set showOverdrawInspector(t){this._showOverdrawInspector!==t&&(this._showOverdrawInspector=t,this._update())}get repaint(){return!!this._repaint}set repaint(t){this._repaint!==t&&(this._repaint=t,this.triggerRepaint())}get vertices(){return!!this._vertices}set vertices(t){this._vertices=t,this._update()}_setCacheLimits(e,i){t.setCacheLimits(e,i)}}const La={showCompass:!0,showZoom:!0,visualizePitch:!1};class ka{constructor(e,i,o=!1){this._clickTolerance=10,this.element=i,this.mouseRotate=new ta({clickTolerance:e.dragRotate._mouseRotate._clickTolerance}),this.map=e,o&&(this.mousePitch=new ea({clickTolerance:e.dragRotate._mousePitch._clickTolerance})),t.bindAll(["mousedown","mousemove","mouseup","touchstart","touchmove","touchend","reset"],this),s.addEventListener(i,"mousedown",this.mousedown),s.addEventListener(i,"touchstart",this.touchstart,{passive:!1}),s.addEventListener(i,"touchmove",this.touchmove),s.addEventListener(i,"touchend",this.touchend),s.addEventListener(i,"touchcancel",this.reset)}down(t,e){this.mouseRotate.mousedown(t,e),this.mousePitch&&this.mousePitch.mousedown(t,e),s.disableDrag()}move(t,e){const i=this.map,o=this.mouseRotate.mousemoveWindow(t,e);if(o&&o.bearingDelta&&i.setBearing(i.getBearing()+o.bearingDelta),this.mousePitch){const o=this.mousePitch.mousemoveWindow(t,e);o&&o.pitchDelta&&i.setPitch(i.getPitch()+o.pitchDelta)}}off(){const t=this.element;s.removeEventListener(t,"mousedown",this.mousedown),s.removeEventListener(t,"touchstart",this.touchstart,{passive:!1}),s.removeEventListener(t,"touchmove",this.touchmove),s.removeEventListener(t,"touchend",this.touchend),s.removeEventListener(t,"touchcancel",this.reset),this.offTemp()}offTemp(){s.enableDrag(),s.removeEventListener(window,"mousemove",this.mousemove),s.removeEventListener(window,"mouseup",this.mouseup)}mousedown(e){this.down(t.extend({},e,{ctrlKey:!0,preventDefault:()=>e.preventDefault()}),s.mousePos(this.element,e)),s.addEventListener(window,"mousemove",this.mousemove),s.addEventListener(window,"mouseup",this.mouseup)}mousemove(t){this.move(t,s.mousePos(this.element,t))}mouseup(t){this.mouseRotate.mouseupWindow(t),this.mousePitch&&this.mousePitch.mouseupWindow(t),this.offTemp()}touchstart(t){1!==t.targetTouches.length?this.reset():(this._startPos=this._lastPos=s.touchPos(this.element,t.targetTouches)[0],this.down({type:"mousedown",button:0,ctrlKey:!0,preventDefault:()=>t.preventDefault()},this._startPos))}touchmove(t){1!==t.targetTouches.length?this.reset():(this._lastPos=s.touchPos(this.element,t.targetTouches)[0],this.move({preventDefault:()=>t.preventDefault()},this._lastPos))}touchend(t){0===t.targetTouches.length&&this._startPos&&this._lastPos&&this._startPos.dist(this._lastPos)<this._clickTolerance&&this.element.click(),this.reset()}reset(){this.mouseRotate.reset(),this.mousePitch&&this.mousePitch.reset(),delete this._startPos,delete this._lastPos,this.offTemp()}}function Ba(e,i,o){if(e=new t.LngLat(e.lng,e.lat),i){const a=new t.LngLat(e.lng-360,e.lat),s=new t.LngLat(e.lng+360,e.lat),r=o.locationPoint(e).distSqr(i);o.locationPoint(a).distSqr(i)<r?e=a:o.locationPoint(s).distSqr(i)<r&&(e=s)}for(;Math.abs(e.lng-o.center.lng)>180;){const t=o.locationPoint(e);if(t.x>=0&&t.y>=0&&t.x<=o.width&&t.y<=o.height)break;e.lng>o.center.lng?e.lng-=360:e.lng+=360}return e}const Fa={center:"translate(-50%,-50%)",top:"translate(-50%,0)","top-left":"translate(0,0)","top-right":"translate(-100%,0)",bottom:"translate(-50%,-100%)","bottom-left":"translate(0,-100%)","bottom-right":"translate(-100%,-100%)",left:"translate(0,-50%)",right:"translate(-100%,-50%)"};function Oa(t,e,i){const o=t.classList;for(const t in Fa)o.remove(`maplibregl-${i}-anchor-${t}`,`mapboxgl-${i}-anchor-${t}`);o.add(`maplibregl-${i}-anchor-${e}`,`mapboxgl-${i}-anchor-${e}`)}class Ua extends t.Evented{constructor(e,i){if(super(),(e instanceof HTMLElement||i)&&(e=t.extend({element:e},i)),t.bindAll(["_update","_onMove","_onUp","_addDragHandler","_onMapClick","_onKeyPress"],this),this._anchor=e&&e.anchor||"center",this._color=e&&e.color||"#3FB1CE",this._scale=e&&e.scale||1,this._draggable=e&&e.draggable||!1,this._clickTolerance=e&&e.clickTolerance||0,this._isDragging=!1,this._state="inactive",this._rotation=e&&e.rotation||0,this._rotationAlignment=e&&e.rotationAlignment||"auto",this._pitchAlignment=e&&e.pitchAlignment&&"auto"!==e.pitchAlignment?e.pitchAlignment:this._rotationAlignment,e&&e.element)this._element=e.element,this._offset=t.pointGeometry.convert(e&&e.offset||[0,0]);else{this._defaultMarker=!0,this._element=s.create("div"),this._element.setAttribute("aria-label","Map marker");const i=s.createNS("http://www.w3.org/2000/svg","svg"),o=41,a=27;i.setAttributeNS(null,"display","block"),i.setAttributeNS(null,"height",`${o}px`),i.setAttributeNS(null,"width",`${a}px`),i.setAttributeNS(null,"viewBox",`0 0 ${a} ${o}`);const r=s.createNS("http://www.w3.org/2000/svg","g");r.setAttributeNS(null,"stroke","none"),r.setAttributeNS(null,"stroke-width","1"),r.setAttributeNS(null,"fill","none"),r.setAttributeNS(null,"fill-rule","evenodd");const n=s.createNS("http://www.w3.org/2000/svg","g");n.setAttributeNS(null,"fill-rule","nonzero");const l=s.createNS("http://www.w3.org/2000/svg","g");l.setAttributeNS(null,"transform","translate(3.0, 29.0)"),l.setAttributeNS(null,"fill","#000000");const c=[{rx:"10.5",ry:"5.25002273"},{rx:"10.5",ry:"5.25002273"},{rx:"9.5",ry:"4.77275007"},{rx:"8.5",ry:"4.29549936"},{rx:"7.5",ry:"3.81822308"},{rx:"6.5",ry:"3.34094679"},{rx:"5.5",ry:"2.86367051"},{rx:"4.5",ry:"2.38636864"}];for(const t of c){const e=s.createNS("http://www.w3.org/2000/svg","ellipse");e.setAttributeNS(null,"opacity","0.04"),e.setAttributeNS(null,"cx","10.5"),e.setAttributeNS(null,"cy","5.80029008"),e.setAttributeNS(null,"rx",t.rx),e.setAttributeNS(null,"ry",t.ry),l.appendChild(e)}const h=s.createNS("http://www.w3.org/2000/svg","g");h.setAttributeNS(null,"fill",this._color);const u=s.createNS("http://www.w3.org/2000/svg","path");u.setAttributeNS(null,"d","M27,13.5 C27,19.074644 20.250001,27.000002 14.75,34.500002 C14.016665,35.500004 12.983335,35.500004 12.25,34.500002 C6.7499993,27.000002 0,19.222562 0,13.5 C0,6.0441559 6.0441559,0 13.5,0 C20.955844,0 27,6.0441559 27,13.5 Z"),h.appendChild(u);const d=s.createNS("http://www.w3.org/2000/svg","g");d.setAttributeNS(null,"opacity","0.25"),d.setAttributeNS(null,"fill","#000000");const m=s.createNS("http://www.w3.org/2000/svg","path");m.setAttributeNS(null,"d","M13.5,0 C6.0441559,0 0,6.0441559 0,13.5 C0,19.222562 6.7499993,27 12.25,34.5 C13,35.522727 14.016664,35.500004 14.75,34.5 C20.250001,27 27,19.074644 27,13.5 C27,6.0441559 20.955844,0 13.5,0 Z M13.5,1 C20.415404,1 26,6.584596 26,13.5 C26,15.898657 24.495584,19.181431 22.220703,22.738281 C19.945823,26.295132 16.705119,30.142167 13.943359,33.908203 C13.743445,34.180814 13.612715,34.322738 13.5,34.441406 C13.387285,34.322738 13.256555,34.180814 13.056641,33.908203 C10.284481,30.127985 7.4148684,26.314159 5.015625,22.773438 C2.6163816,19.232715 1,15.953538 1,13.5 C1,6.584596 6.584596,1 13.5,1 Z"),d.appendChild(m);const p=s.createNS("http://www.w3.org/2000/svg","g");p.setAttributeNS(null,"transform","translate(6.0, 7.0)"),p.setAttributeNS(null,"fill","#FFFFFF");const _=s.createNS("http://www.w3.org/2000/svg","g");_.setAttributeNS(null,"transform","translate(8.0, 8.0)");const f=s.createNS("http://www.w3.org/2000/svg","circle");f.setAttributeNS(null,"fill","#000000"),f.setAttributeNS(null,"opacity","0.25"),f.setAttributeNS(null,"cx","5.5"),f.setAttributeNS(null,"cy","5.5"),f.setAttributeNS(null,"r","5.4999962");const g=s.createNS("http://www.w3.org/2000/svg","circle");g.setAttributeNS(null,"fill","#FFFFFF"),g.setAttributeNS(null,"cx","5.5"),g.setAttributeNS(null,"cy","5.5"),g.setAttributeNS(null,"r","5.4999962"),_.appendChild(f),_.appendChild(g),n.appendChild(l),n.appendChild(h),n.appendChild(d),n.appendChild(p),n.appendChild(_),i.appendChild(n),i.setAttributeNS(null,"height",o*this._scale+"px"),i.setAttributeNS(null,"width",a*this._scale+"px"),this._element.appendChild(i),this._offset=t.pointGeometry.convert(e&&e.offset||[0,-14])}this._element.classList.add("maplibregl-marker","mapboxgl-marker"),this._element.addEventListener("dragstart",(t=>{t.preventDefault()})),this._element.addEventListener("mousedown",(t=>{t.preventDefault()})),Oa(this._element,this._anchor,"marker"),this._popup=null}addTo(t){return this.remove(),this._map=t,t.getCanvasContainer().appendChild(this._element),t.on("move",this._update),t.on("moveend",this._update),this.setDraggable(this._draggable),this._update(),this._map.on("click",this._onMapClick),this}remove(){return this._opacityTimeout&&(clearTimeout(this._opacityTimeout),delete this._opacityTimeout),this._map&&(this._map.off("click",this._onMapClick),this._map.off("move",this._update),this._map.off("moveend",this._update),this._map.off("mousedown",this._addDragHandler),this._map.off("touchstart",this._addDragHandler),this._map.off("mouseup",this._onUp),this._map.off("touchend",this._onUp),this._map.off("mousemove",this._onMove),this._map.off("touchmove",this._onMove),delete this._map),s.remove(this._element),this._popup&&this._popup.remove(),this}getLngLat(){return this._lngLat}setLngLat(e){return this._lngLat=t.LngLat.convert(e),this._pos=null,this._popup&&this._popup.setLngLat(this._lngLat),this._update(),this}getElement(){return this._element}setPopup(t){if(this._popup&&(this._popup.remove(),this._popup=null,this._element.removeEventListener("keypress",this._onKeyPress),this._originalTabIndex||this._element.removeAttribute("tabindex")),t){if(!("offset"in t.options)){const e=38.1,i=13.5,o=Math.sqrt(Math.pow(i,2)/2);t.options.offset=this._defaultMarker?{top:[0,0],"top-left":[0,0],"top-right":[0,0],bottom:[0,-e],"bottom-left":[o,-1*(e-i+o)],"bottom-right":[-o,-1*(e-i+o)],left:[i,-1*(e-i)],right:[-i,-1*(e-i)]}:this._offset}this._popup=t,this._lngLat&&this._popup.setLngLat(this._lngLat),this._originalTabIndex=this._element.getAttribute("tabindex"),this._originalTabIndex||this._element.setAttribute("tabindex","0"),this._element.addEventListener("keypress",this._onKeyPress)}return this}_onKeyPress(t){const e=t.code,i=t.charCode||t.keyCode;"Space"!==e&&"Enter"!==e&&32!==i&&13!==i||this.togglePopup()}_onMapClick(t){const e=t.originalEvent.target,i=this._element;this._popup&&(e===i||i.contains(e))&&this.togglePopup()}getPopup(){return this._popup}togglePopup(){const t=this._popup;return t?(t.isOpen()?t.remove():t.addTo(this._map),this):this}_update(t){if(!this._map)return;this._map.transform.renderWorldCopies&&(this._lngLat=Ba(this._lngLat,this._pos,this._map.transform)),this._pos=this._map.project(this._lngLat)._add(this._offset);let e="";"viewport"===this._rotationAlignment||"auto"===this._rotationAlignment?e=`rotateZ(${this._rotation}deg)`:"map"===this._rotationAlignment&&(e=`rotateZ(${this._rotation-this._map.getBearing()}deg)`);let i="";"viewport"===this._pitchAlignment||"auto"===this._pitchAlignment?i="rotateX(0deg)":"map"===this._pitchAlignment&&(i=`rotateX(${this._map.getPitch()}deg)`),t&&"moveend"!==t.type||(this._pos=this._pos.round()),s.setTransform(this._element,`${Fa[this._anchor]} translate(${this._pos.x}px, ${this._pos.y}px) ${i} ${e}`),this._map.style&&this._map.style.terrain&&!this._opacityTimeout&&(this._opacityTimeout=setTimeout((()=>{const t=this._map.unproject(this._pos),e=40075016.686*Math.abs(Math.cos(this._lngLat.lat*Math.PI/180))/Math.pow(2,this._map.transform.tileZoom+8);this._element.style.opacity=t.distanceTo(this._lngLat)>20*e?"0.2":"1.0",this._opacityTimeout=null}),100))}getOffset(){return this._offset}setOffset(e){return this._offset=t.pointGeometry.convert(e),this._update(),this}_onMove(e){if(!this._isDragging){const t=this._clickTolerance||this._map._clickTolerance;this._isDragging=e.point.dist(this._pointerdownPos)>=t}this._isDragging&&(this._pos=e.point.sub(this._positionDelta),this._lngLat=this._map.unproject(this._pos),this.setLngLat(this._lngLat),this._element.style.pointerEvents="none","pending"===this._state&&(this._state="active",this.fire(new t.Event("dragstart"))),this.fire(new t.Event("drag")))}_onUp(){this._element.style.pointerEvents="auto",this._positionDelta=null,this._pointerdownPos=null,this._isDragging=!1,this._map.off("mousemove",this._onMove),this._map.off("touchmove",this._onMove),"active"===this._state&&this.fire(new t.Event("dragend")),this._state="inactive"}_addDragHandler(t){this._element.contains(t.originalEvent.target)&&(t.preventDefault(),this._positionDelta=t.point.sub(this._pos).add(this._offset),this._pointerdownPos=t.point,this._state="pending",this._map.on("mousemove",this._onMove),this._map.on("touchmove",this._onMove),this._map.once("mouseup",this._onUp),this._map.once("touchend",this._onUp))}setDraggable(t){return this._draggable=!!t,this._map&&(t?(this._map.on("mousedown",this._addDragHandler),this._map.on("touchstart",this._addDragHandler)):(this._map.off("mousedown",this._addDragHandler),this._map.off("touchstart",this._addDragHandler))),this}isDraggable(){return this._draggable}setRotation(t){return this._rotation=t||0,this._update(),this}getRotation(){return this._rotation}setRotationAlignment(t){return this._rotationAlignment=t||"auto",this._update(),this}getRotationAlignment(){return this._rotationAlignment}setPitchAlignment(t){return this._pitchAlignment=t&&"auto"!==t?t:this._rotationAlignment,this._update(),this}getPitchAlignment(){return this._pitchAlignment}}const Na={positionOptions:{enableHighAccuracy:!1,maximumAge:0,timeout:6e3},fitBoundsOptions:{maxZoom:15},trackUserLocation:!1,showAccuracyCircle:!0,showUserLocation:!0};let Ga,Za=0,qa=!1;const ja={maxWidth:100,unit:"metric"};function Va(t,e,i){const o=i&&i.maxWidth||100,a=t._container.clientHeight/2,s=t.unproject([0,a]),r=t.unproject([o,a]),n=s.distanceTo(r);if(i&&"imperial"===i.unit){const i=3.2808*n;i>5280?Xa(e,o,i/5280,t._getUIString("ScaleControl.Miles")):Xa(e,o,i,t._getUIString("ScaleControl.Feet"))}else i&&"nautical"===i.unit?Xa(e,o,n/1852,t._getUIString("ScaleControl.NauticalMiles")):n>=1e3?Xa(e,o,n/1e3,t._getUIString("ScaleControl.Kilometers")):Xa(e,o,n,t._getUIString("ScaleControl.Meters"))}function Xa(t,e,i,o){const a=function(t){const e=Math.pow(10,`${Math.floor(t)}`.length-1);let i=t/e;return i=i>=10?10:i>=5?5:i>=3?3:i>=2?2:i>=1?1:function(t){const e=Math.pow(10,Math.ceil(-Math.log(t)/Math.LN10));return Math.round(t*e)/e}(i),e*i}(i);t.style.width=e*(a/i)+"px",t.innerHTML=`${a}&nbsp;${o}`}const $a={closeButton:!0,closeOnClick:!0,focusAfterOpen:!0,className:"",maxWidth:"240px"},Wa=["a[href]","[tabindex]:not([tabindex='-1'])","[contenteditable]:not([contenteditable='false'])","button:not([disabled])","input:not([disabled])","select:not([disabled])","textarea:not([disabled])"].join(", ");function Ha(e){if(e){if("number"==typeof e){const i=Math.round(Math.sqrt(.5*Math.pow(e,2)));return{center:new t.pointGeometry(0,0),top:new t.pointGeometry(0,e),"top-left":new t.pointGeometry(i,i),"top-right":new t.pointGeometry(-i,i),bottom:new t.pointGeometry(0,-e),"bottom-left":new t.pointGeometry(i,-i),"bottom-right":new t.pointGeometry(-i,-i),left:new t.pointGeometry(e,0),right:new t.pointGeometry(-e,0)}}if(e instanceof t.pointGeometry||Array.isArray(e)){const i=t.pointGeometry.convert(e);return{center:i,top:i,"top-left":i,"top-right":i,bottom:i,"bottom-left":i,"bottom-right":i,left:i,right:i}}return{center:t.pointGeometry.convert(e.center||[0,0]),top:t.pointGeometry.convert(e.top||[0,0]),"top-left":t.pointGeometry.convert(e["top-left"]||[0,0]),"top-right":t.pointGeometry.convert(e["top-right"]||[0,0]),bottom:t.pointGeometry.convert(e.bottom||[0,0]),"bottom-left":t.pointGeometry.convert(e["bottom-left"]||[0,0]),"bottom-right":t.pointGeometry.convert(e["bottom-right"]||[0,0]),left:t.pointGeometry.convert(e.left||[0,0]),right:t.pointGeometry.convert(e.right||[0,0])}}return Ha(new t.pointGeometry(0,0))}const Ka={supported:e,setRTLTextPlugin:t.setRTLTextPlugin,getRTLTextPluginStatus:t.getRTLTextPluginStatus,Map:Ra,NavigationControl:class{constructor(e){this.options=t.extend({},La,e),this._container=s.create("div","maplibregl-ctrl maplibregl-ctrl-group mapboxgl-ctrl mapboxgl-ctrl-group"),this._container.addEventListener("contextmenu",(t=>t.preventDefault())),this.options.showZoom&&(t.bindAll(["_setButtonTitle","_updateZoomButtons"],this),this._zoomInButton=this._createButton("maplibregl-ctrl-zoom-in mapboxgl-ctrl-zoom-in",(t=>this._map.zoomIn({},{originalEvent:t}))),s.create("span","maplibregl-ctrl-icon mapboxgl-ctrl-icon",this._zoomInButton).setAttribute("aria-hidden","true"),this._zoomOutButton=this._createButton("maplibregl-ctrl-zoom-out mapboxgl-ctrl-zoom-out",(t=>this._map.zoomOut({},{originalEvent:t}))),s.create("span","maplibregl-ctrl-icon mapboxgl-ctrl-icon",this._zoomOutButton).setAttribute("aria-hidden","true")),this.options.showCompass&&(t.bindAll(["_rotateCompassArrow"],this),this._compass=this._createButton("maplibregl-ctrl-compass mapboxgl-ctrl-compass",(t=>{this.options.visualizePitch?this._map.resetNorthPitch({},{originalEvent:t}):this._map.resetNorth({},{originalEvent:t})})),this._compassIcon=s.create("span","maplibregl-ctrl-icon mapboxgl-ctrl-icon",this._compass),this._compassIcon.setAttribute("aria-hidden","true"))}_updateZoomButtons(){const t=this._map.getZoom(),e=t===this._map.getMaxZoom(),i=t===this._map.getMinZoom();this._zoomInButton.disabled=e,this._zoomOutButton.disabled=i,this._zoomInButton.setAttribute("aria-disabled",e.toString()),this._zoomOutButton.setAttribute("aria-disabled",i.toString())}_rotateCompassArrow(){const t=this.options.visualizePitch?`scale(${1/Math.pow(Math.cos(this._map.transform.pitch*(Math.PI/180)),.5)}) rotateX(${this._map.transform.pitch}deg) rotateZ(${this._map.transform.angle*(180/Math.PI)}deg)`:`rotate(${this._map.transform.angle*(180/Math.PI)}deg)`;this._compassIcon.style.transform=t}onAdd(t){return this._map=t,this.options.showZoom&&(this._setButtonTitle(this._zoomInButton,"ZoomIn"),this._setButtonTitle(this._zoomOutButton,"ZoomOut"),this._map.on("zoom",this._updateZoomButtons),this._updateZoomButtons()),this.options.showCompass&&(this._setButtonTitle(this._compass,"ResetBearing"),this.options.visualizePitch&&this._map.on("pitch",this._rotateCompassArrow),this._map.on("rotate",this._rotateCompassArrow),this._rotateCompassArrow(),this._handler=new ka(this._map,this._compass,this.options.visualizePitch)),this._container}onRemove(){s.remove(this._container),this.options.showZoom&&this._map.off("zoom",this._updateZoomButtons),this.options.showCompass&&(this.options.visualizePitch&&this._map.off("pitch",this._rotateCompassArrow),this._map.off("rotate",this._rotateCompassArrow),this._handler.off(),delete this._handler),delete this._map}_createButton(t,e){const i=s.create("button",t,this._container);return i.type="button",i.addEventListener("click",e),i}_setButtonTitle(t,e){const i=this._map._getUIString(`NavigationControl.${e}`);t.title=i,t.setAttribute("aria-label",i)}},GeolocateControl:class extends t.Evented{constructor(e){super(),this.options=t.extend({},Na,e),t.bindAll(["_onSuccess","_onError","_onZoom","_finish","_setupUI","_updateCamera","_updateMarker"],this)}onAdd(t){var e;return this._map=t,this._container=s.create("div","maplibregl-ctrl maplibregl-ctrl-group mapboxgl-ctrl mapboxgl-ctrl-group"),e=this._setupUI,void 0!==Ga?e(Ga):void 0!==window.navigator.permissions?window.navigator.permissions.query({name:"geolocation"}).then((t=>{Ga="denied"!==t.state,e(Ga)})):(Ga=!!window.navigator.geolocation,e(Ga)),this._container}onRemove(){void 0!==this._geolocationWatchID&&(window.navigator.geolocation.clearWatch(this._geolocationWatchID),this._geolocationWatchID=void 0),this.options.showUserLocation&&this._userLocationDotMarker&&this._userLocationDotMarker.remove(),this.options.showAccuracyCircle&&this._accuracyCircleMarker&&this._accuracyCircleMarker.remove(),s.remove(this._container),this._map.off("zoom",this._onZoom),this._map=void 0,Za=0,qa=!1}_isOutOfMapMaxBounds(t){const e=this._map.getMaxBounds(),i=t.coords;return e&&(i.longitude<e.getWest()||i.longitude>e.getEast()||i.latitude<e.getSouth()||i.latitude>e.getNorth())}_setErrorState(){switch(this._watchState){case"WAITING_ACTIVE":this._watchState="ACTIVE_ERROR",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active-error","mapboxgl-ctrl-geolocate-active-error");break;case"ACTIVE_LOCK":this._watchState="ACTIVE_ERROR",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active-error","mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting");break;case"BACKGROUND":this._watchState="BACKGROUND_ERROR",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background","mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-background-error","mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting")}}_onSuccess(e){if(this._map){if(this._isOutOfMapMaxBounds(e))return this._setErrorState(),this.fire(new t.Event("outofmaxbounds",e)),this._updateMarker(),void this._finish();if(this.options.trackUserLocation)switch(this._lastKnownPosition=e,this._watchState){case"WAITING_ACTIVE":case"ACTIVE_LOCK":case"ACTIVE_ERROR":this._watchState="ACTIVE_LOCK",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active-error","mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active");break;case"BACKGROUND":case"BACKGROUND_ERROR":this._watchState="BACKGROUND",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background-error","mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-background","mapboxgl-ctrl-geolocate-background")}this.options.showUserLocation&&"OFF"!==this._watchState&&this._updateMarker(e),this.options.trackUserLocation&&"ACTIVE_LOCK"!==this._watchState||this._updateCamera(e),this.options.showUserLocation&&this._dotElement.classList.remove("maplibregl-user-location-dot-stale","mapboxgl-user-location-dot-stale"),this.fire(new t.Event("geolocate",e)),this._finish()}}_updateCamera(e){const i=new t.LngLat(e.coords.longitude,e.coords.latitude),o=e.coords.accuracy,a=this._map.getBearing(),s=t.extend({bearing:a},this.options.fitBoundsOptions);this._map.fitBounds(i.toBounds(o),s,{geolocateSource:!0})}_updateMarker(e){if(e){const i=new t.LngLat(e.coords.longitude,e.coords.latitude);this._accuracyCircleMarker.setLngLat(i).addTo(this._map),this._userLocationDotMarker.setLngLat(i).addTo(this._map),this._accuracy=e.coords.accuracy,this.options.showUserLocation&&this.options.showAccuracyCircle&&this._updateCircleRadius()}else this._userLocationDotMarker.remove(),this._accuracyCircleMarker.remove()}_updateCircleRadius(){const t=this._map._container.clientHeight/2,e=this._map.unproject([0,t]),i=this._map.unproject([1,t]),o=e.distanceTo(i),a=Math.ceil(2*this._accuracy/o);this._circleElement.style.width=`${a}px`,this._circleElement.style.height=`${a}px`}_onZoom(){this.options.showUserLocation&&this.options.showAccuracyCircle&&this._updateCircleRadius()}_onError(e){if(this._map){if(this.options.trackUserLocation)if(1===e.code){this._watchState="OFF",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active-error","mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background","mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background-error","mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.disabled=!0;const t=this._map._getUIString("GeolocateControl.LocationNotAvailable");this._geolocateButton.title=t,this._geolocateButton.setAttribute("aria-label",t),void 0!==this._geolocationWatchID&&this._clearWatch()}else{if(3===e.code&&qa)return;this._setErrorState()}"OFF"!==this._watchState&&this.options.showUserLocation&&this._dotElement.classList.add("maplibregl-user-location-dot-stale","mapboxgl-user-location-dot-stale"),this.fire(new t.Event("error",e)),this._finish()}}_finish(){this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=void 0}_setupUI(e){if(this._container.addEventListener("contextmenu",(t=>t.preventDefault())),this._geolocateButton=s.create("button","maplibregl-ctrl-geolocate mapboxgl-ctrl-geolocate",this._container),s.create("span","maplibregl-ctrl-icon mapboxgl-ctrl-icon",this._geolocateButton).setAttribute("aria-hidden","true"),this._geolocateButton.type="button",!1===e){t.warnOnce("Geolocation support is not available so the GeolocateControl will be disabled.");const e=this._map._getUIString("GeolocateControl.LocationNotAvailable");this._geolocateButton.disabled=!0,this._geolocateButton.title=e,this._geolocateButton.setAttribute("aria-label",e)}else{const t=this._map._getUIString("GeolocateControl.FindMyLocation");this._geolocateButton.title=t,this._geolocateButton.setAttribute("aria-label",t)}this.options.trackUserLocation&&(this._geolocateButton.setAttribute("aria-pressed","false"),this._watchState="OFF"),this.options.showUserLocation&&(this._dotElement=s.create("div","maplibregl-user-location-dot mapboxgl-user-location-dot"),this._userLocationDotMarker=new Ua(this._dotElement),this._circleElement=s.create("div","maplibregl-user-location-accuracy-circle mapboxgl-user-location-accuracy-circle"),this._accuracyCircleMarker=new Ua({element:this._circleElement,pitchAlignment:"map"}),this.options.trackUserLocation&&(this._watchState="OFF"),this._map.on("zoom",this._onZoom)),this._geolocateButton.addEventListener("click",this.trigger.bind(this)),this._setup=!0,this.options.trackUserLocation&&this._map.on("movestart",(e=>{e.geolocateSource||"ACTIVE_LOCK"!==this._watchState||e.originalEvent&&"resize"===e.originalEvent.type||(this._watchState="BACKGROUND",this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-background","mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active"),this.fire(new t.Event("trackuserlocationend")))}))}trigger(){if(!this._setup)return t.warnOnce("Geolocate control triggered before added to a map"),!1;if(this.options.trackUserLocation){switch(this._watchState){case"OFF":this._watchState="WAITING_ACTIVE",this.fire(new t.Event("trackuserlocationstart"));break;case"WAITING_ACTIVE":case"ACTIVE_LOCK":case"ACTIVE_ERROR":case"BACKGROUND_ERROR":Za--,qa=!1,this._watchState="OFF",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-active-error","mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background","mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background-error","mapboxgl-ctrl-geolocate-background-error"),this.fire(new t.Event("trackuserlocationend"));break;case"BACKGROUND":this._watchState="ACTIVE_LOCK",this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-background","mapboxgl-ctrl-geolocate-background"),this._lastKnownPosition&&this._updateCamera(this._lastKnownPosition),this.fire(new t.Event("trackuserlocationstart"))}switch(this._watchState){case"WAITING_ACTIVE":this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active");break;case"ACTIVE_LOCK":this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-active","mapboxgl-ctrl-geolocate-active")}if("OFF"===this._watchState&&void 0!==this._geolocationWatchID)this._clearWatch();else if(void 0===this._geolocationWatchID){let t;this._geolocateButton.classList.add("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.setAttribute("aria-pressed","true"),Za++,Za>1?(t={maximumAge:6e5,timeout:0},qa=!0):(t=this.options.positionOptions,qa=!1),this._geolocationWatchID=window.navigator.geolocation.watchPosition(this._onSuccess,this._onError,t)}}else window.navigator.geolocation.getCurrentPosition(this._onSuccess,this._onError,this.options.positionOptions),this._timeoutId=setTimeout(this._finish,1e4);return!0}_clearWatch(){window.navigator.geolocation.clearWatch(this._geolocationWatchID),this._geolocationWatchID=void 0,this._geolocateButton.classList.remove("maplibregl-ctrl-geolocate-waiting","mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.setAttribute("aria-pressed","false"),this.options.showUserLocation&&this._updateMarker(null)}},AttributionControl:za,LogoControl:Da,ScaleControl:class{constructor(e){this.options=t.extend({},ja,e),t.bindAll(["_onMove","setUnit"],this)}getDefaultPosition(){return"bottom-left"}_onMove(){Va(this._map,this._container,this.options)}onAdd(t){return this._map=t,this._container=s.create("div","maplibregl-ctrl maplibregl-ctrl-scale mapboxgl-ctrl mapboxgl-ctrl-scale",t.getContainer()),this._map.on("move",this._onMove),this._onMove(),this._container}onRemove(){s.remove(this._container),this._map.off("move",this._onMove),this._map=void 0}setUnit(t){this.options.unit=t,Va(this._map,this._container,this.options)}},FullscreenControl:class{constructor(e){this._fullscreen=!1,e&&e.container&&(e.container instanceof HTMLElement?this._container=e.container:t.warnOnce("Full screen control 'container' must be a DOM element.")),t.bindAll(["_onClickFullscreen","_changeIcon"],this),"onfullscreenchange"in document?this._fullscreenchange="fullscreenchange":"onmozfullscreenchange"in document?this._fullscreenchange="mozfullscreenchange":"onwebkitfullscreenchange"in document?this._fullscreenchange="webkitfullscreenchange":"onmsfullscreenchange"in document&&(this._fullscreenchange="MSFullscreenChange")}onAdd(e){return this._map=e,this._container||(this._container=this._map.getContainer()),this._controlContainer=s.create("div","maplibregl-ctrl maplibregl-ctrl-group mapboxgl-ctrl mapboxgl-ctrl-group"),this._checkFullscreenSupport()?this._setupUI():(this._controlContainer.style.display="none",t.warnOnce("This device does not support fullscreen mode.")),this._controlContainer}onRemove(){s.remove(this._controlContainer),this._map=null,window.document.removeEventListener(this._fullscreenchange,this._changeIcon)}_checkFullscreenSupport(){return!!(document.fullscreenEnabled||document.mozFullScreenEnabled||document.msFullscreenEnabled||document.webkitFullscreenEnabled)}_setupUI(){const t=this._fullscreenButton=s.create("button","maplibregl-ctrl-fullscreen mapboxgl-ctrl-fullscreen",this._controlContainer);s.create("span","maplibregl-ctrl-icon mapboxgl-ctrl-icon",t).setAttribute("aria-hidden","true"),t.type="button",this._updateTitle(),this._fullscreenButton.addEventListener("click",this._onClickFullscreen),window.document.addEventListener(this._fullscreenchange,this._changeIcon)}_updateTitle(){const t=this._getTitle();this._fullscreenButton.setAttribute("aria-label",t),this._fullscreenButton.title=t}_getTitle(){return this._map._getUIString(this._isFullscreen()?"FullscreenControl.Exit":"FullscreenControl.Enter")}_isFullscreen(){return this._fullscreen}_changeIcon(){(window.document.fullscreenElement||window.document.mozFullScreenElement||window.document.webkitFullscreenElement||window.document.msFullscreenElement)===this._container!==this._fullscreen&&(this._fullscreen=!this._fullscreen,this._fullscreenButton.classList.toggle("maplibregl-ctrl-shrink"),this._fullscreenButton.classList.toggle("mapboxgl-ctrl-shrink"),this._fullscreenButton.classList.toggle("maplibregl-ctrl-fullscreen"),this._fullscreenButton.classList.toggle("mapboxgl-ctrl-fullscreen"),this._updateTitle())}_onClickFullscreen(){this._isFullscreen()?window.document.exitFullscreen?window.document.exitFullscreen():window.document.mozCancelFullScreen?window.document.mozCancelFullScreen():window.document.msExitFullscreen?window.document.msExitFullscreen():window.document.webkitCancelFullScreen&&window.document.webkitCancelFullScreen():this._container.requestFullscreen?this._container.requestFullscreen():this._container.mozRequestFullScreen?this._container.mozRequestFullScreen():this._container.msRequestFullscreen?this._container.msRequestFullscreen():this._container.webkitRequestFullscreen&&this._container.webkitRequestFullscreen()}},TerrainControl:class{constructor(e){this.options=e,t.bindAll(["_toggleTerrain","_updateTerrainIcon"],this)}onAdd(t){return this._map=t,this._container=s.create("div","maplibregl-ctrl maplibregl-ctrl-group mapboxgl-ctrl mapboxgl-ctrl-group"),this._terrainButton=s.create("button","maplibregl-ctrl-terrain mapboxgl-ctrl-terrain",this._container),s.create("span","maplibregl-ctrl-icon mapboxgl-ctrl-icon",this._terrainButton).setAttribute("aria-hidden","true"),this._terrainButton.type="button",this._terrainButton.addEventListener("click",this._toggleTerrain),this._updateTerrainIcon(),this._map.on("terrain",this._updateTerrainIcon),this._container}onRemove(){s.remove(this._container),this._map.off("terrain",this._updateTerrainIcon),this._map=void 0}_toggleTerrain(){this._map.getTerrain()?this._map.setTerrain(null):this._map.setTerrain(this.options),this._updateTerrainIcon()}_updateTerrainIcon(){this._terrainButton.classList.remove("maplibregl-ctrl-terrain","mapboxgl-ctrl-terrain"),this._terrainButton.classList.remove("maplibregl-ctrl-terrain-enabled","mapboxgl-ctrl-terrain-enabled"),this._map.style.terrain?(this._terrainButton.classList.add("maplibregl-ctrl-terrain-enabled","mapboxgl-ctrl-terrain-enabled"),this._terrainButton.title=this._map._getUIString("TerrainControl.disableTerrain")):(this._terrainButton.classList.add("maplibregl-ctrl-terrain","mapboxgl-ctrl-terrain"),this._terrainButton.title=this._map._getUIString("TerrainControl.enableTerrain"))}},Popup:class extends t.Evented{constructor(e){super(),this.options=t.extend(Object.create($a),e),t.bindAll(["_update","_onClose","remove","_onMouseMove","_onMouseUp","_onDrag"],this)}addTo(e){return this._map&&this.remove(),this._map=e,this.options.closeOnClick&&this._map.on("click",this._onClose),this.options.closeOnMove&&this._map.on("move",this._onClose),this._map.on("remove",this.remove),this._update(),this._focusFirstElement(),this._trackPointer?(this._map.on("mousemove",this._onMouseMove),this._map.on("mouseup",this._onMouseUp),this._container&&this._container.classList.add("maplibregl-popup-track-pointer","mapboxgl-popup-track-pointer"),this._map._canvasContainer.classList.add("maplibregl-track-pointer","mapboxgl-track-pointer")):this._map.on("move",this._update),this.fire(new t.Event("open")),this}isOpen(){return!!this._map}remove(){return this._content&&s.remove(this._content),this._container&&(s.remove(this._container),delete this._container),this._map&&(this._map.off("move",this._update),this._map.off("move",this._onClose),this._map.off("click",this._onClose),this._map.off("remove",this.remove),this._map.off("mousemove",this._onMouseMove),this._map.off("mouseup",this._onMouseUp),this._map.off("drag",this._onDrag),delete this._map),this.fire(new t.Event("close")),this}getLngLat(){return this._lngLat}setLngLat(e){return this._lngLat=t.LngLat.convert(e),this._pos=null,this._trackPointer=!1,this._update(),this._map&&(this._map.on("move",this._update),this._map.off("mousemove",this._onMouseMove),this._container&&this._container.classList.remove("maplibregl-popup-track-pointer","mapboxgl-popup-track-pointer"),this._map._canvasContainer.classList.remove("maplibregl-track-pointer","mapboxgl-track-pointer")),this}trackPointer(){return this._trackPointer=!0,this._pos=null,this._update(),this._map&&(this._map.off("move",this._update),this._map.on("mousemove",this._onMouseMove),this._map.on("drag",this._onDrag),this._container&&this._container.classList.add("maplibregl-popup-track-pointer","mapboxgl-popup-track-pointer"),this._map._canvasContainer.classList.add("maplibregl-track-pointer","mapboxgl-track-pointer")),this}getElement(){return this._container}setText(t){return this.setDOMContent(document.createTextNode(t))}setHTML(t){const e=document.createDocumentFragment(),i=document.createElement("body");let o;for(i.innerHTML=t;o=i.firstChild,o;)e.appendChild(o);return this.setDOMContent(e)}getMaxWidth(){return this._container&&this._container.style.maxWidth}setMaxWidth(t){return this.options.maxWidth=t,this._update(),this}setDOMContent(t){if(this._content)for(;this._content.hasChildNodes();)this._content.firstChild&&this._content.removeChild(this._content.firstChild);else this._content=s.create("div","maplibregl-popup-content mapboxgl-popup-content",this._container);return this._content.appendChild(t),this._createCloseButton(),this._update(),this._focusFirstElement(),this}addClassName(t){this._container&&this._container.classList.add(t)}removeClassName(t){this._container&&this._container.classList.remove(t)}setOffset(t){return this.options.offset=t,this._update(),this}toggleClassName(t){if(this._container)return this._container.classList.toggle(t)}_createCloseButton(){this.options.closeButton&&(this._closeButton=s.create("button","maplibregl-popup-close-button mapboxgl-popup-close-button",this._content),this._closeButton.type="button",this._closeButton.setAttribute("aria-label","Close popup"),this._closeButton.innerHTML="&#215;",this._closeButton.addEventListener("click",this._onClose))}_onMouseUp(t){this._update(t.point)}_onMouseMove(t){this._update(t.point)}_onDrag(t){this._update(t.point)}_update(t){if(!this._map||!this._lngLat&&!this._trackPointer||!this._content)return;if(this._container||(this._container=s.create("div","maplibregl-popup mapboxgl-popup",this._map.getContainer()),this._tip=s.create("div","maplibregl-popup-tip mapboxgl-popup-tip",this._container),this._container.appendChild(this._content),this.options.className&&this.options.className.split(" ").forEach((t=>this._container.classList.add(t))),this._trackPointer&&this._container.classList.add("maplibregl-popup-track-pointer","mapboxgl-popup-track-pointer")),this.options.maxWidth&&this._container.style.maxWidth!==this.options.maxWidth&&(this._container.style.maxWidth=this.options.maxWidth),this._map.transform.renderWorldCopies&&!this._trackPointer&&(this._lngLat=Ba(this._lngLat,this._pos,this._map.transform)),this._trackPointer&&!t)return;const e=this._pos=this._trackPointer&&t?t:this._map.project(this._lngLat);let i=this.options.anchor;const o=Ha(this.options.offset);if(!i){const t=this._container.offsetWidth,a=this._container.offsetHeight;let s;s=e.y+o.bottom.y<a?["top"]:e.y>this._map.transform.height-a?["bottom"]:[],e.x<t/2?s.push("left"):e.x>this._map.transform.width-t/2&&s.push("right"),i=0===s.length?"bottom":s.join("-")}const a=e.add(o[i]).round();s.setTransform(this._container,`${Fa[i]} translate(${a.x}px,${a.y}px)`),Oa(this._container,i,"popup")}_focusFirstElement(){if(!this.options.focusAfterOpen||!this._container)return;const t=this._container.querySelector(Wa);t&&t.focus()}_onClose(){this.remove()}},Marker:Ua,Style:De,LngLat:t.LngLat,LngLatBounds:t.LngLatBounds,Point:t.pointGeometry,MercatorCoordinate:t.MercatorCoordinate,Evented:t.Evented,AJAXError:t.AJAXError,config:t.config,CanvasSource:at,GeoJSONSource:tt,ImageSource:it,RasterDEMTileSource:Q,RasterTileSource:Y,VectorTileSource:K,VideoSource:ot,prewarm:function(){vt().acquire(_t)},clearPrewarmedResources:function(){const t=xt;t&&(t.isPreloaded()&&1===t.numActive()?(t.release(_t),xt=null):console.warn("Could not clear WebWorkers since there are active Map instances that still reference it. The pre-warmed WebWorker pool can only be cleared when all map instances have been removed with map.remove()"))},get workerCount(){return ft.workerCount},set workerCount(t){ft.workerCount=t},get maxParallelImageRequests(){return t.config.MAX_PARALLEL_IMAGE_REQUESTS},set maxParallelImageRequests(e){t.config.MAX_PARALLEL_IMAGE_REQUESTS=e},clearStorage(e){t.clearTileCache(e)},workerUrl:"",addProtocol(e,i){t.config.REGISTERED_PROTOCOLS[e]=i},removeProtocol(e){delete t.config.REGISTERED_PROTOCOLS[e]}};Sa.extend(Ka,{isSafari:t.isSafari,getPerformanceMetrics:t.PerformanceUtils.getPerformanceMetrics});class Ya{setup(){}bench(){}teardown(){}async run(){try{return await this.setup(),this._begin()}catch(t){console.error(t)}}_done(){return this._elapsed>=500&&this._measurements.length>210}_begin(){this._measurements=[],this._elapsed=0,this._iterationsPerMeasurement=1,this._start=performance.now();const t=this.bench();return t instanceof Promise?t.then((()=>this._measureAsync())):this._measureSync()}_measureSync(){for(;;){const t=performance.now()-this._start;if(this._elapsed+=t,t<5?this._iterationsPerMeasurement++:this._measurements.push({time:t,iterations:this._iterationsPerMeasurement}),this._done())return this._end();this._start=performance.now();for(let t=this._iterationsPerMeasurement;t>0;--t)this.bench()}}_measureAsync(){const t=performance.now()-this._start;return this._elapsed+=t,t<5?this._iterationsPerMeasurement++:this._measurements.push({time:t,iterations:this._iterationsPerMeasurement}),this._done()?this._end():(this._start=performance.now(),this._runAsync(this._iterationsPerMeasurement).then((()=>this._measureAsync())))}_runAsync(t){const e=this.bench();return 1===t?e:e.then((()=>this._runAsync(t-1)))}_end(){return Promise.resolve(this.teardown()).then((()=>this._measurements))}}function Ja(t){return"string"==typeof t?fetch(t).then((t=>t.json())):Promise.resolve(t)}class Qa extends t.Evented{constructor(){super(),this._requestManager=new r}getPixelRatio(){return devicePixelRatio}}class ts{constructor(e,i){this.styleJSON=e,this.sourceID=i,this.layerIndex=new t.StyleLayerIndex(bt(this.styleJSON.layers)),this.glyphs={},this.icons={}}loadImages(t,e){const i=JSON.stringify(t);this.icons[i]?e(null,this.icons[i]):this.style.getImages("",t,((t,o)=>{this.icons[i]=o,e(t,o)}))}loadGlyphs(t,e){const i=JSON.stringify(t);this.glyphs[i]?e(null,this.glyphs[i]):this.style.getGlyphs("",t,((t,o)=>{this.glyphs[i]=o,e(t,o)}))}setup(){const t=this;return this.actor={send(e,i,o){setTimeout((()=>{"getImages"===e?t.loadImages(i,o):"getGlyphs"===e&&t.loadGlyphs(i,o)}),0)}},Promise.all([(e=this.styleJSON,new Promise(((t,i)=>{const o=new Qa,a=new De(o);o.style=a,a.loadJSON(e),a.on("style.load",(()=>t(a))).on("error",i)}))),fetch(this.styleJSON.sources[this.sourceID].url).then((t=>t.json()))]).then((([t,e])=>{this.style=t,this.tileJSON=e}));var e}fetchTile(t){return fetch(t.canonical.url(this.tileJSON.tiles,devicePixelRatio)).then((t=>t.arrayBuffer())).then((e=>({tileID:t,buffer:e})))}parseTile(e,i){const o=new t.WorkerTile({tileID:e.tileID,zoom:e.tileID.overscaledZ,tileSize:512,showCollisionBoxes:!1,source:this.sourceID,uid:"0",maxZoom:22,pixelRatio:1,request:{url:""},returnDependencies:i,promoteId:void 0}),a=new t.vectorTile.VectorTile(new t.pbf(e.buffer));return new Promise(((t,e)=>{o.parse(a,this.layerIndex,[],this.actor,((i,o)=>{i?e(i):t(o)}))}))}}class es extends Ya{constructor(e,i){super(),this.style=e,this.tileIDs=i||[new t.OverscaledTileID(12,0,12,655,1583),new t.OverscaledTileID(8,0,8,40,98),new t.OverscaledTileID(4,0,4,3,6),new t.OverscaledTileID(0,0,0,0,0)]}setup(){return Ja(this.style).then((t=>(this.parser=new ts(t,"openmaptiles"),this.parser.setup()))).then((()=>Promise.all(this.tileIDs.map((t=>this.parser.fetchTile(t)))))).then((t=>(this.tiles=t,Promise.all(t.map((t=>this.parser.parseTile(t))))))).then((()=>{}))}bench(){let t=Promise.resolve();for(const e of this.tiles)t=t.then((()=>this.parser.parseTile(e).then((()=>{}))));return t}}const is=t=>new Promise(((e,i)=>{t&&(t.stubRender=null==t.stubRender||t.stubRender,t.showMap=null!=t.showMap&&t.showMap);const o=document.createElement("div");o.style.width=`${t.width||512}px`,o.style.height=`${t.height||512}px`,o.style.margin="0 auto",o.style.display="block",t.showMap||(o.style.visibility="hidden"),document.body.appendChild(o);const a=new Ra(Object.assign({container:o,style:"https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL"},t));a.on(t.idle?"idle":"load",(()=>{t.stubRender&&a._frame&&(a._frame.cancel(),a._frame=null),e(a)})).on("error",(t=>i(t.error))).on("remove",(()=>o.remove()))}));class os extends Ya{constructor(t,e){super(),this.style=t,this.locations=e}setup(){return Promise.all(this.locations.map((t=>is({zoom:t.zoom,width:1024,height:768,center:t.center,style:this.style})))).then((t=>{this.maps=t})).catch((t=>{console.error(t)}))}bench(){for(const t of this.maps)t._styleDirty=!0,t._sourcesDirty=!0,t._render(Date.now())}teardown(){for(const t of this.maps)t.remove()}}const as=[];for(let t=0;t<4;t++)for(let e=0;e<4;e++)as.push([t/4*1024,e/4*768]);const ss=[{type:"Feature",geometry:{type:"Point",coordinates:[-95.392,29.799]},properties:{place_name:"Roads, Houston, z12",zoom:12,tags:["road"]}},{type:"Feature",geometry:{type:"Point",coordinates:[-95.381,29.749]},properties:{place_name:"Roads, Houston, z13",zoom:13,tags:["road","poi_label","landuse"]}},{type:"Feature",geometry:{type:"Point",coordinates:[-73.985,40.758]},properties:{place_name:"High zoom labels, buildings, roads, New York City, z16",zoom:16,tags:["poi_label","building","road"]}},{type:"Feature",geometry:{type:"Point",coordinates:[-73.985,40.758]},properties:{place_name:"High zoom labels, buildings, roads, New York City, z17, overzoomed",zoom:17,tags:["poi_label","road","building"]}},{type:"Feature",geometry:{type:"Point",coordinates:[139.76,35.695]},properties:{place_name:"High zoom cjk labels, when using local lang, buildings, roads, Tokyo, z16",zoom:16,tags:["poi_label","building","road"]}},{type:"Feature",geometry:{type:"Point",coordinates:[139.76,35.695]},properties:{place_name:"High zoom cjk labels, when using local lang, buildings, roads, Tokyo, z17, overzoomed",zoom:17,tags:["poi_label","road","building"]}},{type:"Feature",geometry:{type:"Point",coordinates:[27.602,61.521]},properties:{place_name:"Water, Finland, z10",zoom:10,tags:["water"]}},{type:"Feature",geometry:{type:"Point",coordinates:[2.21,48.745]},properties:{place_name:"Landuse and roads, Paris, z11",zoom:11,tags:["place_label:settlement","road","landuse","poi_label","hillshade"]}},{type:"Feature",geometry:{type:"Point",coordinates:[-118.314,33.996]},properties:{place_name:"Buildings, LA, z16",zoom:16,tags:["building","road"]}},{type:"Feature",geometry:{type:"Point",coordinates:[2.316,48.867]},properties:{place_name:"High zoom roads, paths, landuse, labels, Paris, 15",zoom:15,tags:["road","road:pedestrian","poi_label","landuse","transit_stop_label"]}},{type:"Feature",geometry:{type:"Point",coordinates:[2.316,48.867]},properties:{place_name:"High zoom pedestrian polygon fills, roads, paths, landuse, labels, Paris, z16",zoom:16,tags:["landuse","road","road:pedestrian","poi_label","road:path"]}},{type:"Feature",geometry:{type:"Point",coordinates:[8.835,46.317]},properties:{place_name:"Hillshading, Switzerland, z9",zoom:9,tags:["hillshade","place_label"]}},{type:"Feature",geometry:{type:"Point",coordinates:[8.835,46.317]},properties:{place_name:"Hillshading and contours, Switzerland, z12",zoom:12,tags:["hillshade"]}},{type:"Feature",geometry:{type:"Point",coordinates:[8.416,51.056]},properties:{place_name:"Landcover, Germany z6",zoom:6,tags:["landcover","place_label:settlement","road","admin"]}},{type:"Feature",geometry:{type:"Point",coordinates:[7.762,50.322]},properties:{place_name:"Landcover, Germany z8",zoom:8,tags:["place_label:settlement","road","hillshade"]}}].map((e=>{const{coordinates:i}=e.geometry,{zoom:o}=e.properties,{x:a,y:s}=t.MercatorCoordinate.fromLngLat({lng:i[0],lat:i[1]}),r=Math.pow(2,o),n=Math.floor(a*r),l=Math.floor(s*r);return{description:e.properties.place_name,tileID:[new t.OverscaledTileID(o,0,o,n,l)],zoom:o,center:i}})),rs=window.benchmarks=[];function ns(t,e,i,o){const a=[];for(const t of["https://api.maptiler.com/maps/streets/style.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL"])a.push({name:"string"==typeof t?t:t.name,bench:new e(t,i)});rs.push({name:t,versions:a,location:o})}return ns("StyleLayerCreate",class extends Ya{constructor(t){super(),this.style=t}setup(){return Ja(this.style).then((t=>{this.layers=bt(t.layers)}))}bench(){for(const e of this.layers)t.createStyleLayer(e)}}),ns("Validate",class extends Ya{constructor(t){super(),this.style=t}setup(){return Ja(this.style).then((t=>{this.json=t}))}bench(){t.validateStyleMin(this.json)}}),ss.forEach((t=>ns("Layout",es,t.tileID,t))),ss.forEach((t=>ns("Paint",os,[t],t))),ns("QueryPoint",class extends Ya{constructor(t,e){super(),this.style=t,this.locations=e}setup(){return Promise.all(this.locations.map((t=>is({zoom:t.zoom,width:1024,height:768,center:t.center,style:this.style})))).then((t=>{this.maps=t})).catch((t=>{console.error(t)}))}bench(){for(const t of this.maps)for(const e of as)t.queryRenderedFeatures(e,{})}teardown(){for(const t of this.maps)t.remove()}},ss),ns("QueryBox",class extends Ya{constructor(t,e){super(),this.style=t,this.locations=e}setup(){return Promise.all(this.locations.map((t=>is({zoom:t.zoom,width:1024,height:768,center:t.center,style:this.style})))).then((t=>{this.maps=t})).catch((t=>{console.error(t)}))}bench(){for(const t of this.maps)t.queryRenderedFeatures({})}teardown(){for(const t of this.maps)t.remove()}},ss),Promise.resolve().then((()=>{vt().acquire(-1)})),Ka}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2htYXJrcy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXBib3gvbWFwYm94LWdsLXN1cHBvcnRlZC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL3NyYy9zdHlsZS1zcGVjL3V0aWwvZGVlcF9lcXVhbC50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsL2RvbS50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsL3JlcXVlc3RfbWFuYWdlci50cyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdHJpbW1lZEVuZEluZGV4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzMuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS92ZWMyLmpzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci90ZXh0dXJlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3N0eWxlL3N0eWxlX2ltYWdlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9pbWFnZV9tYW5hZ2VyLnRzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXBib3gvdGlueS1zZGYvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL2dseXBoX21hbmFnZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvc3R5bGUvbG9hZF9nbHlwaF9yYW5nZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9zdHlsZS9saWdodC50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvbGluZV9hdGxhcy50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsL2Rpc3BhdGNoZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL2xvYWRfdGlsZWpzb24udHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3RpbGVfYm91bmRzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NvdXJjZS92ZWN0b3JfdGlsZV9zb3VyY2UudHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3Jhc3Rlcl90aWxlX3NvdXJjZS50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsL29mZnNjcmVlbl9jYW52YXNfc3VwcG9ydGVkLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NvdXJjZS9yYXN0ZXJfZGVtX3RpbGVfc291cmNlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NvdXJjZS9nZW9qc29uX3NvdXJjZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9kYXRhL3Jhc3Rlcl9ib3VuZHNfYXR0cmlidXRlcy50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2UvaW1hZ2Vfc291cmNlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NvdXJjZS92aWRlb19zb3VyY2UudHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL2NhbnZhc19zb3VyY2UudHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3NvdXJjZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2UvdGVtcG9yYWxncmlkX3RpbGVfc291cmNlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NvdXJjZS9xdWVyeV9mZWF0dXJlcy50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2UvdGlsZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9kYXRhL2J1Y2tldC50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2UvdGlsZV9jYWNoZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2Uvc291cmNlX3N0YXRlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3NvdXJjZS9zb3VyY2VfY2FjaGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbC93b3JrZXJfcG9vbC50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsL3dlYl93b3JrZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbC9nbG9iYWxfd29ya2VyX3Bvb2wudHMiLCIuLi8uLi8uLi8uLi9zcmMvc3R5bGUtc3BlYy9kZXJlZi50cyIsIi4uLy4uLy4uLy4uL3NyYy9zdHlsZS1zcGVjL2RpZmYudHMiLCIuLi8uLi8uLi8uLi9zcmMvc3ltYm9sL3BhdGhfaW50ZXJwb2xhdG9yLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3N5bWJvbC9ncmlkX2luZGV4LnRzIiwiLi4vLi4vLi4vLi4vc3JjL3N5bWJvbC9wcm9qZWN0aW9uLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3N5bWJvbC9jb2xsaXNpb25faW5kZXgudHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3BpeGVsc190b190aWxlX3VuaXRzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3N5bWJvbC9wbGFjZW1lbnQudHMiLCIuLi8uLi8uLi8uLi9zcmMvc3R5bGUvcGF1c2VhYmxlX3BsYWNlbWVudC50cyIsIi4uLy4uLy4uLy4uL3NyYy9zeW1ib2wvY3Jvc3NfdGlsZV9zeW1ib2xfaW5kZXgudHMiLCIuLi8uLi8uLi8uLi9zcmMvZGF0YS9wb3NfYXR0cmlidXRlcy50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2UvdGVycmFpbl9zb3VyY2VfY2FjaGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3RlcnJhaW4udHMiLCIuLi8uLi8uLi8uLi9zcmMvc3R5bGUvc3R5bGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvc3R5bGUtc3BlYy9lbXB0eS50cyIsIi4uLy4uLy4uLy4uL3NyYy9zdHlsZS9sb2FkX3Nwcml0ZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9zaGFkZXJzL19wcmVsdWRlLmZyYWdtZW50Lmdsc2wuZy50cyIsIi4uLy4uLy4uLy4uL3NyYy9zaGFkZXJzL3NoYWRlcnMudHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3ZlcnRleF9hcnJheV9vYmplY3QudHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vdGVycmFpbl9wcm9ncmFtLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL3BhdHRlcm4udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vZmlsbF9leHRydXNpb25fcHJvZ3JhbS50cyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL21hdDMuanMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vZmlsbF9wcm9ncmFtLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2NpcmNsZV9wcm9ncmFtLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2NvbGxpc2lvbl9wcm9ncmFtLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2RlYnVnX3Byb2dyYW0udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vY2xpcHBpbmdfbWFza19wcm9ncmFtLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2hlYXRtYXBfcHJvZ3JhbS50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9oaWxsc2hhZGVfcHJvZ3JhbS50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9saW5lX3Byb2dyYW0udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vcmFzdGVyX3Byb2dyYW0udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vc3ltYm9sX3Byb2dyYW0udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vYmFja2dyb3VuZF9wcm9ncmFtLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL3Byb2dyYW1fdW5pZm9ybXMudHMiLCIuLi8uLi8uLi8uLi9zcmMvZ2wvaW5kZXhfYnVmZmVyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2dsL3ZlcnRleF9idWZmZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvZ2wvdmFsdWUudHMiLCIuLi8uLi8uLi8uLi9zcmMvZ2wvZnJhbWVidWZmZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvZ2wvY29sb3JfbW9kZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9nbC9jb250ZXh0LnRzIiwiLi4vLi4vLi4vLi4vc3JjL2dsL2RlcHRoX21vZGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvZ2wvc3RlbmNpbF9tb2RlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2dsL2N1bGxfZmFjZV9tb2RlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2NvbGxpc2lvbl9kZWJ1Zy50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19zeW1ib2wudHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfZmlsbC50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19maWxsX2V4dHJ1c2lvbi50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19oaWxsc2hhZGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfcmFzdGVyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2RlYnVnLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X3RlcnJhaW4udHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL3JlbmRlcl90b190ZXh0dXJlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9wYWludGVyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2NpcmNsZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19oZWF0bWFwLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2xpbmUudHMiLCIuLi8uLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfYmFja2dyb3VuZC50cyIsIi4uLy4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19jdXN0b20udHMiLCIuLi8uLi8uLi8uLi9zcmMvdXRpbC9wcmltaXRpdmVzLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2dlby9lZGdlX2luc2V0cy50cyIsIi4uLy4uLy4uLy4uL3NyYy9nZW8vdHJhbnNmb3JtLnRzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vbWF0Mi5qcyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYXNoLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWwvdGhyb3R0bGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvaGFuZGxlcl9pbmVydGlhLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2V2ZW50cy50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL21hcF9ldmVudC50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL2JveF96b29tLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvaGFuZGxlcl91dGlsLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvdGFwX3JlY29nbml6ZXIudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvaGFuZGxlci90YXBfem9vbS50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL21vdXNlLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvdG91Y2hfcGFuLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvdG91Y2hfem9vbV9yb3RhdGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvaGFuZGxlci9rZXlib2FyZC50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL3Njcm9sbF96b29tLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvc2hpbS9kYmxjbGlja196b29tLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvY2xpY2tfem9vbS50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL3RhcF9kcmFnX3pvb20udHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvaGFuZGxlci9zaGltL2RyYWdfcGFuLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvc2hpbS9kcmFnX3JvdGF0ZS50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL3NoaW0vdG91Y2hfem9vbV9yb3RhdGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvaGFuZGxlcl9tYW5hZ2VyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWwvZGVidWcudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvY2FtZXJhLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvYXR0cmlidXRpb25fY29udHJvbC50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9jb250cm9sL2xvZ29fY29udHJvbC50cyIsIi4uLy4uLy4uLy4uL3NyYy91dGlsL3Rhc2tfcXVldWUudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvZGVmYXVsdF9sb2NhbGUudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvbWFwLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvbmF2aWdhdGlvbl9jb250cm9sLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3V0aWwvc21hcnRfd3JhcC50cyIsIi4uLy4uLy4uLy4uL3NyYy91aS9hbmNob3IudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvbWFya2VyLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvZ2VvbG9jYXRlX2NvbnRyb2wudHMiLCIuLi8uLi8uLi8uLi9zcmMvdWkvY29udHJvbC9zY2FsZV9jb250cm9sLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL3BvcHVwLnRzIiwiLi4vLi4vLi4vLi4vc3JjL2luZGV4LnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvZnVsbHNjcmVlbl9jb250cm9sLnRzIiwiLi4vLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvdGVycmFpbl9jb250cm9sLnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9saWIvYmVuY2htYXJrLnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9saWIvZmV0Y2hfc3R5bGUudHMiLCIuLi8uLi8uLi8uLi90ZXN0L2JlbmNoL2xpYi90aWxlX3BhcnNlci50cyIsIi4uLy4uLy4uLy4uL3Rlc3QvYmVuY2gvYmVuY2htYXJrcy9sYXlvdXQudHMiLCIuLi8uLi8uLi8uLi90ZXN0L2JlbmNoL2xpYi9jcmVhdGVfbWFwLnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9iZW5jaG1hcmtzL3BhaW50LnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9iZW5jaG1hcmtzL3F1ZXJ5X3BvaW50LnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9zdHlsZXMvYmVuY2htYXJrcy50cyIsIi4uLy4uLy4uLy4uL3Rlc3QvYmVuY2gvbGliL2xvY2F0aW9uc193aXRoX3RpbGVfaWQudHMiLCIuLi8uLi8uLi8uLi90ZXN0L2JlbmNoL2JlbmNobWFya3Mvc3R5bGVfbGF5ZXJfY3JlYXRlLnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9iZW5jaG1hcmtzL3N0eWxlX3ZhbGlkYXRlLnRzIiwiLi4vLi4vLi4vLi4vdGVzdC9iZW5jaC9iZW5jaG1hcmtzL3F1ZXJ5X2JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc3VwcG9ydGVkID0gaXNTdXBwb3J0ZWQ7XG5leHBvcnRzLm5vdFN1cHBvcnRlZFJlYXNvbiA9IG5vdFN1cHBvcnRlZFJlYXNvbjtcblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBNYXBib3ggR0wgSlNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ9ZmFsc2VdIFJldHVybiBgZmFsc2VgXG4gKiAgIGlmIHRoZSBwZXJmb3JtYW5jZSBvZiBNYXBib3ggR0wgSlMgd291bGQgYmUgZHJhbWF0aWNhbGx5IHdvcnNlIHRoYW5cbiAqICAgZXhwZWN0ZWQgKGkuZS4gYSBzb2Z0d2FyZSByZW5kZXJlciBpcyB3b3VsZCBiZSB1c2VkKVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTdXBwb3J0ZWQob3B0aW9ucykge1xuICAgIHJldHVybiAhbm90U3VwcG9ydGVkUmVhc29uKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBub3RTdXBwb3J0ZWRSZWFzb24ob3B0aW9ucykge1xuICAgIGlmICghaXNCcm93c2VyKCkpIHJldHVybiAnbm90IGEgYnJvd3Nlcic7XG4gICAgaWYgKCFpc0FycmF5U3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNlbnQgQXJyYXkgc3VwcG9ydCc7XG4gICAgaWYgKCFpc0Z1bmN0aW9uU3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IEZ1bmN0aW9uIHN1cHBvcnQnO1xuICAgIGlmICghaXNPYmplY3RTdXBwb3J0ZWQoKSkgcmV0dXJuICdpbnN1ZmZpY2llbnQgT2JqZWN0IHN1cHBvcnQnO1xuICAgIGlmICghaXNKU09OU3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IEpTT04gc3VwcG9ydCc7XG4gICAgaWYgKCFpc1dvcmtlclN1cHBvcnRlZCgpKSByZXR1cm4gJ2luc3VmZmljaWVudCB3b3JrZXIgc3VwcG9ydCc7XG4gICAgaWYgKCFpc1VpbnQ4Q2xhbXBlZEFycmF5U3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IFVpbnQ4Q2xhbXBlZEFycmF5IHN1cHBvcnQnO1xuICAgIGlmICghaXNBcnJheUJ1ZmZlclN1cHBvcnRlZCgpKSByZXR1cm4gJ2luc3VmZmljaWVudCBBcnJheUJ1ZmZlciBzdXBwb3J0JztcbiAgICBpZiAoIWlzQ2FudmFzR2V0SW1hZ2VEYXRhU3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IENhbnZhcy9nZXRJbWFnZURhdGEgc3VwcG9ydCc7XG4gICAgaWYgKCFpc1dlYkdMU3VwcG9ydGVkQ2FjaGVkKG9wdGlvbnMgJiYgb3B0aW9ucy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0KSkgcmV0dXJuICdpbnN1ZmZpY2llbnQgV2ViR0wgc3VwcG9ydCc7XG4gICAgaWYgKCFpc05vdElFKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IEVDTUFTY3JpcHQgNiBzdXBwb3J0Jztcbn1cblxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5U3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIEFycmF5LnByb3RvdHlwZSAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZXZlcnkgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZpbHRlciAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLm1hcCAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUuc29tZSAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUucmVkdWNlICYmXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCAmJlxuICAgICAgICBBcnJheS5pc0FycmF5XG4gICAgKTtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvblN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdFN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBPYmplY3Qua2V5cyAmJlxuICAgICAgICBPYmplY3QuY3JlYXRlICYmXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJlxuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyAmJlxuICAgICAgICBPYmplY3QuaXNTZWFsZWQgJiZcbiAgICAgICAgT2JqZWN0LmlzRnJvemVuICYmXG4gICAgICAgIE9iamVjdC5pc0V4dGVuc2libGUgJiZcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiZcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgJiZcbiAgICAgICAgT2JqZWN0LnNlYWwgJiZcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSAmJlxuICAgICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnNcbiAgICApO1xufVxuXG5mdW5jdGlvbiBpc0pTT05TdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICdKU09OJyBpbiB3aW5kb3cgJiYgJ3BhcnNlJyBpbiBKU09OICYmICdzdHJpbmdpZnknIGluIEpTT047XG59XG5cbmZ1bmN0aW9uIGlzV29ya2VyU3VwcG9ydGVkKCkge1xuICAgIGlmICghKCdXb3JrZXInIGluIHdpbmRvdyAmJiAnQmxvYicgaW4gd2luZG93ICYmICdVUkwnIGluIHdpbmRvdykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBibG9iID0gbmV3IEJsb2IoWycnXSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KTtcbiAgICB2YXIgd29ya2VyVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICB2YXIgc3VwcG9ydGVkO1xuICAgIHZhciB3b3JrZXI7XG5cbiAgICB0cnkge1xuICAgICAgICB3b3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlclVSTCk7XG4gICAgICAgIHN1cHBvcnRlZCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAod29ya2VyKSB7XG4gICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICB9XG4gICAgVVJMLnJldm9rZU9iamVjdFVSTCh3b3JrZXJVUkwpO1xuXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbn1cblxuLy8gSUUxMSBvbmx5IHN1cHBvcnRzIGBVaW50OENsYW1wZWRBcnJheWAgYXMgb2YgdmVyc2lvblxuLy8gW0tCMjkyOTQzN10oaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20vZW4tdXMva2IvMjkyOTQzNylcbmZ1bmN0aW9uIGlzVWludDhDbGFtcGVkQXJyYXlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICdVaW50OENsYW1wZWRBcnJheScgaW4gd2luZG93O1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1zdXBwb3J0ZWQvaXNzdWVzLzE5XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG59XG5cbi8vIFNvbWUgYnJvd3NlcnMgb3IgYnJvd3NlciBleHRlbnNpb25zIGJsb2NrIGFjY2VzcyB0byBjYW52YXMgZGF0YSB0byBwcmV2ZW50IGZpbmdlcnByaW50aW5nLlxuLy8gTWFwYm94IEdMIHVzZXMgdGhpcyBBUEkgdG8gbG9hZCBzcHJpdGVzIGFuZCBpbWFnZXMgaW4gZ2VuZXJhbC5cbmZ1bmN0aW9uIGlzQ2FudmFzR2V0SW1hZ2VEYXRhU3VwcG9ydGVkKCkge1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKTtcbiAgICByZXR1cm4gaW1hZ2VEYXRhICYmIGltYWdlRGF0YS53aWR0aCA9PT0gY2FudmFzLndpZHRoO1xufVxuXG52YXIgaXNXZWJHTFN1cHBvcnRlZENhY2hlID0ge307XG5mdW5jdGlvbiBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVkKGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpIHtcblxuICAgIGlmIChpc1dlYkdMU3VwcG9ydGVkQ2FjaGVbZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVbZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdF0gPSBpc1dlYkdMU3VwcG9ydGVkKGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpO1xuICAgIH1cblxuICAgIHJldHVybiBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVbZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdF07XG59XG5cbmlzU3VwcG9ydGVkLndlYkdMQ29udGV4dEF0dHJpYnV0ZXMgPSB7XG4gICAgYW50aWFsaWFzOiBmYWxzZSxcbiAgICBhbHBoYTogdHJ1ZSxcbiAgICBzdGVuY2lsOiB0cnVlLFxuICAgIGRlcHRoOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBnZXRXZWJHTENvbnRleHQoZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCkge1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmNyZWF0ZShpc1N1cHBvcnRlZC53ZWJHTENvbnRleHRBdHRyaWJ1dGVzKTtcbiAgICBhdHRyaWJ1dGVzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgYXR0cmlidXRlcykgfHxcbiAgICAgICAgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGF0dHJpYnV0ZXMpXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gaXNXZWJHTFN1cHBvcnRlZChmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0KSB7XG4gICAgdmFyIGdsID0gZ2V0V2ViR0xDb250ZXh0KGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpO1xuICAgIGlmICghZ2wpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRyeSBjb21waWxpbmcgYSBzaGFkZXIgYW5kIGdldCBpdHMgY29tcGlsZSBzdGF0dXMuIFNvbWUgYnJvd3NlcnMgbGlrZSBCcmF2ZSBibG9jayB0aGlzIEFQSVxuICAgIC8vIHRvIHByZXZlbnQgZmluZ2VycHJpbnRpbmcuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBtZWFucyB0aGF0IE1hcGJveCBHTCB3b24ndCB3b3JrLlxuICAgIHZhciBzaGFkZXI7XG4gICAgdHJ5IHtcbiAgICAgICAgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gc29tZSBvbGRlciBicm93c2VycyB0aHJvdyBhbiBleGNlcHRpb24gdGhhdCBgY3JlYXRlU2hhZGVyYCBpcyBub3QgZGVmaW5lZFxuICAgICAgICAvLyBzbyBoYW5kbGUgdGhpcyBzZXBhcmF0ZWx5IGZyb20gdGhlIGNhc2Ugd2hlcmUgYnJvd3NlcnMgYmxvY2sgYGNyZWF0ZVNoYWRlcmBcbiAgICAgICAgLy8gZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc2hhZGVyIHx8IGdsLmlzQ29udGV4dExvc3QoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsICd2b2lkIG1haW4oKSB7fScpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgICByZXR1cm4gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc05vdElFKCkge1xuICAgIHJldHVybiAhZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuIixudWxsLG51bGwsbnVsbCwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbW1lZEVuZEluZGV4O1xuIiwidmFyIHRyaW1tZWRFbmRJbmRleCA9IHJlcXVpcmUoJy4vX3RyaW1tZWRFbmRJbmRleCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRyaW07XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIGJhc2VUcmltID0gcmVxdWlyZSgnLi9fYmFzZVRyaW0nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgbm93ID0gcmVxdWlyZSgnLi9ub3cnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogMyBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBtb2R1bGUgdmVjM1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjM1xuICpcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSwgeik7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSwgeikge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMzIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMyB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNlaWxcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMzIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gdmVjMydzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICBpZiAobGVuID4gMCkge1xuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICB9XG5cbiAgb3V0WzBdID0gYVswXSAqIGxlbjtcbiAgb3V0WzFdID0gYVsxXSAqIGxlbjtcbiAgb3V0WzJdID0gYVsyXSAqIGxlbjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdO1xuICB2YXIgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdO1xuICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF07XG4gIHZhciBheSA9IGFbMV07XG4gIHZhciBheiA9IGFbMl07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgaGVybWl0ZSBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGVybWl0ZShvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICB2YXIgZmFjdG9yMSA9IGZhY3RvclRpbWVzMiAqICgyICogdCAtIDMpICsgMTtcbiAgdmFyIGZhY3RvcjIgPSBmYWN0b3JUaW1lczIgKiAodCAtIDIpICsgdDtcbiAgdmFyIGZhY3RvcjMgPSBmYWN0b3JUaW1lczIgKiAodCAtIDEpO1xuICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqICgzIC0gMiAqIHQpO1xuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGJlemllciBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYmV6aWVyKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICB2YXIgaW52ZXJzZUZhY3RvciA9IDEgLSB0O1xuICB2YXIgaW52ZXJzZUZhY3RvclRpbWVzVHdvID0gaW52ZXJzZUZhY3RvciAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3JUaW1lczIgPSB0ICogdDtcbiAgdmFyIGZhY3RvcjEgPSBpbnZlcnNlRmFjdG9yVGltZXNUd28gKiBpbnZlcnNlRmFjdG9yO1xuICB2YXIgZmFjdG9yMiA9IDMgKiB0ICogaW52ZXJzZUZhY3RvclRpbWVzVHdvO1xuICB2YXIgZmFjdG9yMyA9IDMgKiBmYWN0b3JUaW1lczIgKiBpbnZlcnNlRmFjdG9yO1xuICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqIHQ7XG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuICB2YXIgciA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wICogTWF0aC5QSTtcbiAgdmFyIHogPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAtIDEuMDtcbiAgdmFyIHpTY2FsZSA9IE1hdGguc3FydCgxLjAgLSB6ICogeikgKiBzY2FsZTtcbiAgb3V0WzBdID0gTWF0aC5jb3MocikgKiB6U2NhbGU7XG4gIG91dFsxXSA9IE1hdGguc2luKHIpICogelNjYWxlO1xuICBvdXRbMl0gPSB6ICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIHZhciB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICB3ID0gdyB8fCAxLjA7XG4gIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcbiAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgLyB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQzLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gdGhlIDN4MyBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgb3V0WzBdID0geCAqIG1bMF0gKyB5ICogbVszXSArIHogKiBtWzZdO1xuICBvdXRbMV0gPSB4ICogbVsxXSArIHkgKiBtWzRdICsgeiAqIG1bN107XG4gIG91dFsyXSA9IHggKiBtWzJdICsgeSAqIG1bNV0gKyB6ICogbVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxuICogQ2FuIGFsc28gYmUgdXNlZCBmb3IgZHVhbCBxdWF0ZXJuaW9ucy4gKE11bHRpcGx5IGl0IHdpdGggdGhlIHJlYWwgcGFydClcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgLy8gYmVuY2htYXJrczogaHR0cHM6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tdHJhbnNmb3JtLXZlYzMtaW1wbGVtZW50YXRpb25zLWZpeGVkXG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM107XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07IC8vIHZhciBxdmVjID0gW3F4LCBxeSwgcXpdO1xuICAvLyB2YXIgdXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCBhKTtcblxuICB2YXIgdXZ4ID0gcXkgKiB6IC0gcXogKiB5LFxuICAgICAgdXZ5ID0gcXogKiB4IC0gcXggKiB6LFxuICAgICAgdXZ6ID0gcXggKiB5IC0gcXkgKiB4OyAvLyB2YXIgdXV2ID0gdmVjMy5jcm9zcyhbXSwgcXZlYywgdXYpO1xuXG4gIHZhciB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eSxcbiAgICAgIHV1dnkgPSBxeiAqIHV2eCAtIHF4ICogdXZ6LFxuICAgICAgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7IC8vIHZlYzMuc2NhbGUodXYsIHV2LCAyICogdyk7XG5cbiAgdmFyIHcyID0gcXcgKiAyO1xuICB1dnggKj0gdzI7XG4gIHV2eSAqPSB3MjtcbiAgdXZ6ICo9IHcyOyAvLyB2ZWMzLnNjYWxlKHV1diwgdXV2LCAyKTtcblxuICB1dXZ4ICo9IDI7XG4gIHV1dnkgKj0gMjtcbiAgdXV2eiAqPSAyOyAvLyByZXR1cm4gdmVjMy5hZGQob3V0LCBhLCB2ZWMzLmFkZChvdXQsIHV2LCB1dXYpKTtcblxuICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcbiAgb3V0WzFdID0geSArIHV2eSArIHV1dnk7XG4gIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB4LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgYiwgcmFkKSB7XG4gIHZhciBwID0gW10sXG4gICAgICByID0gW107IC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cblxuICBwWzBdID0gYVswXSAtIGJbMF07XG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcFsyXSA9IGFbMl0gLSBiWzJdOyAvL3BlcmZvcm0gcm90YXRpb25cblxuICByWzBdID0gcFswXTtcbiAgclsxXSA9IHBbMV0gKiBNYXRoLmNvcyhyYWQpIC0gcFsyXSAqIE1hdGguc2luKHJhZCk7XG4gIHJbMl0gPSBwWzFdICogTWF0aC5zaW4ocmFkKSArIHBbMl0gKiBNYXRoLmNvcyhyYWQpOyAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG5cbiAgb3V0WzBdID0gclswXSArIGJbMF07XG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeS1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMl0gKiBNYXRoLnNpbihyYWQpICsgcFswXSAqIE1hdGguY29zKHJhZCk7XG4gIHJbMV0gPSBwWzFdO1xuICByWzJdID0gcFsyXSAqIE1hdGguY29zKHJhZCkgLSBwWzBdICogTWF0aC5zaW4ocmFkKTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHotYXhpc1xuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzBdICogTWF0aC5jb3MocmFkKSAtIHBbMV0gKiBNYXRoLnNpbihyYWQpO1xuICByWzFdID0gcFswXSAqIE1hdGguc2luKHJhZCkgKyBwWzFdICogTWF0aC5jb3MocmFkKTtcbiAgclsyXSA9IHBbMl07IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDNEIHZlY3RvcnNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKGEsIGIpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIG1hZzEgPSBNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkgKyBheiAqIGF6KSxcbiAgICAgIG1hZzIgPSBNYXRoLnNxcnQoYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6KSxcbiAgICAgIG1hZyA9IG1hZzEgKiBtYWcyLFxuICAgICAgY29zaW5lID0gbWFnICYmIGRvdChhLCBiKSAvIG1hZztcbiAgcmV0dXJuIE1hdGguYWNvcyhNYXRoLm1pbihNYXRoLm1heChjb3NpbmUsIC0xKSwgMSkpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHplcm9cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvKG91dCkge1xuICBvdXRbMF0gPSAwLjA7XG4gIG91dFsxXSA9IDAuMDtcbiAgb3V0WzJdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMyhcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiKVwiO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSk7XG59XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zdWJ0cmFjdH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5kaXZpZGV9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpdiA9IGRpdmlkZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBkaXN0ID0gZGlzdGFuY2U7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkRGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMzcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMzLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjM3MgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cbiAqIEByZXR1cm5zIHtBcnJheX0gYVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmVjID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgdmFyIGksIGw7XG5cbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMztcbiAgICB9XG5cbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07XG4gICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcbiAgICAgIHZlY1syXSA9IGFbaSArIDJdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgICBhW2kgKyAyXSA9IHZlY1syXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0oKTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogMiBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBtb2R1bGUgdmVjMlxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjMlxuICpcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzIgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMyIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMyIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICB5ID0gYlsxXSAtIGFbMV07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHkpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHk7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IGFbMF0gKiBsZW47XG4gIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXG4gKiBOb3RlIHRoYXQgdGhlIGNyb3NzIHByb2R1Y3QgbXVzdCBieSBkZWZpbml0aW9uIHByb2R1Y2UgYSAzRCB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcbiAgdmFyIHogPSBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdO1xuICBvdXRbMF0gPSBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHNjYWxlO1xuICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MihvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHk7XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDJkKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXG4gKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bM10gKiB5ICsgbVs2XTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzRdICogeSArIG1bN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDRcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzAnXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzEzXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgMkQgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSB2ZWMyIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgYiwgcmFkKSB7XG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgdmFyIHAwID0gYVswXSAtIGJbMF0sXG4gICAgICBwMSA9IGFbMV0gLSBiWzFdLFxuICAgICAgc2luQyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjb3NDID0gTWF0aC5jb3MocmFkKTsgLy9wZXJmb3JtIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHAwICogY29zQyAtIHAxICogc2luQyArIGJbMF07XG4gIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gMkQgdmVjdG9yc1xuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xuICB2YXIgeDEgPSBhWzBdLFxuICAgICAgeTEgPSBhWzFdLFxuICAgICAgeDIgPSBiWzBdLFxuICAgICAgeTIgPSBiWzFdLFxuICAgICAgLy8gbWFnIGlzIHRoZSBwcm9kdWN0IG9mIHRoZSBtYWduaXR1ZGVzIG9mIGEgYW5kIGJcbiAgbWFnID0gTWF0aC5zcXJ0KHgxICogeDEgKyB5MSAqIHkxKSAqIE1hdGguc3FydCh4MiAqIHgyICsgeTIgKiB5MiksXG4gICAgICAvLyBtYWcgJiYuLiBzaG9ydCBjaXJjdWl0cyBpZiBtYWcgPT0gMFxuICBjb3NpbmUgPSBtYWcgJiYgKHgxICogeDIgKyB5MSAqIHkyKSAvIG1hZzsgLy8gTWF0aC5taW4oTWF0aC5tYXgoY29zaW5lLCAtMSksIDEpIGNsYW1wcyB0aGUgY29zaW5lIGJldHdlZW4gLTEgYW5kIDFcblxuICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSk7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMihcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgZXhhY3RseSBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBkaXYgPSBkaXZpZGU7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGlzdCA9IGRpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZERpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMycyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSAyO1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG59KCk7IixudWxsLG51bGwsbnVsbCwiY29uc3QgSU5GID0gMWUyMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlueVNERiB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBmb250U2l6ZSA9IDI0LFxuICAgICAgICBidWZmZXIgPSAzLFxuICAgICAgICByYWRpdXMgPSA4LFxuICAgICAgICBjdXRvZmYgPSAwLjI1LFxuICAgICAgICBmb250RmFtaWx5ID0gJ3NhbnMtc2VyaWYnLFxuICAgICAgICBmb250V2VpZ2h0ID0gJ25vcm1hbCcsXG4gICAgICAgIGZvbnRTdHlsZSA9ICdub3JtYWwnXG4gICAgfSkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5jdXRvZmYgPSBjdXRvZmY7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXG4gICAgICAgIC8vIG1ha2UgdGhlIGNhbnZhcyBzaXplIGJpZyBlbm91Z2ggdG8gYm90aCBoYXZlIHRoZSBzcGVjaWZpZWQgYnVmZmVyIGFyb3VuZCB0aGUgZ2x5cGhcbiAgICAgICAgLy8gZm9yIFwiaGFsb1wiLCBhbmQgYWNjb3VudCBmb3Igc29tZSBnbHlwaHMgcG9zc2libHkgYmVpbmcgbGFyZ2VyIHRoYW4gdGhlaXIgZm9udCBzaXplXG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLnNpemUgPSBmb250U2l6ZSArIGJ1ZmZlciAqIDQ7XG5cbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5fY3JlYXRlQ2FudmFzKHNpemUpO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHt3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWV9KTtcbiAgICAgICAgY3R4LmZvbnQgPSBgJHtmb250U3R5bGV9ICR7Zm9udFdlaWdodH0gJHtmb250U2l6ZX1weCAke2ZvbnRGYW1pbHl9YDtcblxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ2FscGhhYmV0aWMnO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnOyAvLyBOZWNlc3Nhcnkgc28gdGhhdCBSVEwgdGV4dCBkb2Vzbid0IGhhdmUgZGlmZmVyZW50IGFsaWdubWVudFxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcblxuICAgICAgICAvLyB0ZW1wb3JhcnkgYXJyYXlzIGZvciB0aGUgZGlzdGFuY2UgdHJhbnNmb3JtXG4gICAgICAgIHRoaXMuZ3JpZE91dGVyID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogc2l6ZSk7XG4gICAgICAgIHRoaXMuZ3JpZElubmVyID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogc2l6ZSk7XG4gICAgICAgIHRoaXMuZiA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSk7XG4gICAgICAgIHRoaXMueiA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSArIDEpO1xuICAgICAgICB0aGlzLnYgPSBuZXcgVWludDE2QXJyYXkoc2l6ZSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNhbnZhcyhzaXplKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXMuaGVpZ2h0ID0gc2l6ZTtcbiAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICB9XG5cbiAgICBkcmF3KGNoYXIpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgd2lkdGg6IGdseXBoQWR2YW5jZSxcbiAgICAgICAgICAgIGFjdHVhbEJvdW5kaW5nQm94QXNjZW50LFxuICAgICAgICAgICAgYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50LFxuICAgICAgICAgICAgYWN0dWFsQm91bmRpbmdCb3hMZWZ0LFxuICAgICAgICAgICAgYWN0dWFsQm91bmRpbmdCb3hSaWdodFxuICAgICAgICB9ID0gdGhpcy5jdHgubWVhc3VyZVRleHQoY2hhcik7XG5cbiAgICAgICAgLy8gVGhlIGludGVnZXIvcGl4ZWwgcGFydCBvZiB0aGUgdG9wIGFsaWdubWVudCBpcyBlbmNvZGVkIGluIG1ldHJpY3MuZ2x5cGhUb3BcbiAgICAgICAgLy8gVGhlIHJlbWFpbmRlciBpcyBpbXBsaWNpdGx5IGVuY29kZWQgaW4gdGhlIHJhc3Rlcml6YXRpb25cbiAgICAgICAgY29uc3QgZ2x5cGhUb3AgPSBNYXRoLmZsb29yKGFjdHVhbEJvdW5kaW5nQm94QXNjZW50KTtcbiAgICAgICAgY29uc3QgZ2x5cGhMZWZ0ID0gMDtcblxuICAgICAgICAvLyBJZiB0aGUgZ2x5cGggb3ZlcmZsb3dzIHRoZSBjYW52YXMgc2l6ZSwgaXQgd2lsbCBiZSBjbGlwcGVkIGF0IHRoZSBib3R0b20vcmlnaHRcbiAgICAgICAgY29uc3QgZ2x5cGhXaWR0aCA9IE1hdGgubWluKHRoaXMuc2l6ZSAtIHRoaXMuYnVmZmVyLCBNYXRoLmNlaWwoYWN0dWFsQm91bmRpbmdCb3hSaWdodCAtIGFjdHVhbEJvdW5kaW5nQm94TGVmdCkpO1xuICAgICAgICBjb25zdCBnbHlwaEhlaWdodCA9IE1hdGgubWluKHRoaXMuc2l6ZSAtIHRoaXMuYnVmZmVyLCBNYXRoLmNlaWwoYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQpICsgTWF0aC5jZWlsKGFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCkpO1xuXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2x5cGhXaWR0aCArIDIgKiB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gZ2x5cGhIZWlnaHQgKyAyICogdGhpcy5idWZmZXI7XG5cbiAgICAgICAgY29uc3QgbGVuID0gd2lkdGggKiBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkobGVuKTtcbiAgICAgICAgY29uc3QgZ2x5cGggPSB7ZGF0YSwgd2lkdGgsIGhlaWdodCwgZ2x5cGhXaWR0aCwgZ2x5cGhIZWlnaHQsIGdseXBoVG9wLCBnbHlwaExlZnQsIGdseXBoQWR2YW5jZX07XG4gICAgICAgIGlmIChnbHlwaFdpZHRoID09PSAwIHx8IGdseXBoSGVpZ2h0ID09PSAwKSByZXR1cm4gZ2x5cGg7XG5cbiAgICAgICAgY29uc3Qge2N0eCwgYnVmZmVyLCBncmlkSW5uZXIsIGdyaWRPdXRlcn0gPSB0aGlzO1xuICAgICAgICBjdHguY2xlYXJSZWN0KGJ1ZmZlciwgYnVmZmVyLCBnbHlwaFdpZHRoLCBnbHlwaEhlaWdodCk7XG4gICAgICAgIGN0eC5maWxsVGV4dChjaGFyLCBidWZmZXIsIGJ1ZmZlciArIGdseXBoVG9wICsgMSk7XG4gICAgICAgIGNvbnN0IGltZ0RhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKGJ1ZmZlciwgYnVmZmVyLCBnbHlwaFdpZHRoLCBnbHlwaEhlaWdodCk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBncmlkcyBvdXRzaWRlIHRoZSBnbHlwaCByYW5nZSB0byBhbHBoYSAwXG4gICAgICAgIGdyaWRPdXRlci5maWxsKElORiwgMCwgbGVuKTtcbiAgICAgICAgZ3JpZElubmVyLmZpbGwoMCwgMCwgbGVuKTtcblxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGdseXBoSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgZ2x5cGhXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGltZ0RhdGEuZGF0YVs0ICogKHkgKiBnbHlwaFdpZHRoICsgeCkgKyAzXSAvIDI1NTsgLy8gYWxwaGEgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoYSA9PT0gMCkgY29udGludWU7IC8vIGVtcHR5IHBpeGVsc1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaiA9ICh5ICsgYnVmZmVyKSAqIHdpZHRoICsgeCArIGJ1ZmZlcjtcblxuICAgICAgICAgICAgICAgIGlmIChhID09PSAxKSB7IC8vIGZ1bGx5IGRyYXduIHBpeGVsc1xuICAgICAgICAgICAgICAgICAgICBncmlkT3V0ZXJbal0gPSAwO1xuICAgICAgICAgICAgICAgICAgICBncmlkSW5uZXJbal0gPSBJTkY7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBhbGlhc2VkIHBpeGVsc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gMC41IC0gYTtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZE91dGVyW2pdID0gZCA+IDAgPyBkICogZCA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRJbm5lcltqXSA9IGQgPCAwID8gZCAqIGQgOiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGVkdChncmlkT3V0ZXIsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIHdpZHRoLCB0aGlzLmYsIHRoaXMudiwgdGhpcy56KTtcbiAgICAgICAgZWR0KGdyaWRJbm5lciwgYnVmZmVyLCBidWZmZXIsIGdseXBoV2lkdGgsIGdseXBoSGVpZ2h0LCB3aWR0aCwgdGhpcy5mLCB0aGlzLnYsIHRoaXMueik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZCA9IE1hdGguc3FydChncmlkT3V0ZXJbaV0pIC0gTWF0aC5zcXJ0KGdyaWRJbm5lcltpXSk7XG4gICAgICAgICAgICBkYXRhW2ldID0gTWF0aC5yb3VuZCgyNTUgLSAyNTUgKiAoZCAvIHRoaXMucmFkaXVzICsgdGhpcy5jdXRvZmYpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbHlwaDtcbiAgICB9XG59XG5cbi8vIDJEIEV1Y2xpZGVhbiBzcXVhcmVkIGRpc3RhbmNlIHRyYW5zZm9ybSBieSBGZWx6ZW5zendhbGIgJiBIdXR0ZW5sb2NoZXIgaHR0cHM6Ly9jcy5icm93bi5lZHUvfnBmZi9wYXBlcnMvZHQtZmluYWwucGRmXG5mdW5jdGlvbiBlZHQoZGF0YSwgeDAsIHkwLCB3aWR0aCwgaGVpZ2h0LCBncmlkU2l6ZSwgZiwgdiwgeikge1xuICAgIGZvciAobGV0IHggPSB4MDsgeCA8IHgwICsgd2lkdGg7IHgrKykgZWR0MWQoZGF0YSwgeTAgKiBncmlkU2l6ZSArIHgsIGdyaWRTaXplLCBoZWlnaHQsIGYsIHYsIHopO1xuICAgIGZvciAobGV0IHkgPSB5MDsgeSA8IHkwICsgaGVpZ2h0OyB5KyspIGVkdDFkKGRhdGEsIHkgKiBncmlkU2l6ZSArIHgwLCAxLCB3aWR0aCwgZiwgdiwgeik7XG59XG5cbi8vIDFEIHNxdWFyZWQgZGlzdGFuY2UgdHJhbnNmb3JtXG5mdW5jdGlvbiBlZHQxZChncmlkLCBvZmZzZXQsIHN0cmlkZSwgbGVuZ3RoLCBmLCB2LCB6KSB7XG4gICAgdlswXSA9IDA7XG4gICAgelswXSA9IC1JTkY7XG4gICAgelsxXSA9IElORjtcbiAgICBmWzBdID0gZ3JpZFtvZmZzZXRdO1xuXG4gICAgZm9yIChsZXQgcSA9IDEsIGsgPSAwLCBzID0gMDsgcSA8IGxlbmd0aDsgcSsrKSB7XG4gICAgICAgIGZbcV0gPSBncmlkW29mZnNldCArIHEgKiBzdHJpZGVdO1xuICAgICAgICBjb25zdCBxMiA9IHEgKiBxO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCByID0gdltrXTtcbiAgICAgICAgICAgIHMgPSAoZltxXSAtIGZbcl0gKyBxMiAtIHIgKiByKSAvIChxIC0gcikgLyAyO1xuICAgICAgICB9IHdoaWxlIChzIDw9IHpba10gJiYgLS1rID4gLTEpO1xuXG4gICAgICAgIGsrKztcbiAgICAgICAgdltrXSA9IHE7XG4gICAgICAgIHpba10gPSBzO1xuICAgICAgICB6W2sgKyAxXSA9IElORjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBxID0gMCwgayA9IDA7IHEgPCBsZW5ndGg7IHErKykge1xuICAgICAgICB3aGlsZSAoeltrICsgMV0gPCBxKSBrKys7XG4gICAgICAgIGNvbnN0IHIgPSB2W2tdO1xuICAgICAgICBjb25zdCBxciA9IHEgLSByO1xuICAgICAgICBncmlkW29mZnNldCArIHEgKiBzdHJpZGVdID0gZltyXSArIHFyICogcXI7XG4gICAgfVxufVxuIixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiAzeDMgTWF0cml4XG4gKiBAbW9kdWxlIG1hdDNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0M1xuICpcbiAqIEByZXR1cm5zIHttYXQzfSBhIG5ldyAzeDMgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICB9XG5cbiAgb3V0WzBdID0gMTtcbiAgb3V0WzRdID0gMTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29waWVzIHRoZSB1cHBlci1sZWZ0IDN4MyB2YWx1ZXMgaW50byB0aGUgZ2l2ZW4gbWF0My5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIDN4MyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzRdO1xuICBvdXRbNF0gPSBhWzVdO1xuICBvdXRbNV0gPSBhWzZdO1xuICBvdXRbNl0gPSBhWzhdO1xuICBvdXRbN10gPSBhWzldO1xuICBvdXRbOF0gPSBhWzEwXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQzIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgbWF0cml4IHRvIGNsb25lXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgbWF0MyB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDUpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDYpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDcpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDgpXG4gKiBAcmV0dXJucyB7bWF0M30gQSBuZXcgbWF0M1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTAyO1xuICBvdXRbM10gPSBtMTA7XG4gIG91dFs0XSA9IG0xMTtcbiAgb3V0WzVdID0gbTEyO1xuICBvdXRbNl0gPSBtMjA7XG4gIG91dFs3XSA9IG0yMTtcbiAgb3V0WzhdID0gbTIyO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0xMDtcbiAgb3V0WzRdID0gbTExO1xuICBvdXRbNV0gPSBtMTI7XG4gIG91dFs2XSA9IG0yMDtcbiAgb3V0WzddID0gbTIxO1xuICBvdXRbOF0gPSBtMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCBhIG1hdDMgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAxO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gIGlmIChvdXQgPT09IGEpIHtcbiAgICB2YXIgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBvdXRbMV0gPSBhWzNdO1xuICAgIG91dFsyXSA9IGFbNl07XG4gICAgb3V0WzNdID0gYTAxO1xuICAgIG91dFs1XSA9IGFbN107XG4gICAgb3V0WzZdID0gYTAyO1xuICAgIG91dFs3XSA9IGExMjtcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbM107XG4gICAgb3V0WzJdID0gYVs2XTtcbiAgICBvdXRbM10gPSBhWzFdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs3XTtcbiAgICBvdXRbNl0gPSBhWzJdO1xuICAgIG91dFs3XSA9IGFbNV07XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEludmVydHMgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgdmFyIGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgdmFyIGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjA7XG4gIHZhciBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IGIwMSAqIGRldDtcbiAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgb3V0WzNdID0gYjExICogZGV0O1xuICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICBvdXRbNl0gPSBiMjEgKiBkZXQ7XG4gIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdO1xuICB2YXIgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdO1xuICB2YXIgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdO1xuICBvdXRbMF0gPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gIG91dFsxXSA9IGEwMiAqIGEyMSAtIGEwMSAqIGEyMjtcbiAgb3V0WzJdID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICBvdXRbM10gPSBhMTIgKiBhMjAgLSBhMTAgKiBhMjI7XG4gIG91dFs0XSA9IGEwMCAqIGEyMiAtIGEwMiAqIGEyMDtcbiAgb3V0WzVdID0gYTAyICogYTEwIC0gYTAwICogYTEyO1xuICBvdXRbNl0gPSBhMTAgKiBhMjEgLSBhMTEgKiBhMjA7XG4gIG91dFs3XSA9IGEwMSAqIGEyMCAtIGEwMCAqIGEyMTtcbiAgb3V0WzhdID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl07XG4gIHZhciBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV07XG4gIHZhciBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF07XG4gIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgdmFyIGIwMCA9IGJbMF0sXG4gICAgICBiMDEgPSBiWzFdLFxuICAgICAgYjAyID0gYlsyXTtcbiAgdmFyIGIxMCA9IGJbM10sXG4gICAgICBiMTEgPSBiWzRdLFxuICAgICAgYjEyID0gYls1XTtcbiAgdmFyIGIyMCA9IGJbNl0sXG4gICAgICBiMjEgPSBiWzddLFxuICAgICAgYjIyID0gYls4XTtcbiAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcbiAgb3V0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gIG91dFs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcbiAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICBvdXRbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gIG91dFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XSxcbiAgICAgIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XSxcbiAgICAgIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV07XG4gIG91dFswXSA9IGEwMDtcbiAgb3V0WzFdID0gYTAxO1xuICBvdXRbMl0gPSBhMDI7XG4gIG91dFszXSA9IGExMDtcbiAgb3V0WzRdID0gYTExO1xuICBvdXRbNV0gPSBhMTI7XG4gIG91dFs2XSA9IHggKiBhMDAgKyB5ICogYTEwICsgYTIwO1xuICBvdXRbN10gPSB4ICogYTAxICsgeSAqIGExMSArIGEyMTtcbiAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQzIGJ5IHRoZSBnaXZlbiBhbmdsZVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV0sXG4gICAgICBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF0sXG4gICAgICBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBjICogYTAwICsgcyAqIGExMDtcbiAgb3V0WzFdID0gYyAqIGEwMSArIHMgKiBhMTE7XG4gIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xuICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcbiAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XG4gIG91dFs1XSA9IGMgKiBhMTIgLSBzICogYTAyO1xuICBvdXRbNl0gPSBhMjA7XG4gIG91dFs3XSA9IGEyMTtcbiAgb3V0WzhdID0gYTIyO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICB2YXIgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXTtcbiAgb3V0WzBdID0geCAqIGFbMF07XG4gIG91dFsxXSA9IHggKiBhWzFdO1xuICBvdXRbMl0gPSB4ICogYVsyXTtcbiAgb3V0WzNdID0geSAqIGFbM107XG4gIG91dFs0XSA9IHkgKiBhWzRdO1xuICBvdXRbNV0gPSB5ICogYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQzLnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IHZbMF07XG4gIG91dFs3XSA9IHZbMV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQzLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gLXM7XG4gIG91dFs0XSA9IGM7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQzLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHZbMV07XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIGZyb20gYSBtYXQyZCBpbnRvIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjb3B5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MmQob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IGFbMl07XG4gIG91dFs0XSA9IGFbM107XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IGFbNF07XG4gIG91dFs3XSA9IGFbNV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeXggPSB5ICogeDI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHp4ID0geiAqIHgyO1xuICB2YXIgenkgPSB6ICogeTI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gIG91dFszXSA9IHl4IC0gd3o7XG4gIG91dFs2XSA9IHp4ICsgd3k7XG4gIG91dFsxXSA9IHl4ICsgd3o7XG4gIG91dFs0XSA9IDEgLSB4eCAtIHp6O1xuICBvdXRbN10gPSB6eSAtIHd4O1xuICBvdXRbMl0gPSB6eCAtIHd5O1xuICBvdXRbNV0gPSB6eSArIHd4O1xuICBvdXRbOF0gPSAxIC0geHggLSB5eTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBub3JtYWwgbWF0cml4ICh0cmFuc3Bvc2UgaW52ZXJzZSkgZnJvbSB0aGUgNHg0IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIE1hdDQgdG8gZGVyaXZlIHRoZSBub3JtYWwgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHZhciBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRldCA9IDEuMCAvIGRldDtcbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgb3V0WzNdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICBvdXRbNV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcbiAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gIG91dFs3XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICBvdXRbOF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgMkQgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHlvdXIgZ2wgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZ2wgY29udGV4dFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uKG91dCwgd2lkdGgsIGhlaWdodCkge1xuICBvdXRbMF0gPSAyIC8gd2lkdGg7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAtMTtcbiAgb3V0WzddID0gMTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJtYXQzKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiLCBcIiArIGFbNF0gKyBcIiwgXCIgKyBhWzVdICsgXCIsIFwiICsgYVs2XSArIFwiLCBcIiArIGFbN10gKyBcIiwgXCIgKyBhWzhdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCBhWzZdLCBhWzddLCBhWzhdKTtcbn1cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgb3V0WzddID0gYVs3XSArIGJbN107XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICBvdXRbOF0gPSBhWzhdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gbWF0MydzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF0gKiBzY2FsZTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcbiAgb3V0WzZdID0gYVs2XSArIGJbNl0gKiBzY2FsZTtcbiAgb3V0WzddID0gYVs3XSArIGJbN10gKiBzY2FsZTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV0gJiYgYVs2XSA9PT0gYls2XSAmJiBhWzddID09PSBiWzddICYmIGFbOF0gPT09IGJbOF07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN10sXG4gICAgICBhOCA9IGFbOF07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN10sXG4gICAgICBiOCA9IGJbOF07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDsiLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogMngyIE1hdHJpeFxuICogQG1vZHVsZSBtYXQyXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDJcbiAqXG4gKiBAcmV0dXJucyB7bWF0Mn0gYSBuZXcgMngyIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDIgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSBtYXRyaXggdG8gY2xvbmVcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MiB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCBhIG1hdDIgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgbWF0MiB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDMpXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0IEEgbmV3IDJ4MiBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyhtMDAsIG0wMSwgbTEwLCBtMTEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTEwO1xuICBvdXRbM10gPSBtMTE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDIgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDMpXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMTAsIG0xMSkge1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTEwO1xuICBvdXRbM10gPSBtMTE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGVcbiAgLy8gc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIHZhciBhMSA9IGFbMV07XG4gICAgb3V0WzFdID0gYVsyXTtcbiAgICBvdXRbMl0gPSBhMTtcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMl07XG4gICAgb3V0WzJdID0gYVsxXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG5cbiAgdmFyIGRldCA9IGEwICogYTMgLSBhMiAqIGExO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IGEzICogZGV0O1xuICBvdXRbMV0gPSAtYTEgKiBkZXQ7XG4gIG91dFsyXSA9IC1hMiAqIGRldDtcbiAgb3V0WzNdID0gYTAgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICAvLyBDYWNoaW5nIHRoaXMgdmFsdWUgaXMgbmVzc2VjYXJ5IGlmIG91dCA9PSBhXG4gIHZhciBhMCA9IGFbMF07XG4gIG91dFswXSA9IGFbM107XG4gIG91dFsxXSA9IC1hWzFdO1xuICBvdXRbMl0gPSAtYVsyXTtcbiAgb3V0WzNdID0gYTA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsyXSAqIGFbMV07XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDInc1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcbiAgb3V0WzFdID0gYTEgKiBiMCArIGEzICogYjE7XG4gIG91dFsyXSA9IGEwICogYjIgKyBhMiAqIGIzO1xuICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdDIgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGEwICogYyArIGEyICogcztcbiAgb3V0WzFdID0gYTEgKiBjICsgYTMgKiBzO1xuICBvdXRbMl0gPSBhMCAqIC1zICsgYTIgKiBjO1xuICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDIgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgdjAgPSB2WzBdLFxuICAgICAgdjEgPSB2WzFdO1xuICBvdXRbMF0gPSBhMCAqIHYwO1xuICBvdXRbMV0gPSBhMSAqIHYwO1xuICBvdXRbMl0gPSBhMiAqIHYxO1xuICBvdXRbM10gPSBhMyAqIHYxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDIuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0Mi5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCBtYXQyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDIuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0Mi5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IG1hdDIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSB2WzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcIm1hdDIoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdKTtcbn1cbi8qKlxuICogUmV0dXJucyBMLCBEIGFuZCBVIG1hdHJpY2VzIChMb3dlciB0cmlhbmd1bGFyLCBEaWFnb25hbCBhbmQgVXBwZXIgdHJpYW5ndWxhcikgYnkgZmFjdG9yaXppbmcgdGhlIGlucHV0IG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IEwgdGhlIGxvd2VyIHRyaWFuZ3VsYXIgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gRCB0aGUgZGlhZ29uYWwgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gVSB0aGUgdXBwZXIgdHJpYW5ndWxhciBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBpbnB1dCBtYXRyaXggdG8gZmFjdG9yaXplXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIExEVShMLCBELCBVLCBhKSB7XG4gIExbMl0gPSBhWzJdIC8gYVswXTtcbiAgVVswXSA9IGFbMF07XG4gIFVbMV0gPSBhWzFdO1xuICBVWzNdID0gYVszXSAtIExbMl0gKiBVWzFdO1xuICByZXR1cm4gW0wsIEQsIFVdO1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQyJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKTtcbn1cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQyJ3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDIuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsXSwibmFtZXMiOlsiZXhwb3J0cyIsImlzU3VwcG9ydGVkIiwib3B0aW9ucyIsIndpbmRvdyIsImRvY3VtZW50IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJldmVyeSIsImZpbHRlciIsImZvckVhY2giLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJtYXAiLCJzb21lIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJpc0FycmF5IiwiRnVuY3Rpb24iLCJiaW5kIiwiT2JqZWN0Iiwia2V5cyIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImlzU2VhbGVkIiwiaXNGcm96ZW4iLCJpc0V4dGVuc2libGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImRlZmluZVByb3BlcnRpZXMiLCJzZWFsIiwiZnJlZXplIiwicHJldmVudEV4dGVuc2lvbnMiLCJKU09OIiwic3VwcG9ydGVkIiwid29ya2VyIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwid29ya2VyVVJMIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiV29ya2VyIiwiZSIsInRlcm1pbmF0ZSIsInJldm9rZU9iamVjdFVSTCIsImlzV29ya2VyU3VwcG9ydGVkIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImlzQ2FudmFzR2V0SW1hZ2VEYXRhU3VwcG9ydGVkIiwidW5kZWZpbmVkIiwiaXNXZWJHTFN1cHBvcnRlZENhY2hlIiwiZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsInNoYWRlciIsImdsIiwiYXR0cmlidXRlcyIsIndlYkdMQ29udGV4dEF0dHJpYnV0ZXMiLCJnZXRXZWJHTENvbnRleHQiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiaXNDb250ZXh0TG9zdCIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImlzV2ViR0xTdXBwb3J0ZWQiLCJkb2N1bWVudE1vZGUiLCJub3RTdXBwb3J0ZWRSZWFzb24iLCJkZWVwRXF1YWwiLCJhIiwiYiIsImxlbmd0aCIsImkiLCJrZXkiLCJhbnRpYWxpYXMiLCJhbHBoYSIsInN0ZW5jaWwiLCJkZXB0aCIsIkRPTSIsInN0YXRpYyIsInByb3BzIiwiZG9jU3R5bGUiLCJ0YWdOYW1lIiwiY2xhc3NOYW1lIiwiY29udGFpbmVyIiwiZWwiLCJhcHBlbmRDaGlsZCIsIm5hbWVzcGFjZVVSSSIsImNyZWF0ZUVsZW1lbnROUyIsInNlbGVjdFByb3AiLCJ1c2VyU2VsZWN0IiwidmFsdWUiLCJzdHlsZSIsInRyYW5zZm9ybVByb3AiLCJ0YXJnZXQiLCJjYWxsYmFjayIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3VwcHJlc3NDbGlja0ludGVybmFsIiwic2V0VGltZW91dCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJQb2ludCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50TGVmdCIsImNsaWVudFkiLCJ0b3AiLCJjbGllbnRUb3AiLCJ0b3VjaGVzIiwicG9pbnRzIiwicHVzaCIsImJ1dHRvbiIsIm5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudEVsZW1lbnQiLCJ0ZXN0UHJvcCIsIlJlcXVlc3RNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJ0cmFuc2Zvcm1SZXF1ZXN0Rm4iLCJ0aGlzIiwiX3RyYW5zZm9ybVJlcXVlc3RGbiIsInRyYW5zZm9ybVJlcXVlc3QiLCJ1cmwiLCJub3JtYWxpemVTcHJpdGVVUkwiLCJmb3JtYXQiLCJleHRlbnNpb24iLCJ1cmxPYmplY3QiLCJwYXJ0cyIsIm1hdGNoIiwidXJsUmUiLCJFcnJvciIsInByb3RvY29sIiwiYXV0aG9yaXR5IiwicGF0aCIsInBhcmFtcyIsInNwbGl0IiwicGFyc2VVcmwiLCJvYmoiLCJqb2luIiwiZm9ybWF0VXJsIiwic2V0VHJhbnNmb3JtUmVxdWVzdCIsIm1vZHVsZSIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwicmVXaGl0ZXNwYWNlIiwicmVUcmltU3RhcnQiLCJTeW1ib2wiLCJvYmplY3RQcm90byIsImhhc093blByb3BlcnR5IiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJpc09iamVjdCIsInJlcXVpcmUiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50Iiwibm93IiwiRGF0ZSIsInRvTnVtYmVyIiwiaXNPYmplY3RMaWtlIiwiaXNPd24iLCJjYWxsIiwidGFnIiwidW5tYXNrZWQiLCJyZXN1bHQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHZXRUYWciLCJpc1N5bWJvbCIsIm90aGVyIiwidmFsdWVPZiIsInN0cmluZyIsInNsaWNlIiwiaW5kZXgiLCJ0ZXN0IiwiY2hhckF0IiwidHJpbW1lZEVuZEluZGV4IiwicmVwbGFjZSIsImlzQmluYXJ5IiwibmF0aXZlTWF4IiwiTWF0aCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsImNsb25lIiwib3V0IiwiZ2xNYXRyaXgiLCJzdWIiLCJGbG9hdDMyQXJyYXkiLCJzcXJMZW4iLCJ4IiwieSIsIlRleHR1cmUiLCJpbWFnZSIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwidXBkYXRlIiwicG9zaXRpb24iLCJyZXNpemUiLCJzaXplIiwidXNlTWlwbWFwIiwiQm9vbGVhbiIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInBpeGVsU3RvcmVVbnBhY2tGbGlwWSIsInNldCIsInBpeGVsU3RvcmVVbnBhY2siLCJwaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSIsIlJHQkEiLCJwcmVtdWx0aXBseSIsIkhUTUxJbWFnZUVsZW1lbnQiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkhUTUxWaWRlb0VsZW1lbnQiLCJJbWFnZURhdGEiLCJpc0ltYWdlQml0bWFwIiwidGV4SW1hZ2UyRCIsIlVOU0lHTkVEX0JZVEUiLCJkYXRhIiwidGV4U3ViSW1hZ2UyRCIsImlzU2l6ZVBvd2VyT2ZUd28iLCJnZW5lcmF0ZU1pcG1hcCIsIndyYXAiLCJtaW5GaWx0ZXIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJMSU5FQVIiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsImxvZyIsIkxOMiIsImRlc3Ryb3kiLCJkZWxldGVUZXh0dXJlIiwicmVuZGVyU3R5bGVJbWFnZSIsInVzZXJJbWFnZSIsInJlbmRlciIsIlVpbnQ4QXJyYXkiLCJidWZmZXIiLCJJbWFnZU1hbmFnZXIiLCJFdmVudGVkIiwic3VwZXIiLCJpbWFnZXMiLCJ1cGRhdGVkSW1hZ2VzIiwiY2FsbGJhY2tEaXNwYXRjaGVkVGhpc0ZyYW1lIiwibG9hZGVkIiwicmVxdWVzdG9ycyIsInBhdHRlcm5zIiwiYXRsYXNJbWFnZSIsIlJHQkFJbWFnZSIsImRpcnR5IiwiaXNMb2FkZWQiLCJzZXRMb2FkZWQiLCJpZHMiLCJfbm90aWZ5IiwiZ2V0SW1hZ2UiLCJpZCIsImFkZEltYWdlIiwiX3ZhbGlkYXRlIiwidmFsaWQiLCJfdmFsaWRhdGVTdHJldGNoIiwic3RyZXRjaFgiLCJmaXJlIiwiRXJyb3JFdmVudCIsInN0cmV0Y2hZIiwiX3ZhbGlkYXRlQ29udGVudCIsImNvbnRlbnQiLCJzdHJldGNoIiwibGFzdCIsInBhcnQiLCJ1cGRhdGVJbWFnZSIsInZlcnNpb24iLCJyZW1vdmVJbWFnZSIsIm9uUmVtb3ZlIiwibGlzdEltYWdlcyIsImdldEltYWdlcyIsImhhc0FsbERlcGVuZGVuY2llcyIsInJlc3BvbnNlIiwiRXZlbnQiLCJwaXhlbFJhdGlvIiwic2RmIiwiaGFzUmVuZGVyQ2FsbGJhY2siLCJ3YXJuT25jZSIsImdldFBpeGVsU2l6ZSIsImdldFBhdHRlcm4iLCJwYXR0ZXJuIiwiYmluIiwidyIsInBhZGRpbmciLCJoIiwiSW1hZ2VQb3NpdGlvbiIsIl91cGRhdGVQYXR0ZXJuQXRsYXMiLCJhdGxhc1RleHR1cmUiLCJDTEFNUF9UT19FREdFIiwiYmlucyIsInBvdHBhY2siLCJkc3QiLCJzcmMiLCJjb3B5IiwiYmVnaW5GcmFtZSIsImRpc3BhdGNoUmVuZGVyQ2FsbGJhY2tzIiwiSU5GIiwiZWR0IiwieDAiLCJ5MCIsImdyaWRTaXplIiwiZiIsInYiLCJ6IiwiZWR0MWQiLCJncmlkIiwib2Zmc2V0Iiwic3RyaWRlIiwicSIsImsiLCJzIiwicTIiLCJyIiwicXIiLCJHbHlwaE1hbmFnZXIiLCJyZXF1ZXN0TWFuYWdlciIsImxvY2FsSWRlb2dyYXBoRm9udEZhbWlseSIsImVudHJpZXMiLCJzZXRVUkwiLCJnZXRHbHlwaHMiLCJnbHlwaHMiLCJhbGwiLCJzdGFjayIsImFzeW5jQWxsIiwiZW50cnkiLCJyZXF1ZXN0cyIsInJhbmdlcyIsImdseXBoIiwiX3RpbnlTREYiLCJyYW5nZSIsImZsb29yIiwibG9hZEdseXBoUmFuZ2UiLCJlcnIiLCJfZG9lc0NoYXJTdXBwb3J0TG9jYWxHbHlwaCIsImNiIiwiYml0bWFwIiwibWV0cmljcyIsImlzQ2hhciIsImZvbnRGYW1pbHkiLCJ0aW55U0RGIiwiZm9udFdlaWdodCIsIlRpbnlTREYiLCJmb250U2l6ZSIsInJhZGl1cyIsImN1dG9mZiIsImNoYXIiLCJkcmF3IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiQWxwaGFJbWFnZSIsImdseXBoV2lkdGgiLCJnbHlwaEhlaWdodCIsImdseXBoTGVmdCIsImdseXBoVG9wIiwiYWR2YW5jZSIsImdseXBoQWR2YW5jZSIsImZvbnRzdGFjayIsInVybFRlbXBsYXRlIiwiYmVnaW4iLCJlbmQiLCJyZXF1ZXN0IiwiUmVzb3VyY2VUeXBlIiwiR2x5cGhzIiwiZ2V0QXJyYXlCdWZmZXIiLCJwYXJzZUdseXBoUEJGIiwiZm9udFN0eWxlIiwiX2NyZWF0ZUNhbnZhcyIsImN0eCIsIndpbGxSZWFkRnJlcXVlbnRseSIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJ0ZXh0QWxpZ24iLCJmaWxsU3R5bGUiLCJncmlkT3V0ZXIiLCJGbG9hdDY0QXJyYXkiLCJncmlkSW5uZXIiLCJVaW50MTZBcnJheSIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hMZWZ0IiwiYWN0dWFsQm91bmRpbmdCb3hSaWdodCIsIm1lYXN1cmVUZXh0IiwiY2VpbCIsImxlbiIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiY2xlYXJSZWN0IiwiZmlsbFRleHQiLCJpbWdEYXRhIiwiZmlsbCIsImoiLCJkIiwic3FydCIsInJvdW5kIiwicHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJhbmNob3IiLCJEYXRhQ29uc3RhbnRQcm9wZXJ0eSIsInN0eWxlU3BlYyIsImxpZ2h0Iiwic3BlY2lmaWNhdGlvbiIsInBvc3NpYmx5RXZhbHVhdGUiLCJwYXJhbWV0ZXJzIiwic3BoZXJpY2FsVG9DYXJ0ZXNpYW4iLCJleHByZXNzaW9uIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsInQiLCJjb2xvciIsImludGVuc2l0eSIsIlRSQU5TSVRJT05fU1VGRklYIiwiTGlnaHQiLCJsaWdodE9wdGlvbnMiLCJfdHJhbnNpdGlvbmFibGUiLCJUcmFuc2l0aW9uYWJsZSIsInNldExpZ2h0IiwiX3RyYW5zaXRpb25pbmciLCJ1bnRyYW5zaXRpb25lZCIsImdldExpZ2h0Iiwic2VyaWFsaXplIiwidmFsaWRhdGVMaWdodCIsIm5hbWUiLCJlbmRzV2l0aCIsInNldFRyYW5zaXRpb24iLCJzZXRWYWx1ZSIsInVwZGF0ZVRyYW5zaXRpb25zIiwidHJhbnNpdGlvbmVkIiwiaGFzVHJhbnNpdGlvbiIsInJlY2FsY3VsYXRlIiwidmFsaWRhdGUiLCJlbWl0VmFsaWRhdGlvbkVycm9ycyIsInZhbGlkYXRlU3R5bGUiLCJleHRlbmQiLCJzcHJpdGUiLCJMaW5lQXRsYXMiLCJuZXh0Um93IiwiZGFzaEVudHJ5IiwiZ2V0RGFzaCIsImRhc2hhcnJheSIsImFkZERhc2giLCJnZXREYXNoUmFuZ2VzIiwibGluZUF0bGFzV2lkdGgiLCJyaWdodCIsImlzRGFzaCIsInplcm9MZW5ndGgiLCJjdXJyZW50RGFzaExlbmd0aCIsImRhc2hMZW5ndGgiLCJhZGRSb3VuZERhc2giLCJuIiwiaGFsZlN0cmV0Y2giLCJjdXJySW5kZXgiLCJkaXN0TGVmdCIsImFicyIsImRpc3RSaWdodCIsIm1pbkRpc3QiLCJzaWduZWREaXN0YW5jZSIsImRpc3RNaWRkbGUiLCJkaXN0RWRnZSIsImFkZFJlZ3VsYXJEYXNoIiwibmV4dCIsInNwbGljZSIsImZpcnN0IiwiQUxQSEEiLCJSRVBFQVQiLCJEaXNwYXRjaGVyIiwid29ya2VyUG9vbCIsInBhcmVudCIsImFjdG9ycyIsImN1cnJlbnRBY3RvciIsInVuaXF1ZUlkIiwid29ya2VycyIsImFjcXVpcmUiLCJhY3RvciIsIkFjdG9yIiwiYnJvYWRjYXN0IiwiZG9uZSIsInNlbmQiLCJnZXRBY3RvciIsInJlbW92ZSIsInJlbGVhc2UiLCJsb2FkVGlsZUpzb24iLCJ0aWxlSlNPTiIsInBpY2siLCJ2ZWN0b3JfbGF5ZXJzIiwidmVjdG9yTGF5ZXJzIiwidmVjdG9yTGF5ZXJJZHMiLCJsYXllciIsImdldEpTT04iLCJTb3VyY2UiLCJicm93c2VyIiwiZnJhbWUiLCJUaWxlQm91bmRzIiwiYm91bmRzIiwibWluem9vbSIsIm1heHpvb20iLCJMbmdMYXRCb3VuZHMiLCJjb252ZXJ0IiwidmFsaWRhdGVCb3VuZHMiLCJjb250YWlucyIsInRpbGVJRCIsIndvcmxkU2l6ZSIsInBvdyIsImxldmVsIiwibWVyY2F0b3JYZnJvbUxuZyIsImdldFdlc3QiLCJtZXJjYXRvcllmcm9tTGF0IiwiZ2V0Tm9ydGgiLCJnZXRFYXN0IiwiZ2V0U291dGgiLCJWZWN0b3JUaWxlU291cmNlIiwiZGlzcGF0Y2hlciIsImV2ZW50ZWRQYXJlbnQiLCJzY2hlbWUiLCJ0aWxlU2l6ZSIsInJlcGFyc2VPdmVyc2NhbGVkIiwiaXNUaWxlQ2xpcHBlZCIsIl9sb2FkZWQiLCJfb3B0aW9ucyIsIl9jb2xsZWN0UmVzb3VyY2VUaW1pbmciLCJjb2xsZWN0UmVzb3VyY2VUaW1pbmciLCJzZXRFdmVudGVkUGFyZW50IiwibG9hZCIsImRhdGFUeXBlIiwiX3RpbGVKU09OUmVxdWVzdCIsImxvYWRUaWxlSlNPTiIsIl9yZXF1ZXN0TWFuYWdlciIsInNvdXJjZUNhY2hlcyIsImNsZWFyVGlsZXMiLCJ0aWxlQm91bmRzIiwic291cmNlRGF0YVR5cGUiLCJoYXNUaWxlIiwiY2Fub25pY2FsIiwib25BZGQiLCJzZXRTb3VyY2VQcm9wZXJ0eSIsImNhbmNlbCIsInNldFRpbGVzIiwidGlsZXMiLCJzZXRVcmwiLCJsb2FkVGlsZSIsInRpbGUiLCJnZXRQaXhlbFJhdGlvIiwiVGlsZSIsInVpZCIsInpvb20iLCJvdmVyc2NhbGVkWiIsIm92ZXJzY2FsZUZhY3RvciIsInNvdXJjZSIsInNob3dDb2xsaXNpb25Cb3hlcyIsInByb21vdGVJZCIsImFib3J0ZWQiLCJzdGF0dXMiLCJyZXNvdXJjZVRpbWluZyIsIl9yZWZyZXNoRXhwaXJlZFRpbGVzIiwic2V0RXhwaXJ5RGF0YSIsImxvYWRWZWN0b3JEYXRhIiwicGFpbnRlciIsImNhY2hlRW50cnlQb3NzaWJseUFkZGVkIiwicmVsb2FkQ2FsbGJhY2siLCJzdGF0ZSIsImFib3J0VGlsZSIsInVubG9hZFRpbGUiLCJ1bmxvYWRWZWN0b3JEYXRhIiwiUmFzdGVyVGlsZVNvdXJjZSIsInJvdW5kWm9vbSIsImltZyIsImV4cGlyeSIsImdldFRpbGVUZXh0dXJlIiwiZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljIiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljTWF4Iiwic2F2ZVRpbGVUZXh0dXJlIiwic3VwcG9ydHNPZmZzY3JlZW5DYW52YXMiLCJSYXN0ZXJERU1UaWxlU291cmNlIiwiZW5jb2RpbmciLCJkZW0iLCJuZWVkc0hpbGxzaGFkZVByZXBhcmUiLCJuZWVkc1RlcnJhaW5QcmVwYXJlIiwiY2FjaGVDb250cm9sIiwiZXhwaXJlcyIsInJhd0ltYWdlRGF0YSIsIk9mZnNjcmVlbkNhbnZhcyIsImNyZWF0ZUltYWdlQml0bWFwIiwiY29vcmQiLCJuZWlnaGJvcmluZ1RpbGVzIiwiX2dldE5laWdoYm9yaW5nVGlsZXMiLCJkaW0iLCJweCIsInB4dyIsIm54Iiwibnh3IiwiT3ZlcnNjYWxlZFRpbGVJRCIsImJhY2tmaWxsZWQiLCJkZW1UZXh0dXJlIiwiZmJvIiwiR2VvSlNPTlNvdXJjZSIsIl9yZW1vdmVkIiwiX3BlbmRpbmdMb2FkcyIsIl9kYXRhIiwiYXR0cmlidXRpb24iLCJzY2FsZSIsIkVYVEVOVCIsIndvcmtlck9wdGlvbnMiLCJjbHVzdGVyIiwiZ2VvanNvblZ0T3B0aW9ucyIsInRvbGVyYW5jZSIsImV4dGVudCIsIm1heFpvb20iLCJsaW5lTWV0cmljcyIsImdlbmVyYXRlSWQiLCJzdXBlcmNsdXN0ZXJPcHRpb25zIiwiY2x1c3Rlck1heFpvb20iLCJtaW5Qb2ludHMiLCJjbHVzdGVyTWluUG9pbnRzIiwiY2x1c3RlclJhZGl1cyIsImNsdXN0ZXJQcm9wZXJ0aWVzIiwiX3VwZGF0ZVdvcmtlckRhdGEiLCJzZXREYXRhIiwiZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20iLCJjbHVzdGVySWQiLCJnZXRDbHVzdGVyQ2hpbGRyZW4iLCJnZXRDbHVzdGVyTGVhdmVzIiwibGltaXQiLCJyZXNvbHZlVVJMIiwic3RyaW5naWZ5IiwiYWJhbmRvbmVkIiwibWVzc2FnZSIsIkltYWdlU291cmNlIiwiY29vcmRpbmF0ZXMiLCJuZXdDb29yZGluYXRlcyIsInN1Y2Nlc3NDYWxsYmFjayIsIkltYWdlIiwiX2ZpbmlzaExvYWRpbmciLCJzZXRDb29yZGluYXRlcyIsImNvcm5lckNvb3JkcyIsIk1lcmNhdG9yQ29vcmRpbmF0ZSIsImZyb21MbmdMYXQiLCJjb29yZHMiLCJtaW5YIiwiSW5maW5pdHkiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJkTWF4IiwidGlsZXNBdFpvb20iLCJDYW5vbmljYWxUaWxlSUQiLCJnZXRDb29yZGluYXRlc0NlbnRlclRpbGVJRCIsInRpbGVDb29yZHMiLCJnZXRUaWxlUG9pbnQiLCJfcm91bmQiLCJfYm91bmRzQXJyYXkiLCJSYXN0ZXJCb3VuZHNBcnJheSIsImVtcGxhY2VCYWNrIiwiYm91bmRzQnVmZmVyIiwicHJlcGFyZSIsImNyZWF0ZVZlcnRleEJ1ZmZlciIsInJhc3RlckJvdW5kc0F0dHJpYnV0ZXMiLCJtZW1iZXJzIiwiYm91bmRzU2VnbWVudHMiLCJTZWdtZW50VmVjdG9yIiwic2ltcGxlU2VnbWVudCIsImVxdWFscyIsImJ1Y2tldHMiLCJWaWRlb1NvdXJjZSIsInVybHMiLCJnZXRWaWRlbyIsInZpZGVvIiwibG9vcCIsInRyaWdnZXJSZXBhaW50IiwicGxheSIsInBhdXNlIiwic2VlayIsInNlY29uZHMiLCJzZWVrYWJsZVJhbmdlIiwic2Vla2FibGUiLCJzdGFydCIsIlZhbGlkYXRpb25FcnJvciIsImN1cnJlbnRUaW1lIiwicmVhZHlTdGF0ZSIsInBhdXNlZCIsIkNhbnZhc1NvdXJjZSIsImMiLCJsIiwiYW5pbWF0ZSIsImdldEVsZW1lbnRCeUlkIiwiX2hhc0ludmFsaWREaW1lbnNpb25zIiwiX3BsYXlpbmciLCJnZXRDYW52YXMiLCJpc05hTiIsInNvdXJjZVR5cGVzIiwidmVjdG9yIiwicmFzdGVyIiwicmFzdGVyRGVtIiwiZ2VvanNvbiIsImdldFBpeGVsUG9zTWF0cml4IiwidHJhbnNmb3JtIiwibWF0NCIsImNhbGN1bGF0ZVBvc01hdHJpeCIsInRvVW53cmFwcGVkIiwicXVlcnlSZW5kZXJlZEZlYXR1cmVzIiwic291cmNlQ2FjaGUiLCJzdHlsZUxheWVycyIsInNlcmlhbGl6ZWRMYXllcnMiLCJxdWVyeUdlb21ldHJ5IiwiaGFzM0RMYXllciIsImxheWVycyIsInNvdXJjZUlEIiwibGF5ZXJJRCIsInF1ZXJ5SW5jbHVkZXMzRExheWVyIiwibWF4UGl0Y2hTY2FsZUZhY3RvciIsInRpbGVzSW4iLCJzb3J0Iiwic29ydFRpbGVzSW4iLCJyZW5kZXJlZEZlYXR1cmVMYXllcnMiLCJ0aWxlSW4iLCJ3cmFwcGVkVGlsZUlEIiwid3JhcHBlZCIsInF1ZXJ5UmVzdWx0cyIsIl9zdGF0ZSIsImNhbWVyYVF1ZXJ5R2VvbWV0cnkiLCJ3cmFwcGVkSURMYXllck1hcCIsIndyYXBwZWRJRCIsIndyYXBwZWRJRExheWVycyIsInRpbGVGZWF0dXJlcyIsIndyYXBwZWRJREZlYXR1cmVzIiwicmVzdWx0RmVhdHVyZXMiLCJ0aWxlRmVhdHVyZSIsImZlYXR1cmVJbmRleCIsIm1lcmdlUmVuZGVyZWRGZWF0dXJlTGF5ZXJzIiwiZmVhdHVyZVdyYXBwZXIiLCJmZWF0dXJlIiwiZ2V0RmVhdHVyZVN0YXRlIiwic291cmNlTGF5ZXIiLCJpZEEiLCJpZEIiLCJ1c2VzIiwiZXhwaXJhdGlvblRpbWUiLCJxdWVyeVBhZGRpbmciLCJoYXNTeW1ib2xCdWNrZXRzIiwiaGFzUlRMVGV4dCIsImRlcGVuZGVuY2llcyIsInRleHR1cmVzIiwidGV4dHVyZUNvb3JkcyIsImV4cGlyZWRSZXF1ZXN0Q291bnQiLCJyZWdpc3RlckZhZGVEdXJhdGlvbiIsImR1cmF0aW9uIiwiZmFkZUVuZFRpbWUiLCJ0aW1lQWRkZWQiLCJ3YXNSZXF1ZXN0ZWQiLCJjbGVhclRleHR1cmVzIiwianVzdFJlbG9hZGVkIiwiaGFzRGF0YSIsImxhdGVzdEZlYXR1cmVJbmRleCIsInJhd1RpbGVEYXRhIiwibGF0ZXN0UmF3VGlsZURhdGEiLCJjb2xsaXNpb25Cb3hBcnJheSIsImlucHV0Iiwib3V0cHV0IiwiYnVja2V0IiwibGF5ZXJJZHMiLCJnZXRMYXllciIsInN0YXRlRGVwZW5kZW50TGF5ZXJJZHMiLCJzdGF0ZURlcGVuZGVudExheWVycyIsImxJZCIsImRlc2VyaWFsaXplQnVja2V0IiwiU3ltYm9sQnVja2V0IiwibGF6eUxvYWRSVExUZXh0UGx1Z2luIiwicXVlcnlSYWRpdXMiLCJpbWFnZUF0bGFzIiwiZ2x5cGhBdGxhc0ltYWdlIiwiQ29sbGlzaW9uQm94QXJyYXkiLCJpbWFnZUF0bGFzVGV4dHVyZSIsImdseXBoQXRsYXNUZXh0dXJlIiwiZ2V0QnVja2V0IiwidXBsb2FkIiwidXBsb2FkUGVuZGluZyIsInVwbG9hZGVkIiwiaW1hZ2VNYW5hZ2VyIiwicGF0Y2hVcGRhdGVkSW1hZ2VzIiwic291cmNlRmVhdHVyZVN0YXRlIiwicGl4ZWxQb3NNYXRyaXgiLCJxdWVyeSIsInF1ZXJ5U291cmNlRmVhdHVyZXMiLCJ2dExheWVycyIsImxvYWRWVExheWVycyIsIl9nZW9qc29uVGlsZUxheWVyIiwiZmVhdHVyZUZpbHRlciIsIm5lZWRHZW9tZXRyeSIsImV2YWx1YXRpb25GZWF0dXJlIiwidG9FdmFsdWF0aW9uRmVhdHVyZSIsIkV2YWx1YXRpb25QYXJhbWV0ZXJzIiwiZ2V0SWQiLCJnZW9qc29uRmVhdHVyZSIsIkdlb0pTT05GZWF0dXJlIiwicGF0dGVybnNMb2FkZWQiLCJwYXR0ZXJuUG9zaXRpb25zIiwicHJpb3IiLCJwYXJzZWRDQyIsInBhcnNlQ2FjaGVDb250cm9sIiwiZ2V0VGltZSIsImlzRXhwaXJlZCIsImRlbHRhIiwiZ2V0RXhwaXJ5VGltZW91dCIsInNldEZlYXR1cmVTdGF0ZSIsInN0YXRlcyIsImhhc0xheWVyIiwic291cmNlTGF5ZXJJZCIsInNvdXJjZUxheWVyU3RhdGVzIiwiaG9sZGluZ0ZvckZhZGUiLCJzeW1ib2xGYWRlSG9sZFVudGlsIiwic3ltYm9sRmFkZUZpbmlzaGVkIiwiY2xlYXJGYWRlSG9sZCIsInNldEhvbGREdXJhdGlvbiIsInNldERlcGVuZGVuY2llcyIsIm5hbWVzcGFjZSIsImRlcCIsImhhc0RlcGVuZGVuY3kiLCJuYW1lc3BhY2VzIiwiVGlsZUNhY2hlIiwicmVzZXQiLCJyZW1vdmVkRGF0YSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJvcmRlciIsImFkZCIsImV4cGlyeVRpbWVvdXQiLCJkYXRhV3JhcHBlciIsIl9nZXRBbmRSZW1vdmVCeUtleSIsImhhcyIsImdldEFuZFJlbW92ZSIsInNoaWZ0IiwiZ2V0QnlLZXkiLCJnZXQiLCJkYXRhSW5kZXgiLCJzZXRNYXhTaXplIiwiZmlsdGVyRm4iLCJyZW1vdmVkIiwiU291cmNlRmVhdHVyZVN0YXRlIiwic3RhdGVDaGFuZ2VzIiwiZGVsZXRlZFN0YXRlcyIsInVwZGF0ZVN0YXRlIiwiZmVhdHVyZUlkIiwibmV3U3RhdGUiLCJmdCIsInByb3AiLCJyZW1vdmVGZWF0dXJlU3RhdGUiLCJnZXRTdGF0ZSIsInJlY29uY2lsZWRTdGF0ZSIsImZlYXR1cmVEZWxldGlvbnMiLCJpbml0aWFsaXplVGlsZVN0YXRlIiwiY29hbGVzY2VDaGFuZ2VzIiwiZmVhdHVyZXNDaGFuZ2VkIiwibGF5ZXJTdGF0ZXMiLCJTb3VyY2VDYWNoZSIsIm9uIiwiX3NvdXJjZUxvYWRlZCIsIl9wYXVzZWQiLCJyZWxvYWQiLCJ0ZXJyYWluIiwiX3NvdXJjZUVycm9yZWQiLCJfc291cmNlIiwiYmluZEFsbCIsImNyZWF0ZVNvdXJjZSIsIl91cGRhdGVEZWJvdW5jZSIsInVwZGF0ZURlYm91bmNlIiwiX3RpbGVzIiwiX2NhY2hlIiwiX3VubG9hZFRpbGUiLCJfdGltZXJzIiwiX2NhY2hlVGltZXJzIiwiX21heFRpbGVDYWNoZVNpemUiLCJfbG9hZGVkUGFyZW50VGlsZXMiLCJfY292ZXJlZFRpbGVzIiwiZ2V0U291cmNlIiwicmVzdW1lIiwic2hvdWxkUmVsb2FkIiwiX3Nob3VsZFJlbG9hZE9uUmVzdW1lIiwiX2xvYWRUaWxlIiwiX2Fib3J0VGlsZSIsInNvdXJjZUlkIiwiZ2V0SWRzIiwidmFsdWVzIiwiY29tcGFyZVRpbGVJZCIsImdldFJlbmRlcmFibGVJZHMiLCJzeW1ib2xMYXllciIsInJlbmRlcmFibGVzIiwiX2lzSWRSZW5kZXJhYmxlIiwiYV8iLCJiXyIsInJvdGF0ZWRBIiwiX3JvdGF0ZSIsImFuZ2xlIiwicm90YXRlZEIiLCJoYXNSZW5kZXJhYmxlUGFyZW50IiwicGFyZW50VGlsZSIsImZpbmRMb2FkZWRQYXJlbnQiLCJfcmVsb2FkVGlsZSIsIl90aWxlTG9hZGVkIiwicHJldmlvdXNTdGF0ZSIsImVycm9yIiwicmVmcmVzaGVkVXBvbkV4cGlyYXRpb24iLCJfc2V0VGlsZVJlbG9hZFRpbWVyIiwiX2JhY2tmaWxsREVNIiwiYm9yZGVySWQiLCJib3JkZXJUaWxlIiwiZ2V0VGlsZUJ5SUQiLCJmaWxsQm9yZGVyIiwiZHgiLCJkeSIsImJhY2tmaWxsQm9yZGVyIiwiZ2V0VGlsZSIsIl9yZXRhaW5Mb2FkZWRDaGlsZHJlbiIsImlkZWFsVGlsZXMiLCJtYXhDb3ZlcmluZ1pvb20iLCJyZXRhaW4iLCJ0b3Btb3N0TG9hZGVkSUQiLCJwYXJlbnRJRCIsInNjYWxlZFRvIiwibWluQ292ZXJpbmdab29tIiwicGFyZW50VGlsZUlEIiwiX2dldExvYWRlZFRpbGUiLCJ1cGRhdGVDYWNoZVNpemUiLCJ3aWR0aEluVGlsZXMiLCJoZWlnaHRJblRpbGVzIiwidmlld0RlcGVuZGVudE1heFNpemUiLCJtYXhTaXplIiwiaGFuZGxlV3JhcEp1bXAiLCJsbmciLCJ3cmFwRGVsdGEiLCJfcHJldkxuZyIsInVud3JhcFRvIiwiaWRlYWxUaWxlSURzIiwiY2VudGVyIiwidXNlZCIsInVzZWRGb3JUZXJyYWluIiwiZ2V0VmlzaWJsZVVud3JhcHBlZENvb3JkaW5hdGVzIiwidW53cmFwcGVkIiwiY292ZXJpbmdUaWxlcyIsImNvdmVyaW5nWm9vbUxldmVsIiwibWF4T3Zlcnpvb21pbmciLCJtYXhVbmRlcnpvb21pbmciLCJwYXJlbnRzIiwicGFyZW50MiIsImNvbmNhdCIsIl91cGRhdGVSZXRhaW5lZFRpbGVzIiwiaXNSYXN0ZXJUeXBlIiwicGFyZW50c0ZvckZhZGluZyIsImZhZGluZ1RpbGVzIiwiX2FkZFRpbGUiLCJpZGVhbFJhc3RlclRpbGVJRHMiLCJtaXNzaW5nVGlsZUlEcyIsImNoaWxkcmVuIiwiaXNDaGlsZE9mIiwicmV0YWluZWRJZCIsImtleXNEaWZmZXJlbmNlIiwiX2ZhZGVEdXJhdGlvbiIsIl9yZW1vdmVUaWxlIiwiX3VwZGF0ZUxvYWRlZFBhcmVudFRpbGVDYWNoZSIsInJlbGVhc2VTeW1ib2xGYWRlVGlsZXMiLCJjaGVja2VkIiwibWlzc2luZ1RpbGVzIiwiY2hpbGRDb29yZCIsImNoaWxkVGlsZSIsInBhcmVudFdhc1JlcXVlc3RlZCIsInBhcmVudElkIiwidGlsZUtleSIsImN1cnJlbnRJZCIsImNhY2hlZCIsInBvaW50UXVlcnlHZW9tZXRyeSIsInRpbGVSZXN1bHRzIiwiY2FtZXJhUG9pbnRRdWVyeUdlb21ldHJ5IiwiZ2V0Q2FtZXJhUXVlcnlHZW9tZXRyeSIsInAiLCJwb2ludENvb3JkaW5hdGUiLCJ0aWxlU3BhY2VCb3VuZHMiLCJ0aWxlU3BhY2VRdWVyeUdlb21ldHJ5IiwidGlsZVNwYWNlQ2FtZXJhUXVlcnlHZW9tZXRyeSIsImdldFZpc2libGVDb29yZGluYXRlcyIsInBvc01hdHJpeCIsInJlbG9hZFRpbGVzRm9yRGVwZW5kZW5jaWVzIiwiYVdyYXAiLCJiV3JhcCIsIlBSRUxPQURfUE9PTF9JRCIsIldvcmtlclBvb2wiLCJhY3RpdmUiLCJtYXBJZCIsIndvcmtlckNvdW50IiwibWFwbGlicmVnbCIsIndvcmtlclVybCIsIm51bUFjdGl2ZSIsImlzUHJlbG9hZGVkIiwiYXZhaWxhYmxlTG9naWNhbFByb2Nlc3NvcnMiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiZ2xvYmFsV29ya2VyUG9vbCIsImdldEdsb2JhbFdvcmtlclBvb2wiLCJkZXJlZiIsInJlZlByb3BlcnRpZXMiLCJkZXJlZkxheWVycyIsInJlZiIsIm9wZXJhdGlvbnMiLCJzZXRTdHlsZSIsImFkZExheWVyIiwicmVtb3ZlTGF5ZXIiLCJzZXRQYWludFByb3BlcnR5Iiwic2V0TGF5b3V0UHJvcGVydHkiLCJzZXRGaWx0ZXIiLCJhZGRTb3VyY2UiLCJyZW1vdmVTb3VyY2UiLCJzZXRHZW9KU09OU291cmNlRGF0YSIsInNldExheWVyWm9vbVJhbmdlIiwic2V0TGF5ZXJQcm9wZXJ0eSIsInNldENlbnRlciIsInNldFpvb20iLCJzZXRCZWFyaW5nIiwic2V0UGl0Y2giLCJzZXRTcHJpdGUiLCJzZXRHbHlwaHMiLCJhZnRlciIsImNvbW1hbmRzIiwiY29tbWFuZCIsImFyZ3MiLCJzb3VyY2VzUmVtb3ZlZCIsInVwZGF0ZVNvdXJjZSIsImNhblVwZGF0ZUdlb0pTT04iLCJiZWZvcmUiLCJpc0VxdWFsIiwiZGlmZkxheWVyUHJvcGVydHlDaGFuZ2VzIiwibGF5ZXJJZCIsImtsYXNzIiwicGx1Y2tJZCIsImluZGV4QnlJZCIsImdyb3VwIiwiUGF0aEludGVycG9sYXRvciIsInBvaW50c18iLCJwYWRkaW5nXyIsIl9kaXN0YW5jZXMiLCJkaXN0IiwicGFkZGVkTGVuZ3RoIiwibGVycCIsImNsYW1wIiwiY3VycmVudEluZGV4IiwiZGlzdE9mQ3VycmVudElkeCIsImRpc3RUb1RhcmdldCIsImlkeE9mUHJldlBvaW50IiwiZGlzdE9mUHJldklkeCIsInNlZ21lbnRMZW5ndGgiLCJzZWdtZW50VCIsIm11bHQiLCJvdmVybGFwQWxsb3dlZCIsIm92ZXJsYXBBIiwib3ZlcmxhcEIiLCJhbGxvd2VkIiwiR3JpZEluZGV4IiwiY2VsbFNpemUiLCJib3hDZWxscyIsImNpcmNsZUNlbGxzIiwieENlbGxDb3VudCIsInlDZWxsQ291bnQiLCJjaXJjbGVLZXlzIiwiYm94S2V5cyIsImJib3hlcyIsImNpcmNsZXMiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJib3hVaWQiLCJjaXJjbGVVaWQiLCJrZXlzTGVuZ3RoIiwiaW5zZXJ0IiwieDEiLCJ5MSIsIngyIiwieTIiLCJfZm9yRWFjaENlbGwiLCJfaW5zZXJ0Qm94Q2VsbCIsImluc2VydENpcmNsZSIsIl9pbnNlcnRDaXJjbGVDZWxsIiwiY2VsbEluZGV4IiwiX3F1ZXJ5IiwiaGl0VGVzdCIsIm92ZXJsYXBNb2RlIiwicHJlZGljYXRlIiwiX3F1ZXJ5Q2VsbCIsInNlZW5VaWRzIiwiYm94IiwiY2lyY2xlIiwiaGl0VGVzdENpcmNsZSIsIl9xdWVyeUNlbGxDaXJjbGUiLCJxdWVyeUFyZ3MiLCJib3hDZWxsIiwiY2lyY2xlQ2VsbCIsIl9jaXJjbGVBbmRSZWN0Q29sbGlkZSIsIl9jaXJjbGVzQ29sbGlkZSIsImZuIiwiYXJnMSIsImFyZzIiLCJjeDEiLCJfY29udmVydFRvWENlbGxDb29yZCIsImN5MSIsIl9jb252ZXJ0VG9ZQ2VsbENvb3JkIiwiY3gyIiwiY3kyIiwicjEiLCJyMiIsImJvdGhSYWRpaSIsImNpcmNsZVgiLCJjaXJjbGVZIiwiaGFsZlJlY3RXaWR0aCIsImRpc3RYIiwiaGFsZlJlY3RIZWlnaHQiLCJkaXN0WSIsImdldExhYmVsUGxhbmVNYXRyaXgiLCJwaXRjaFdpdGhNYXAiLCJyb3RhdGVXaXRoTWFwIiwicGl4ZWxzVG9UaWxlVW5pdHMiLCJtIiwibGFiZWxQbGFuZU1hdHJpeCIsImdldEdsQ29vcmRNYXRyaXgiLCJnbENvb3JkTWF0cml4IiwicHJvamVjdCIsInBvaW50IiwibWF0cml4IiwiZ2V0RWxldmF0aW9uIiwicG9zIiwidmVjNCIsInh5VHJhbnNmb3JtTWF0NCIsInNpZ25lZERpc3RhbmNlRnJvbUNhbWVyYSIsImdldFBlcnNwZWN0aXZlUmF0aW8iLCJjYW1lcmFUb0NlbnRlckRpc3RhbmNlIiwiaXNWaXNpYmxlIiwiYW5jaG9yUG9zIiwiY2xpcHBpbmdCdWZmZXIiLCJ1cGRhdGVMaW5lTGFiZWxzIiwiaXNUZXh0Iiwia2VlcFVwcmlnaHQiLCJyb3RhdGVUb0xpbmUiLCJzaXplRGF0YSIsInRleHRTaXplRGF0YSIsImljb25TaXplRGF0YSIsInBhcnRpYWxseUV2YWx1YXRlZFNpemUiLCJzeW1ib2xTaXplIiwiZHluYW1pY0xheW91dFZlcnRleEFycmF5IiwidGV4dCIsImljb24iLCJjbGVhciIsImxpbmVWZXJ0ZXhBcnJheSIsInBsYWNlZFN5bWJvbHMiLCJwbGFjZWRTeW1ib2xBcnJheSIsImFzcGVjdFJhdGlvIiwidXNlVmVydGljYWwiLCJzeW1ib2wiLCJoaWRkZW4iLCJ3cml0aW5nTW9kZSIsIldyaXRpbmdNb2RlIiwidmVydGljYWwiLCJoaWRlR2x5cGhzIiwibnVtR2x5cGhzIiwiYW5jaG9yWCIsImFuY2hvclkiLCJwZXJzcGVjdGl2ZVJhdGlvIiwicGl0Y2hTY2FsZWRGb250U2l6ZSIsInRpbGVBbmNob3JQb2ludCIsImFuY2hvclBvaW50IiwicHJvamVjdGlvbkNhY2hlIiwicGxhY2VVbmZsaXBwZWQiLCJwbGFjZUdseXBoc0Fsb25nTGluZSIsImdseXBoT2Zmc2V0QXJyYXkiLCJub3RFbm91Z2hSb29tIiwibmVlZHNGbGlwcGluZyIsImR5bmFtaWNMYXlvdXRWZXJ0ZXhCdWZmZXIiLCJ1cGRhdGVEYXRhIiwicGxhY2VGaXJzdEFuZExhc3RHbHlwaCIsImZvbnRTY2FsZSIsImxpbmVPZmZzZXRYIiwibGluZU9mZnNldFkiLCJmbGlwIiwiZ2x5cGhFbmRJbmRleCIsImdseXBoU3RhcnRJbmRleCIsImxpbmVTdGFydEluZGV4IiwibGluZUVuZEluZGV4IiwibGluZUxlbmd0aCIsImZpcnN0R2x5cGhPZmZzZXQiLCJnZXRvZmZzZXRYIiwibGFzdEdseXBoT2Zmc2V0IiwiZmlyc3RQbGFjZWRHbHlwaCIsInBsYWNlR2x5cGhBbG9uZ0xpbmUiLCJzZWdtZW50IiwibGFzdFBsYWNlZEdseXBoIiwicmVxdWlyZXNPcmllbnRhdGlvbkNoYW5nZSIsImZpcnN0UG9pbnQiLCJsYXN0UG9pbnQiLCJob3Jpem9udGFsIiwicGxhY2VkR2x5cGhzIiwiZmlyc3RBbmRMYXN0R2x5cGgiLCJvcmllbnRhdGlvbkNoYW5nZSIsImdseXBoSW5kZXgiLCJ0aWxlVmVydGV4SW5kZXgiLCJ0aWxlU2VnbWVudEVuZCIsImdldHgiLCJnZXR5IiwicHJvamVjdGVkVmVydGV4IiwicHJvamVjdFRydW5jYXRlZExpbmVTZWdtZW50Iiwic2luZ2xlR2x5cGgiLCJhZGREeW5hbWljQXR0cmlidXRlcyIsInByZXZpb3VzVGlsZVBvaW50IiwiY3VycmVudFRpbGVQb2ludCIsInByZXZpb3VzUHJvamVjdGVkUG9pbnQiLCJtaW5pbXVtTGVuZ3RoIiwicHJvamVjdGlvbk1hdHJpeCIsInByb2plY3RlZFVuaXRWZXJ0ZXgiLCJfdW5pdCIsInByb2plY3RlZFVuaXRTZWdtZW50IiwiX211bHQiLCJtYWciLCJvZmZzZXRYIiwiYW5jaG9yU2VnbWVudCIsImNvbWJpbmVkT2Zmc2V0WCIsImRpciIsIlBJIiwiY3VycmVudCIsInByZXYiLCJkaXN0YW5jZVRvUHJldiIsImN1cnJlbnRTZWdtZW50RGlzdGFuY2UiLCJhYnNPZmZzZXRYIiwicGF0aFZlcnRpY2VzIiwiY3VycmVudFZlcnRleCIsInByb2plY3Rpb24iLCJwcmV2aW91c0xpbmVWZXJ0ZXhJbmRleCIsInNlZ21lbnRJbnRlcnBvbGF0aW9uVCIsInByZXZUb0N1cnJlbnQiLCJfYWRkIiwiX3BlcnAiLCJzZWdtZW50QW5nbGUiLCJhdGFuMiIsImhpZGRlbkdseXBoQXR0cmlidXRlcyIsIm51bSIsImZsb2F0MzIiLCJ2aWV3cG9ydFBhZGRpbmciLCJDb2xsaXNpb25JbmRleCIsImlnbm9yZWRHcmlkIiwicGl0Y2hmYWN0b3IiLCJjb3MiLCJfcGl0Y2giLCJzY3JlZW5SaWdodEJvdW5kYXJ5Iiwic2NyZWVuQm90dG9tQm91bmRhcnkiLCJncmlkUmlnaHRCb3VuZGFyeSIsImdyaWRCb3R0b21Cb3VuZGFyeSIsInBlcnNwZWN0aXZlUmF0aW9DdXRvZmYiLCJwbGFjZUNvbGxpc2lvbkJveCIsImNvbGxpc2lvbkJveCIsInRleHRQaXhlbFJhdGlvIiwiY29sbGlzaW9uR3JvdXBQcmVkaWNhdGUiLCJwcm9qZWN0ZWRQb2ludCIsInByb2plY3RBbmRHZXRQZXJzcGVjdGl2ZVJhdGlvIiwiYW5jaG9yUG9pbnRYIiwiYW5jaG9yUG9pbnRZIiwidGlsZVRvVmlld3BvcnQiLCJ0bFgiLCJ0bFkiLCJiclgiLCJiclkiLCJpc0luc2lkZUdyaWQiLCJvZmZzY3JlZW4iLCJpc09mZnNjcmVlbiIsInBsYWNlQ29sbGlzaW9uQ2lyY2xlcyIsImxhYmVsVG9TY3JlZW5NYXRyaXgiLCJzaG93Q29sbGlzaW9uQ2lyY2xlcyIsImNpcmNsZVBpeGVsRGlhbWV0ZXIiLCJ0ZXh0UGl4ZWxQYWRkaW5nIiwicGxhY2VkQ29sbGlzaW9uQ2lyY2xlcyIsInRpbGVVbml0QW5jaG9yUG9pbnQiLCJzY3JlZW5BbmNob3JQb2ludCIsImxhYmVsUGxhbmVGb250U2NhbGUiLCJPTkVfRU0iLCJsYWJlbFBsYW5lQW5jaG9yUG9pbnQiLCJjb2xsaXNpb25EZXRlY3RlZCIsImluR3JpZCIsImVudGlyZWx5T2Zmc2NyZWVuIiwic2NyZWVuUGxhbmVNaW4iLCJzY3JlZW5QbGFuZU1heCIsImludGVycG9sYXRvciIsInByb2plY3RlZFBhdGgiLCJjaXJjbGVEaXN0Iiwic2NyZWVuU3BhY2VQYXRoIiwic2VnbWVudHMiLCJtaW5Qb2ludCIsIm1heFBvaW50IiwiY2xpcExpbmUiLCJzZWciLCJudW1DaXJjbGVzIiwiY2lyY2xlUG9zaXRpb24iLCJjZW50ZXJYIiwiY2VudGVyWSIsInF1ZXJ5UmVuZGVyZWRTeW1ib2xzIiwidmlld3BvcnRRdWVyeUdlb21ldHJ5IiwiZ3JpZFBvaW50IiwiZmVhdHVyZXMiLCJzZWVuRmVhdHVyZXMiLCJmZWF0dXJlS2V5IiwiYnVja2V0SW5zdGFuY2VJZCIsImJib3giLCJpbnRlcnNlY3Rpb25UZXN0cyIsImluc2VydENvbGxpc2lvbkJveCIsImlnbm9yZVBsYWNlbWVudCIsImNvbGxpc2lvbkdyb3VwSUQiLCJpbnNlcnRDb2xsaXNpb25DaXJjbGVzIiwiY29sbGlzaW9uQ2lyY2xlcyIsImdldFZpZXdwb3J0TWF0cml4IiwicGl4ZWxWYWx1ZSIsIk9wYWNpdHlTdGF0ZSIsInByZXZTdGF0ZSIsImluY3JlbWVudCIsInBsYWNlZCIsInNraXBGYWRlIiwib3BhY2l0eSIsImlzSGlkZGVuIiwiSm9pbnRPcGFjaXR5U3RhdGUiLCJwbGFjZWRUZXh0IiwicGxhY2VkSWNvbiIsIkpvaW50UGxhY2VtZW50IiwiQ29sbGlzaW9uQ2lyY2xlQXJyYXkiLCJpbnZQcm9qTWF0cml4Iiwidmlld3BvcnRNYXRyaXgiLCJSZXRhaW5lZFF1ZXJ5RGF0YSIsInNvdXJjZUxheWVySW5kZXgiLCJidWNrZXRJbmRleCIsIkNvbGxpc2lvbkdyb3VwcyIsImNyb3NzU291cmNlQ29sbGlzaW9ucyIsIm1heEdyb3VwSUQiLCJjb2xsaXNpb25Hcm91cHMiLCJJRCIsIm5leHRHcm91cElEIiwiY2FsY3VsYXRlVmFyaWFibGVMYXlvdXRTaGlmdCIsInRleHRPZmZzZXQiLCJ0ZXh0Qm94U2NhbGUiLCJob3Jpem9udGFsQWxpZ24iLCJ2ZXJ0aWNhbEFsaWduIiwiZ2V0QW5jaG9yQWxpZ25tZW50Iiwic2hpZnRYIiwic2hpZnRZIiwiZXZhbHVhdGVWYXJpYWJsZU9mZnNldCIsInNoaWZ0VmFyaWFibGVDb2xsaXNpb25Cb3giLCJyb3RhdGVkT2Zmc2V0IiwiUGxhY2VtZW50IiwiZmFkZUR1cmF0aW9uIiwicHJldlBsYWNlbWVudCIsImNvbGxpc2lvbkluZGV4IiwicGxhY2VtZW50cyIsIm9wYWNpdGllcyIsInZhcmlhYmxlT2Zmc2V0cyIsInN0YWxlIiwiY29tbWl0VGltZSIsInJldGFpbmVkUXVlcnlEYXRhIiwiY29sbGlzaW9uQ2lyY2xlQXJyYXlzIiwicGxhY2VkT3JpZW50YXRpb25zIiwiZ2V0QnVja2V0UGFydHMiLCJyZXN1bHRzIiwic3R5bGVMYXllciIsInNvcnRBY3Jvc3NUaWxlcyIsInN5bWJvbEJ1Y2tldCIsImJ1Y2tldEZlYXR1cmVJbmRleCIsImxheW91dCIsInBpeGVsc1RvVGlsZXMiLCJ0ZXh0TGFiZWxQbGFuZU1hdHJpeCIsInBhcnRpYWxseUV2YWx1YXRlZFRleHRTaXplIiwiY29sbGlzaW9uR3JvdXAiLCJzb3J0S2V5UmFuZ2VzIiwic29ydEtleSIsInN5bWJvbEluc3RhbmNlU3RhcnQiLCJzeW1ib2xJbnN0YW5jZUVuZCIsInN5bWJvbEluc3RhbmNlcyIsImF0dGVtcHRBbmNob3JQbGFjZW1lbnQiLCJ0ZXh0Qm94IiwidGV4dE92ZXJsYXBNb2RlIiwic3ltYm9sSW5zdGFuY2UiLCJvcmllbnRhdGlvbiIsImljb25Cb3giLCJ0ZXh0T2Zmc2V0MCIsInRleHRPZmZzZXQxIiwicGxhY2VkR2x5cGhCb3hlcyIsInByZXZBbmNob3IiLCJjcm9zc1RpbGVJRCIsIm1hcmtVc2VkSnVzdGlmaWNhdGlvbiIsImFsbG93VmVydGljYWxQbGFjZW1lbnQiLCJtYXJrVXNlZE9yaWVudGF0aW9uIiwicGxhY2VMYXllckJ1Y2tldFBhcnQiLCJidWNrZXRQYXJ0Iiwic2VlbkNyb3NzVGlsZUlEcyIsInRleHRPcHRpb25hbCIsImljb25PcHRpb25hbCIsImdldE92ZXJsYXBNb2RlIiwidGV4dEFsd2F5c092ZXJsYXAiLCJpY29uT3ZlcmxhcE1vZGUiLCJpY29uQWx3YXlzT3ZlcmxhcCIsImhhc0ljb25UZXh0Rml0Iiwiek9yZGVyQnlWaWV3cG9ydFkiLCJhbHdheXNTaG93VGV4dCIsImhhc0ljb25EYXRhIiwiYWx3YXlzU2hvd0ljb24iLCJoYXNUZXh0RGF0YSIsImNvbGxpc2lvbkFycmF5cyIsImRlc2VyaWFsaXplQ29sbGlzaW9uQm94ZXMiLCJwbGFjZVN5bWJvbCIsInBsYWNlVGV4dCIsInBsYWNlSWNvbiIsInBsYWNlZFZlcnRpY2FsVGV4dCIsInBsYWNlZEdseXBoQ2lyY2xlcyIsInBsYWNlZEljb25Cb3hlcyIsInRleHRGZWF0dXJlSW5kZXgiLCJ2ZXJ0aWNhbFRleHRGZWF0dXJlSW5kZXgiLCJpY29uRmVhdHVyZUluZGV4IiwidXNlUnVudGltZUNvbGxpc2lvbkNpcmNsZXMiLCJib3hUeXBlIiwiZWxldmF0aW9uIiwidXBkYXRlUHJldmlvdXNPcmllbnRhdGlvbklmTm90UGxhY2VkIiwiaXNQbGFjZWQiLCJwcmV2aW91c09yaWVudGF0aW9uIiwicHJldlBsYWNlZE9yaWVudGF0aW9uIiwicGxhY2VUZXh0Rm9yUGxhY2VtZW50TW9kZXMiLCJwbGFjZUhvcml6b250YWxGbiIsInBsYWNlVmVydGljYWxGbiIsIm51bVZlcnRpY2FsR2x5cGhWZXJ0aWNlcyIsInZlcnRpY2FsVGV4dEJveCIsInBsYWNlbWVudE1vZGUiLCJ3cml0aW5nTW9kZXMiLCJhbmNob3JzIiwicHJldk9mZnNldHMiLCJ1bnNoaWZ0IiwicGxhY2VCb3hGb3JWYXJpYWJsZUFuY2hvcnMiLCJjb2xsaXNpb25UZXh0Qm94IiwiY29sbGlzaW9uSWNvbkJveCIsInZhcmlhYmxlSWNvbkJveCIsInBsYWNlZEJveCIsInBsYWNlbWVudEF0dGVtcHRzIiwidmVydGljYWxJY29uQm94IiwicHJldk9yaWVudGF0aW9uIiwicHJldk9mZnNldCIsInBsYWNlQm94IiwicGxhY2VkRmVhdHVyZSIsInBsYWNlZFN5bWJvbCIsImNlbnRlckp1c3RpZmllZFRleHRTeW1ib2xJbmRleCIsImNvbGxpc2lvbkNpcmNsZURpYW1ldGVyIiwicGxhY2VJY29uRmVhdHVyZSIsInNoaWZ0ZWRJY29uQm94IiwiaWNvbldpdGhvdXRUZXh0IiwibnVtSG9yaXpvbnRhbEdseXBoVmVydGljZXMiLCJ0ZXh0V2l0aG91dEljb24iLCJudW1JY29uVmVydGljZXMiLCJjaXJjbGVBcnJheSIsInN5bWJvbEluZGV4ZXMiLCJnZXRTb3J0ZWRTeW1ib2xJbmRleGVzIiwic3ltYm9sSW5kZXgiLCJwbGFjZWRBbmNob3IiLCJhdXRvSW5kZXgiLCJ2ZXJ0aWNhbFBsYWNlZFRleHRTeW1ib2xJbmRleCIsImxlZnRKdXN0aWZpZWRUZXh0U3ltYm9sSW5kZXgiLCJyaWdodEp1c3RpZmllZFRleHRTeW1ib2xJbmRleCIsImdldEFuY2hvckp1c3RpZmljYXRpb24iLCJpbmRleGVzIiwiaG9yaXpvbnRhbE9ubHkiLCJob3Jpem9udGFsSW5kZXhlcyIsInBsYWNlZE9yaWVudGF0aW9uIiwiY29tbWl0Iiwiem9vbUF0TGFzdFJlY2VuY3lDaGVjayIsInBsYWNlbWVudENoYW5nZWQiLCJwcmV2Wm9vbUFkanVzdG1lbnQiLCJ6b29tQWRqdXN0bWVudCIsInN5bWJvbEZhZGVDaGFuZ2UiLCJwcmV2T3BhY2l0aWVzIiwicHJldk9yaWVudGF0aW9ucyIsImpvaW50UGxhY2VtZW50IiwicHJldk9wYWNpdHkiLCJqb2ludE9wYWNpdHkiLCJsYXN0UGxhY2VtZW50Q2hhbmdlVGltZSIsInVwZGF0ZUxheWVyT3BhY2l0aWVzIiwidXBkYXRlQnVja2V0T3BhY2l0aWVzIiwib3BhY2l0eVZlcnRleEFycmF5IiwiaGFzSWNvbkNvbGxpc2lvbkJveERhdGEiLCJpY29uQ29sbGlzaW9uQm94IiwiY29sbGlzaW9uVmVydGV4QXJyYXkiLCJoYXNUZXh0Q29sbGlzaW9uQm94RGF0YSIsInRleHRDb2xsaXNpb25Cb3giLCJkdXBsaWNhdGVPcGFjaXR5U3RhdGUiLCJ0ZXh0QWxsb3dPdmVybGFwIiwiaWNvbkFsbG93T3ZlcmxhcCIsInZhcmlhYmxlUGxhY2VtZW50IiwiZGVmYXVsdE9wYWNpdHlTdGF0ZSIsImFkZE9wYWNpdGllcyIsImljb25PclRleHQiLCJudW1WZXJ0aWNlcyIsIm9wYWNpdHlTdGF0ZSIsImhhc0ljb24iLCJob3Jpem9udGFsSGlkZGVuIiwidmVydGljYWxIaWRkZW4iLCJwYWNrZWRPcGFjaXR5IiwicGFja09wYWNpdHkiLCJQQUNLRURfSElEREVOX09QQUNJVFkiLCJzeW1ib2xIaWRkZW4iLCJ1c2VIb3Jpem9udGFsIiwidmVydGljYWxQbGFjZWRJY29uU3ltYm9sSW5kZXgiLCJwbGFjZWRJY29uU3ltYm9sSW5kZXgiLCJudW1WZXJ0aWNhbEljb25WZXJ0aWNlcyIsInZhcmlhYmxlT2Zmc2V0IiwidXBkYXRlQ29sbGlzaW9uVmVydGljZXMiLCJ2ZXJ0aWNhbEljb25Vc2VkIiwic29ydEZlYXR1cmVzIiwiZmVhdHVyZVNvcnRPcmRlciIsIm9wYWNpdHlWZXJ0ZXhCdWZmZXIiLCJjb2xsaXNpb25WZXJ0ZXhCdWZmZXIiLCJpbnN0YW5jZSIsInBsYWNlbWVudEludlByb2pNYXRyaXgiLCJwbGFjZW1lbnRWaWV3cG9ydE1hdHJpeCIsImNvbGxpc2lvbkNpcmNsZUFycmF5IiwiaGFzVHJhbnNpdGlvbnMiLCJzdGlsbFJlY2VudCIsImR1cmF0aW9uQWRqdXN0bWVudCIsInNldFN0YWxlIiwibm90VXNlZCIsInNoaWZ0MjUiLCJzaGlmdDI0Iiwic2hpZnQxNyIsInNoaWZ0MTYiLCJzaGlmdDkiLCJzaGlmdDgiLCJzaGlmdDEiLCJ0YXJnZXRCaXQiLCJvcGFjaXR5Qml0cyIsIkxheWVyUGxhY2VtZW50IiwiX3NvcnRBY3Jvc3NUaWxlcyIsImlzQ29uc3RhbnQiLCJfY3VycmVudFRpbGVJbmRleCIsIl9jdXJyZW50UGFydEluZGV4IiwiX3NlZW5Dcm9zc1RpbGVJRHMiLCJfYnVja2V0UGFydHMiLCJjb250aW51ZVBsYWNlbWVudCIsInBsYWNlbWVudCIsInNob3VsZFBhdXNlUGxhY2VtZW50IiwiYnVja2V0UGFydHMiLCJQYXVzZWFibGVQbGFjZW1lbnQiLCJmb3JjZUZ1bGxQbGFjZW1lbnQiLCJfY3VycmVudFBsYWNlbWVudEluZGV4IiwiX2ZvcmNlRnVsbFBsYWNlbWVudCIsIl9zaG93Q29sbGlzaW9uQm94ZXMiLCJfZG9uZSIsImlzRG9uZSIsImxheWVyVGlsZXMiLCJzdGFydFRpbWUiLCJlbGFwc2VkVGltZSIsInBsYWNlbWVudFpvb20iLCJfaW5Qcm9ncmVzc0xheWVyIiwicm91bmRpbmdGYWN0b3IiLCJUaWxlTGF5ZXJJbmRleCIsImluZGV4ZWRTeW1ib2xJbnN0YW5jZXMiLCJnZXRTY2FsZWRDb29yZGluYXRlcyIsImNoaWxkVGlsZUlEIiwiZmluZE1hdGNoZXMiLCJuZXdUaWxlSUQiLCJ6b29tQ3Jvc3NUaWxlSURzIiwiaW5kZXhlZEluc3RhbmNlcyIsInNjYWxlZFN5bWJvbENvb3JkIiwidGhpc1RpbGVTeW1ib2wiLCJDcm9zc1RpbGVJRHMiLCJtYXhDcm9zc1RpbGVJRCIsImdlbmVyYXRlIiwiQ3Jvc3NUaWxlU3ltYm9sTGF5ZXJJbmRleCIsInVzZWRDcm9zc1RpbGVJRHMiLCJ6b29tSW5kZXhlcyIsIm5ld1pvb21JbmRleCIsImFkZEJ1Y2tldCIsImNyb3NzVGlsZUlEcyIsInJlbW92ZUJ1Y2tldENyb3NzVGlsZUlEcyIsIk51bWJlciIsImNoaWxkSW5kZXgiLCJwYXJlbnRJbmRleCIsInJlbW92ZWRCdWNrZXQiLCJyZW1vdmVTdGFsZUJ1Y2tldHMiLCJjdXJyZW50SURzIiwidGlsZXNDaGFuZ2VkIiwiQ3Jvc3NUaWxlU3ltYm9sSW5kZXgiLCJsYXllckluZGV4ZXMiLCJtYXhCdWNrZXRJbnN0YW5jZUlkIiwiYnVja2V0c0luQ3VycmVudFBsYWNlbWVudCIsImxheWVySW5kZXgiLCJzeW1ib2xCdWNrZXRzQ2hhbmdlZCIsImN1cnJlbnRCdWNrZXRJRHMiLCJwcnVuZVVudXNlZExheWVycyIsInVzZWRMYXllcnMiLCJ1c2VkTGF5ZXJNYXAiLCJ1c2VkTGF5ZXIiLCJUZXJyYWluU291cmNlQ2FjaGUiLCJfcmVuZGVyYWJsZVRpbGVzS2V5cyIsIl9zb3VyY2VUaWxlQ2FjaGUiLCJyZW5kZXJIaXN0b3J5IiwiZGVsdGFab29tIiwicmVuZGVySGlzdG9yeVNpemUiLCJkZXN0cnVjdCIsInJlbW92ZU91dGRhdGVkIiwidGlsZUlEcyIsImdldFJlbmRlcmFibGVUaWxlcyIsImdldFRlcnJhaW5Db29yZHMiLCJfdGlsZUlEIiwiZHoiLCJnZXRTb3VyY2VUaWxlIiwic2VhcmNoRm9yREVNIiwidGlsZXNBZnRlclRpbWUiLCJ0aW1lIiwidGltZUxvYWRlZCIsIlRlcnJhaW4iLCJleGFnZ2VyYXRpb24iLCJlbGV2YXRpb25PZmZzZXQiLCJxdWFsaXR5RmFjdG9yIiwibWVzaFNpemUiLCJfZGVtTWF0cml4Q2FjaGUiLCJjb29yZHNJbmRleCIsIl9jb29yZHNUZXh0dXJlU2l6ZSIsImNsZWFyUmVyZW5kZXJDYWNoZSIsImdldERFTUVsZXZhdGlvbiIsImdldFRlcnJhaW5EYXRhIiwidmVjMiIsInVfdGVycmFpbl9tYXRyaXgiLCJ0bCIsInRyIiwiYmwiLCJiciIsIm1peCIsInJlbWVtYmVyRm9yUmVyZW5kZXIiLCJfcmVyZW5kZXIiLCJuZWVkc1JlcmVuZGVyIiwiX2VtcHR5RGVtVGV4dHVyZSIsIl9lbXB0eURlcHRoVGV4dHVyZSIsIl9lbXB0eURlbVVucGFjayIsIk5FQVJFU1QiLCJfZW1wdHlEZW1NYXRyaXgiLCJzb3VyY2VUaWxlIiwiZ2V0UGl4ZWxzIiwibWF0cml4S2V5IiwiZGVtTWF0cml4IiwidV9kZXB0aCIsInVfdGVycmFpbiIsInVfdGVycmFpbl9kaW0iLCJ1X3RlcnJhaW5fdW5wYWNrIiwiZ2V0VW5wYWNrVmVjdG9yIiwidV90ZXJyYWluX29mZnNldCIsInVfdGVycmFpbl9leGFnZ2VyYXRpb24iLCJkZXB0aFRleHR1cmUiLCJfZmJvRGVwdGhUZXh0dXJlIiwiZ2V0UlRURnJhbWVidWZmZXIiLCJfcnR0RnJhbWVidWZmZXIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImRlcHRoQXR0YWNobWVudCIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiZ2V0RnJhbWVidWZmZXIiLCJkZXZpY2VQaXhlbFJhdGlvIiwiX2ZibyIsIl9mYm9Db29yZHNUZXh0dXJlIiwiY29sb3JBdHRhY2htZW50IiwiZ2V0Q29vcmRzVGV4dHVyZSIsIl9jb29yZHNUZXh0dXJlIiwicmdiYSIsImJpbmRGcmFtZWJ1ZmZlciIsImZyYW1lYnVmZmVyIiwicmVhZFBpeGVscyIsImNvb3Jkc1NpemUiLCJnZXRUZXJyYWluTWVzaCIsIl9tZXNoIiwidmVydGV4QXJyYXkiLCJQb3NBcnJheSIsImluZGV4QXJyYXkiLCJUcmlhbmdsZUluZGV4QXJyYXkiLCJtZXNoU2l6ZTIiLCJpbmRleEJ1ZmZlciIsImNyZWF0ZUluZGV4QnVmZmVyIiwidmVydGV4QnVmZmVyIiwicG9zQXR0cmlidXRlcyIsImV2ZW50ZWQiLCJlcnJvcnMiLCJfZW1pdFZhbGlkYXRpb25FcnJvcnMiLCJpZGVudGlmaWVyIiwic3VwcG9ydGVkRGlmZk9wZXJhdGlvbnMiLCJkaWZmT3BlcmF0aW9ucyIsImlnbm9yZWREaWZmT3BlcmF0aW9ucyIsImVtcHR5IiwibGF0ZXN0Iiwic3R5bGVLZXkiLCJzcGVjIiwicmVxdWlyZWQiLCJlbXB0eVN0eWxlIiwiU3R5bGUiLCJmdW5jIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsInRoaXNBcmciLCJhcHBseSIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiYXJndW1lbnRzIiwiZmx1c2giLCJkZWJvdW5jZSIsImdldFdvcmtlclBvb2wiLCJnbHlwaE1hbmFnZXIiLCJsaW5lQXRsYXMiLCJjcm9zc1RpbGVTeW1ib2xJbmRleCIsIl9sYXllcnMiLCJfc2VyaWFsaXplZExheWVycyIsIl9vcmRlciIsInpvb21IaXN0b3J5IiwiWm9vbUhpc3RvcnkiLCJfYXZhaWxhYmxlSW1hZ2VzIiwiX3Jlc2V0VXBkYXRlcyIsImdldFJlZmVycmVyIiwiX3J0bFRleHRQbHVnaW5DYWxsYmFjayIsInJlZ2lzdGVyRm9yUGx1Z2luU3RhdGVDaGFuZ2UiLCJldmVudCIsInBsdWdpblN0YXR1cyIsInBsdWdpblVSTCIsInRyaWdnZXJQbHVnaW5Db21wbGV0aW9uRXZlbnQiLCJlbGVtIiwiX3ZhbGlkYXRlTGF5ZXIiLCJsb2FkVVJMIiwiX3JlcXVlc3QiLCJqc29uIiwiX2xvYWQiLCJsb2FkSlNPTiIsImxvYWRFbXB0eSIsInN0eWxlc2hlZXQiLCJzb3VyY2VzIiwiX2xvYWRTcHJpdGUiLCJjcmVhdGVTdHlsZUxheWVyIiwiX3NlcmlhbGl6ZUxheWVycyIsInNldFRlcnJhaW4iLCJfc3ByaXRlUmVxdWVzdCIsImJhc2VVUkwiLCJqc29uUmVxdWVzdCIsIlNwcml0ZUpTT04iLCJtYXliZUNvbXBsZXRlIiwiaW1hZ2VSZXF1ZXN0IiwiU3ByaXRlSW1hZ2UiLCJsb2FkU3ByaXRlIiwiX3VwZGF0ZWRTb3VyY2VzIiwiX2NoZWNrTG9hZGVkIiwiY2hhbmdlZCIsIl9jaGFuZ2VkIiwidXBkYXRlZElkcyIsIl91cGRhdGVkTGF5ZXJzIiwicmVtb3ZlZElkcyIsIl9yZW1vdmVkTGF5ZXJzIiwiX3VwZGF0ZVdvcmtlckxheWVycyIsImFjdGlvbiIsIl9yZWxvYWRTb3VyY2UiLCJfY2xlYXJTb3VyY2UiLCJfdXBkYXRlVGlsZXNGb3JDaGFuZ2VkSW1hZ2VzIiwiX3VwZGF0ZWRQYWludFByb3BzIiwic291cmNlc1VzZWRCZWZvcmUiLCJjaGFuZ2VkSW1hZ2VzIiwiX2NoYW5nZWRJbWFnZXMiLCJfdGVycmFpbkRhdGFDYWxsYmFjayIsIm9mZiIsIl90ZXJyYWluZnJlZXplRWxldmF0aW9uQ2FsbGJhY2siLCJ1cGRhdGVFbGV2YXRpb24iLCJmcmVlemVFbGV2YXRpb24iLCJyZWNhbGN1bGF0ZVpvb20iLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImNoYW5nZXMiLCJiZWFyaW5nIiwicGl0Y2giLCJ0cmFuc2l0aW9uIiwicmVtb3ZlT3JBZGRTb3VyY2VDb21tYW5kcyIsImRpZmZTb3VyY2VzIiwiYmVmb3JlTGF5ZXJzIiwiYmVmb3JlT3JkZXIiLCJhZnRlck9yZGVyIiwiYmVmb3JlSW5kZXgiLCJhZnRlckluZGV4IiwidHJhY2tlciIsImNsZWFuIiwiYmVmb3JlTGF5ZXIiLCJhZnRlckxheWVyIiwiaW5zZXJ0QmVmb3JlTGF5ZXJJZCIsInBhaW50IiwiZGlmZkxheWVycyIsImNvbnNvbGUiLCJ3YXJuIiwiZGlmZlN0eWxlcyIsIm9wIiwidW5pbXBsZW1lbnRlZE9wcyIsIl9hZnRlckltYWdlVXBkYXRlZCIsImlzU291cmNlTG9hZGVkIiwibGF5ZXJPYmplY3QiLCJ2YWxpZGF0ZUN1c3RvbVN0eWxlTGF5ZXIiLCJhcnJheUluZGV4IiwiX2xheWVyT3JkZXJDaGFuZ2VkIiwiX3VwZGF0ZUxheWVyIiwibW92ZUxheWVyIiwibmV3SW5kZXgiLCJnZXRGaWx0ZXIiLCJnZXRMYXlvdXRQcm9wZXJ0eSIsImdldFBhaW50UHJvcGVydHkiLCJzb3VyY2VUeXBlIiwiZ2V0VHJhbnNpdGlvbiIsImRlbGF5IiwiZmlsdGVyT2JqZWN0IiwibWV0YWRhdGEiLCJtYXBPYmplY3QiLCJfZmxhdHRlbkFuZFNvcnRSZW5kZXJlZEZlYXR1cmVzIiwic291cmNlUmVzdWx0cyIsImlzTGF5ZXIzRCIsImZlYXR1cmVzM0QiLCJzb3VyY2VSZXN1bHQiLCJsYXllckZlYXR1cmVzIiwiaW50ZXJzZWN0aW9uWiIsInRvcG1vc3QzRCIsInBvcCIsImluY2x1ZGVkU291cmNlcyIsImF2YWlsYWJsZUltYWdlcyIsInJlbmRlcmVkU3ltYm9scyIsImJ1Y2tldFF1ZXJ5RGF0YSIsInF1ZXJ5RGF0YSIsImJ1Y2tldFN5bWJvbHMiLCJsb29rdXBTeW1ib2xGZWF0dXJlcyIsImxheWVyU3ltYm9scyIsInNvcnRlZEEiLCJzeW1ib2xGZWF0dXJlIiwibGF5ZXJOYW1lIiwiZGF0YVRpbGVzIiwiZGF0YUlEIiwiYWRkU291cmNlVHlwZSIsIlNvdXJjZVR5cGUiLCJnZXRTb3VyY2VUeXBlIiwic2V0U291cmNlVHlwZSIsIndvcmtlclNvdXJjZVVSTCIsIl91cGRhdGUiLCJfcmVtb3ZlIiwicnRsVGV4dFBsdWdpbkV2ZW50ZWQiLCJfdXBkYXRlU291cmNlcyIsIl9kZWJvdW5jZWRVcGRhdGVTb3VyY2UiLCJfZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcyIsIl91cGRhdGVQbGFjZW1lbnQiLCJwbGFjZW1lbnRDb21taXR0ZWQiLCJpc0xlc3NUaGFuIiwibGF5ZXJCdWNrZXRzQ2hhbmdlZCIsInBhdXNlYWJsZVBsYWNlbWVudCIsIl9yZWxlYXNlU3ltYm9sRmFkZVRpbGVzIiwiaWNvbnMiLCJzdGFja3MiLCJnZXRSZXNvdXJjZSIsIm1ha2VSZXF1ZXN0Iiwic2hhZGVycyIsInByZWx1ZGUiLCJjb21waWxlIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmRQYXR0ZXJuIiwiY2xpcHBpbmdNYXNrIiwiaGVhdG1hcCIsImhlYXRtYXBUZXh0dXJlIiwiY29sbGlzaW9uQ2lyY2xlIiwiZGVidWciLCJmaWxsT3V0bGluZSIsImZpbGxPdXRsaW5lUGF0dGVybiIsImZpbGxQYXR0ZXJuIiwiZmlsbEV4dHJ1c2lvbiIsImZpbGxFeHRydXNpb25QYXR0ZXJuIiwiaGlsbHNoYWRlUHJlcGFyZSIsImhpbGxzaGFkZSIsImxpbmUiLCJsaW5lR3JhZGllbnQiLCJsaW5lUGF0dGVybiIsImxpbmVTREYiLCJzeW1ib2xJY29uIiwic3ltYm9sU0RGIiwic3ltYm9sVGV4dEFuZEljb24iLCJ0ZXJyYWluVmVydCIsInRlcnJhaW5EZXB0aCIsInRlcnJhaW5Db29yZHMiLCJmcmFnbWVudFNvdXJjZSIsInZlcnRleFNvdXJjZSIsInJlIiwic3RhdGljQXR0cmlidXRlcyIsImZyYWdtZW50VW5pZm9ybXMiLCJ2ZXJ0ZXhVbmlmb3JtcyIsInN0YXRpY1VuaWZvcm1zIiwiZnJhZ21lbnRQcmFnbWFzIiwib3BlcmF0aW9uIiwicHJlY2lzaW9uIiwiYXR0clR5cGUiLCJ1bnBhY2tUeXBlIiwiVmVydGV4QXJyYXlPYmplY3QiLCJib3VuZFByb2dyYW0iLCJib3VuZExheW91dFZlcnRleEJ1ZmZlciIsImJvdW5kUGFpbnRWZXJ0ZXhCdWZmZXJzIiwiYm91bmRJbmRleEJ1ZmZlciIsImJvdW5kVmVydGV4T2Zmc2V0IiwiYm91bmREeW5hbWljVmVydGV4QnVmZmVyIiwidmFvIiwicHJvZ3JhbSIsImxheW91dFZlcnRleEJ1ZmZlciIsInBhaW50VmVydGV4QnVmZmVycyIsInZlcnRleE9mZnNldCIsImR5bmFtaWNWZXJ0ZXhCdWZmZXIiLCJkeW5hbWljVmVydGV4QnVmZmVyMiIsImR5bmFtaWNWZXJ0ZXhCdWZmZXIzIiwicGFpbnRCdWZmZXJzRGlmZmVyIiwiZXh0VmVydGV4QXJyYXlPYmplY3QiLCJib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIyIiwiYm91bmREeW5hbWljVmVydGV4QnVmZmVyMyIsImJpbmRWZXJ0ZXhBcnJheU9FUyIsImR5bmFtaWNEcmF3IiwiZnJlc2hCaW5kIiwibnVtUHJldkF0dHJpYnV0ZXMiLCJudW1OZXh0QXR0cmlidXRlcyIsIm51bUF0dHJpYnV0ZXMiLCJjcmVhdGVWZXJ0ZXhBcnJheU9FUyIsImN1cnJlbnROdW1BdHRyaWJ1dGVzIiwiZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiZW5hYmxlQXR0cmlidXRlcyIsInNldFZlcnRleEF0dHJpYlBvaW50ZXJzIiwiZGVsZXRlVmVydGV4QXJyYXlPRVMiLCJnZXRUb2tlbml6ZWRBdHRyaWJ1dGVzQW5kVW5pZm9ybXMiLCJhcnJheSIsInRva2VuIiwiUHJvZ3JhbSIsImNvbmZpZ3VyYXRpb24iLCJmaXhlZFVuaWZvcm1zIiwic2hvd092ZXJkcmF3SW5zcGVjdG9yIiwiY3JlYXRlUHJvZ3JhbSIsInN0YXRpY0F0dHJJbmZvIiwiZHluYW1pY0F0dHJJbmZvIiwiZ2V0QmluZGVyQXR0cmlidXRlcyIsImFsbEF0dHJJbmZvIiwicHJlbHVkZVVuaWZvcm1zSW5mbyIsInN0YXRpY1VuaWZvcm1zSW5mbyIsImR5bmFtaWNVbmlmb3Jtc0luZm8iLCJnZXRCaW5kZXJVbmlmb3JtcyIsInVuaWZvcm1MaXN0IiwiYWxsVW5pZm9ybXNJbmZvIiwidW5pZm9ybSIsImRlZmluZXMiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImZhaWxlZFRvQ3JlYXRlIiwiYXR0YWNoU2hhZGVyIiwidmVydGV4U2hhZGVyIiwidW5pZm9ybUxvY2F0aW9ucyIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwiZGVsZXRlU2hhZGVyIiwiaXQiLCJ1bmlmb3JtTG9jYXRpb24iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ0ZXJyYWluVW5pZm9ybXMiLCJsb2NhdGlvbnMiLCJVbmlmb3JtMWkiLCJVbmlmb3JtMWYiLCJVbmlmb3JtTWF0cml4NGYiLCJVbmlmb3JtNGYiLCJ0ZXJyYWluUHJlbHVkZVVuaWZvcm1zIiwiYmluZGVyVW5pZm9ybXMiLCJnZXRVbmlmb3JtcyIsImRyYXdNb2RlIiwiZGVwdGhNb2RlIiwic3RlbmNpbE1vZGUiLCJjb2xvck1vZGUiLCJjdWxsRmFjZU1vZGUiLCJ1bmlmb3JtVmFsdWVzIiwiY3VycmVudFByb3BlcnRpZXMiLCJkeW5hbWljTGF5b3V0QnVmZmVyIiwiZHluYW1pY0xheW91dEJ1ZmZlcjIiLCJkeW5hbWljTGF5b3V0QnVmZmVyMyIsInNldERlcHRoTW9kZSIsInNldFN0ZW5jaWxNb2RlIiwic2V0Q29sb3JNb2RlIiwic2V0Q3VsbEZhY2UiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTIiLCJURVhUVVJFMyIsInNldFVuaWZvcm1zIiwicHJpbWl0aXZlU2l6ZSIsIkxJTkVTIiwiVFJJQU5HTEVTIiwiTElORV9TVFJJUCIsInZhb3MiLCJnZXRQYWludFZlcnRleEJ1ZmZlcnMiLCJkcmF3RWxlbWVudHMiLCJwcmltaXRpdmVMZW5ndGgiLCJVTlNJR05FRF9TSE9SVCIsInByaW1pdGl2ZU9mZnNldCIsInBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiY3Jvc3NmYWRlIiwidGlsZVJhdGlvIiwidGlsZVpvb20iLCJudW1UaWxlcyIsInRpbGVTaXplQXROZWFyZXN0Wm9vbSIsInBpeGVsWCIsInBpeGVsWSIsInVfaW1hZ2UiLCJ1X3RleHNpemUiLCJ1X3NjYWxlIiwiZnJvbVNjYWxlIiwidG9TY2FsZSIsInVfZmFkZSIsInVfcGl4ZWxfY29vcmRfdXBwZXIiLCJ1X3BpeGVsX2Nvb3JkX2xvd2VyIiwiZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMiLCJzaG91bGRVc2VWZXJ0aWNhbEdyYWRpZW50IiwiX2xwIiwibGlnaHRQb3MiLCJsaWdodE1hdCIsIm1hdDMiLCJyYWQiLCJzaW4iLCJ2ZWMzIiwibGlnaHRDb2xvciIsInVfbWF0cml4IiwidV9saWdodHBvcyIsInVfbGlnaHRpbnRlbnNpdHkiLCJ1X2xpZ2h0Y29sb3IiLCJnIiwidV92ZXJ0aWNhbF9ncmFkaWVudCIsInVfb3BhY2l0eSIsImZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyIsInVfaGVpZ2h0X2ZhY3RvciIsImZpbGxVbmlmb3JtVmFsdWVzIiwiZmlsbFBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiZmlsbE91dGxpbmVVbmlmb3JtVmFsdWVzIiwiZHJhd2luZ0J1ZmZlclNpemUiLCJ1X3dvcmxkIiwiZmlsbE91dGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlcyIsImNpcmNsZVVuaWZvcm1WYWx1ZXMiLCJleHRydWRlU2NhbGUiLCJwaXhlbHNUb0dMVW5pdHMiLCJ1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UiLCJ1X3NjYWxlX3dpdGhfbWFwIiwidHJhbnNsYXRlUG9zTWF0cml4IiwidV9waXRjaF93aXRoX21hcCIsInVfZGV2aWNlX3BpeGVsX3JhdGlvIiwidV9leHRydWRlX3NjYWxlIiwiY29sbGlzaW9uVW5pZm9ybVZhbHVlcyIsInVfcGl4ZWxzX3RvX3RpbGVfdW5pdHMiLCJ1X292ZXJzY2FsZV9mYWN0b3IiLCJkZWJ1Z1VuaWZvcm1WYWx1ZXMiLCJzY2FsZVJhdGlvIiwidV9jb2xvciIsInVfb3ZlcmxheSIsInVfb3ZlcmxheV9zY2FsZSIsImNsaXBwaW5nTWFza1VuaWZvcm1WYWx1ZXMiLCJoZWF0bWFwVW5pZm9ybVZhbHVlcyIsInVfaW50ZW5zaXR5IiwiZ2V0VGlsZUxhdFJhbmdlIiwidG9MbmdMYXQiLCJsYXQiLCJsaW5lVW5pZm9ybVZhbHVlcyIsImNhbGN1bGF0ZU1hdHJpeCIsInVfcmF0aW8iLCJ1X3VuaXRzX3RvX3BpeGVscyIsImxpbmVHcmFkaWVudFVuaWZvcm1WYWx1ZXMiLCJpbWFnZUhlaWdodCIsInVfaW1hZ2VfaGVpZ2h0IiwibGluZVBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwidGlsZVpvb21SYXRpbyIsImNhbGN1bGF0ZVRpbGVSYXRpbyIsImxpbmVTREZVbmlmb3JtVmFsdWVzIiwicG9zQSIsImZyb20iLCJwb3NCIiwidG8iLCJ3aWR0aEEiLCJ3aWR0aEIiLCJ1X3BhdHRlcm5zY2FsZV9hIiwidV9wYXR0ZXJuc2NhbGVfYiIsInVfc2RmZ2FtbWEiLCJ1X3RleF95X2EiLCJ1X3RleF95X2IiLCJ1X21peCIsInJhc3RlclVuaWZvcm1WYWx1ZXMiLCJwYXJlbnRUTCIsInBhcmVudFNjYWxlQnkiLCJmYWRlIiwidV90bF9wYXJlbnQiLCJ1X3NjYWxlX3BhcmVudCIsInVfYnVmZmVyX3NjYWxlIiwidV9mYWRlX3QiLCJ1X2ltYWdlMCIsInVfaW1hZ2UxIiwidV9icmlnaHRuZXNzX2xvdyIsInVfYnJpZ2h0bmVzc19oaWdoIiwidV9zYXR1cmF0aW9uX2ZhY3RvciIsInNhdHVyYXRpb24iLCJ1X2NvbnRyYXN0X2ZhY3RvciIsImNvbnRyYXN0IiwidV9zcGluX3dlaWdodHMiLCJzcGluV2VpZ2h0cyIsInN5bWJvbEljb25Vbmlmb3JtVmFsdWVzIiwiZnVuY3Rpb25UeXBlIiwicm90YXRlSW5TaGFkZXIiLCJ0ZXhTaXplIiwidV9pc19zaXplX3pvb21fY29uc3RhbnQiLCJ1X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCIsInVfc2l6ZV90IiwidVNpemVUIiwidV9zaXplIiwidVNpemUiLCJ1X3BpdGNoIiwidV9yb3RhdGVfc3ltYm9sIiwidV9hc3BlY3RfcmF0aW8iLCJ1X2ZhZGVfY2hhbmdlIiwidV9sYWJlbF9wbGFuZV9tYXRyaXgiLCJ1X2Nvb3JkX21hdHJpeCIsInVfaXNfdGV4dCIsInVfdGV4dHVyZSIsInN5bWJvbFNERlVuaWZvcm1WYWx1ZXMiLCJpc0hhbG8iLCJ1X2dhbW1hX3NjYWxlIiwidV9pc19oYWxvIiwic3ltYm9sVGV4dEFuZEljb25Vbmlmb3JtVmFsdWVzIiwidGV4U2l6ZVNERiIsInRleFNpemVJY29uIiwidV90ZXhzaXplX2ljb24iLCJ1X3RleHR1cmVfaWNvbiIsImJhY2tncm91bmRVbmlmb3JtVmFsdWVzIiwiYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiaW1hZ2VQb3NBIiwiaW1hZ2VQb3NCIiwidV9wYXR0ZXJuX3RsX2EiLCJ1X3BhdHRlcm5fYnJfYSIsInVfcGF0dGVybl90bF9iIiwidV9wYXR0ZXJuX2JyX2IiLCJ1X3BhdHRlcm5fc2l6ZV9hIiwiZGlzcGxheVNpemUiLCJ1X3BhdHRlcm5fc2l6ZV9iIiwidV9zY2FsZV9hIiwidV9zY2FsZV9iIiwidV90aWxlX3VuaXRzX3RvX3BpeGVscyIsImJnUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJwcm9ncmFtVW5pZm9ybXMiLCJVbmlmb3JtM2YiLCJVbmlmb3JtMmYiLCJ1X2ludl9tYXRyaXgiLCJ1X3ZpZXdwb3J0X3NpemUiLCJVbmlmb3JtQ29sb3IiLCJ1X2NvbG9yX3JhbXAiLCJ1X2xhdHJhbmdlIiwidV9saWdodCIsInVfc2hhZG93IiwidV9oaWdobGlnaHQiLCJ1X2FjY2VudCIsInVfZGltZW5zaW9uIiwidV96b29tIiwidV91bnBhY2siLCJ1X3RlcnJhaW5fY29vcmRzX2lkIiwiSW5kZXhCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJ1bmJpbmRWQU8iLCJiaW5kRWxlbWVudEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImFycmF5QnVmZmVyIiwiRFlOQU1JQ19EUkFXIiwiU1RBVElDX0RSQVciLCJidWZmZXJTdWJEYXRhIiwiZGVsZXRlQnVmZmVyIiwiQXR0cmlidXRlVHlwZSIsIkludDgiLCJVaW50OCIsIkludDE2IiwiVWludDE2IiwiSW50MzIiLCJVaW50MzIiLCJGbG9hdDMyIiwiVmVydGV4QnVmZmVyIiwiaXRlbVNpemUiLCJieXRlc1BlckVsZW1lbnQiLCJiaW5kVmVydGV4QnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYXR0cmliSW5kZXgiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsIm1lbWJlciIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJjb21wb25lbnRzIiwiQmFzZVZhbHVlIiwiZGVmYXVsdCIsImdldERlZmF1bHQiLCJzZXREZWZhdWx0IiwiQ2xlYXJDb2xvciIsIkNvbG9yIiwidHJhbnNwYXJlbnQiLCJjbGVhckNvbG9yIiwiQ2xlYXJEZXB0aCIsImNsZWFyRGVwdGgiLCJDbGVhclN0ZW5jaWwiLCJjbGVhclN0ZW5jaWwiLCJDb2xvck1hc2siLCJjb2xvck1hc2siLCJEZXB0aE1hc2siLCJkZXB0aE1hc2siLCJTdGVuY2lsTWFzayIsInN0ZW5jaWxNYXNrIiwiU3RlbmNpbEZ1bmMiLCJBTFdBWVMiLCJtYXNrIiwic3RlbmNpbEZ1bmMiLCJTdGVuY2lsT3AiLCJLRUVQIiwic3RlbmNpbE9wIiwiU3RlbmNpbFRlc3QiLCJlbmFibGUiLCJTVEVOQ0lMX1RFU1QiLCJkaXNhYmxlIiwiRGVwdGhSYW5nZSIsImRlcHRoUmFuZ2UiLCJEZXB0aFRlc3QiLCJERVBUSF9URVNUIiwiRGVwdGhGdW5jIiwiTEVTUyIsImRlcHRoRnVuYyIsIkJsZW5kIiwiQkxFTkQiLCJCbGVuZEZ1bmMiLCJPTkUiLCJaRVJPIiwiYmxlbmRGdW5jIiwiQmxlbmRDb2xvciIsImJsZW5kQ29sb3IiLCJCbGVuZEVxdWF0aW9uIiwiRlVOQ19BREQiLCJibGVuZEVxdWF0aW9uIiwiQ3VsbEZhY2UiLCJDVUxMX0ZBQ0UiLCJDdWxsRmFjZVNpZGUiLCJCQUNLIiwiY3VsbEZhY2UiLCJGcm9udEZhY2UiLCJDQ1ciLCJmcm9udEZhY2UiLCJQcm9ncmFtVmFsdWUiLCJ1c2VQcm9ncmFtIiwiQWN0aXZlVGV4dHVyZVVuaXQiLCJURVhUVVJFMCIsIlZpZXdwb3J0IiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsInZpZXdwb3J0IiwiQmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJCaW5kUmVuZGVyYnVmZmVyIiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsIkJpbmRUZXh0dXJlIiwiQmluZFZlcnRleEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJCaW5kRWxlbWVudEJ1ZmZlciIsIkJpbmRWZXJ0ZXhBcnJheU9FUyIsIlBpeGVsU3RvcmVVbnBhY2siLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19BTElHTk1FTlQiLCJQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsIlBpeGVsU3RvcmVVbnBhY2tGbGlwWSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJGcmFtZWJ1ZmZlckF0dGFjaG1lbnQiLCJDb2xvckF0dGFjaG1lbnQiLCJzZXREaXJ0eSIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJEZXB0aEF0dGFjaG1lbnQiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsIkRFUFRIX0FUVEFDSE1FTlQiLCJGcmFtZWJ1ZmZlciIsImhhc0RlcHRoIiwicmVuZGVyYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJDb2xvck1vZGUiLCJibGVuZEZ1bmN0aW9uIiwiUmVwbGFjZSIsImRpc2FibGVkIiwidW5ibGVuZGVkIiwiYWxwaGFCbGVuZGVkIiwiQ29udGV4dCIsImdldEV4dGVuc2lvbiIsInN0ZW5jaWxUZXN0IiwiZGVwdGhUZXN0IiwiYmxlbmQiLCJjdWxsRmFjZVNpZGUiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJleHRUZXh0dXJlSGFsZkZsb2F0IiwiZXh0UmVuZGVyVG9UZXh0dXJlSGFsZkZsb2F0IiwiZXh0VGltZXJRdWVyeSIsIm1heFRleHR1cmVTaXplIiwiTUFYX1RFWFRVUkVfU0laRSIsInN0b3JhZ2VGb3JtYXQiLCJyYm8iLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJtb2RlIiwiZmFpbCIsImRlcHRoRmFpbCIsInBhc3MiLCJEZXB0aE1vZGUiLCJSZWFkT25seSIsIlJlYWRXcml0ZSIsIlN0ZW5jaWxNb2RlIiwiQ3VsbEZhY2VNb2RlIiwicXVhZFRyaWFuZ2xlcyIsImRyYXdDb2xsaXNpb25EZWJ1ZyIsInRyYW5zbGF0ZSIsInRyYW5zbGF0ZUFuY2hvciIsInRpbGVCYXRjaGVzIiwiY2lyY2xlQ291bnQiLCJjaXJjbGVPZmZzZXQiLCJidWZmZXJzIiwiaW52VHJhbnNmb3JtIiwiY29sb3JNb2RlRm9yUmVuZGVyUGFzcyIsImNpcmNsZVByb2dyYW0iLCJ2ZXJ0ZXhEYXRhIiwiQ29sbGlzaW9uQ2lyY2xlTGF5b3V0QXJyYXkiLCJfdHJpbSIsImJhdGNoIiwiY2lyY2xlSWR4IiwiY29sbGlzaW9uIiwiZW1wbGFjZSIsInF1YWRDb3VudCIsInRyaUNvdW50IiwiUXVhZFRyaWFuZ2xlQXJyYXkiLCJpZHgiLCJ1aW50MTYiLCJjcmVhdGVRdWFkVHJpYW5nbGVzIiwiY29sbGlzaW9uQ2lyY2xlTGF5b3V0IiwidW5pZm9ybXMiLCJiYWNrQ0NXIiwiaWRlbnRpdHlNYXQ0IiwiY2FsY3VsYXRlVmFyaWFibGVSZW5kZXJTaGlmdCIsInJlbmRlclRleHRTaXplIiwidXBkYXRlVmFyaWFibGVBbmNob3JzRm9yQnVja2V0IiwidGlsZVNjYWxlIiwidXBkYXRlVGV4dEZpdEljb24iLCJkeW5hbWljVGV4dExheW91dFZlcnRleEFycmF5IiwiZHluYW1pY0ljb25MYXlvdXRWZXJ0ZXhBcnJheSIsInBsYWNlZFRleHRTaGlmdHMiLCJza2lwT3JpZW50YXRpb24iLCJ0aWxlQW5jaG9yIiwicHJvamVjdGVkQW5jaG9yIiwic3ltYm9sUHJvamVjdGlvbiIsImV2YWx1YXRlU2l6ZUZvckZlYXR1cmUiLCJ0aWxlUGl4ZWxSYXRpbyIsInNoaWZ0ZWRBbmNob3IiLCJyb3RhdGUiLCJhc3NvY2lhdGVkSWNvbkluZGV4IiwicGxhY2VkSWNvbnMiLCJnZXRTeW1ib2xQcm9ncmFtTmFtZSIsImlzU0RGIiwiaWNvbnNJblRleHQiLCJkcmF3TGF5ZXJTeW1ib2xzIiwicm90YXRpb25BbGlnbm1lbnQiLCJwaXRjaEFsaWdubWVudCIsImFsb25nTGluZSIsImhhc1NvcnRLZXkiLCJzb3J0RmVhdHVyZXNCeUtleSIsImRlcHRoTW9kZUZvclN1YmxheWVyIiwidGlsZVJlbmRlclN0YXRlIiwicHJvZ3JhbUNvbmZpZ3VyYXRpb24iLCJwcm9ncmFtQ29uZmlndXJhdGlvbnMiLCJzZGZJY29ucyIsInRyYW5zZm9ybWVkIiwiZXZhbHVhdGVTaXplRm9yWm9vbSIsInRlcnJhaW5EYXRhIiwiYXRsYXNJbnRlcnBvbGF0aW9uIiwiYXRsYXNJbnRlcnBvbGF0aW9uSWNvbiIsImF0bGFzVGV4dHVyZUljb24iLCJ6b29tRGVwZW5kZW50U2l6ZSIsImtpbmQiLCJyb3RhdGluZyIsInpvb21pbmciLCJpY29uU2NhbGVkIiwiY29uc3RhbnRPciIsImljb25zTmVlZExpbmVhciIsImhhc1ZhcmlhYmxlQW5jaG9ycyIsInVMYWJlbFBsYW5lTWF0cml4IiwidWdsQ29vcmRNYXRyaXgiLCJoYXNIYWxvIiwiY2FuT3ZlcmxhcCIsIm9sZFNlZ21lbnRzIiwic2VnbWVudFN0YXRlIiwiVEVYVFVSRTEiLCJkcmF3U3ltYm9sRWxlbWVudHMiLCJkcmF3RmlsbFRpbGVzIiwiaXNPdXRsaW5lIiwicGF0dGVyblByb3BlcnR5IiwiZ2V0Q3Jvc3NmYWRlUGFyYW1ldGVycyIsInByb2dyYW1OYW1lIiwidXBkYXRlUGFpbnRCdWZmZXJzIiwiY29uc3RhbnRQYXR0ZXJuIiwiYXRsYXMiLCJwb3NUbyIsInBvc0Zyb20iLCJzZXRDb25zdGFudFBhdHRlcm5Qb3NpdGlvbnMiLCJ0ZXJyYWluQ29vcmQiLCJ0aWxlTWF0cml4IiwiaW5kZXhCdWZmZXIyIiwic2VnbWVudHMyIiwic3RlbmNpbE1vZGVGb3JDbGlwcGluZyIsImRyYXdFeHRydXNpb25UaWxlcyIsImNlbnRyb2lkVmVydGV4QnVmZmVyIiwicmVuZGVySGlsbHNoYWRlIiwic2hhZG93IiwiaGlnaGxpZ2h0IiwiYWNjZW50IiwiYXppbXV0aGFsIiwiYWxpZ24iLCJtb3ZpbmciLCJoaWxsc2hhZGVVbmlmb3JtVmFsdWVzIiwicmFzdGVyQm91bmRzQnVmZmVyIiwicXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIiLCJyYXN0ZXJCb3VuZHNTZWdtZW50cyIsInByZXBhcmVIaWxsc2hhZGUiLCJ0ZXh0dXJlU3RyaWRlIiwicGl4ZWxEYXRhIiwicmVuZGVyVGV4dHVyZSIsImhpbGxzaGFkZVVuaWZvcm1QcmVwYXJlVmFsdWVzIiwiZ2V0RmFkZVZhbHVlcyIsInNpbmNlVGlsZSIsInNpbmNlUGFyZW50IiwiaWRlYWxaIiwiZmFkZUluIiwiY2hpbGRPcGFjaXR5IiwidG9wQ29sb3IiLCJidG1Db2xvciIsImxlZnRDb2xvciIsInJpZ2h0Q29sb3IiLCJjZW50ZXJDb2xvciIsImRyYXdIb3Jpem9udGFsTGluZSIsImxpbmVXaWR0aCIsImRyYXdEZWJ1Z1NTUmVjdCIsImRyYXdWZXJ0aWNhbExpbmUiLCJTQ0lTU09SX1RFU1QiLCJzY2lzc29yIiwiZHJhd0RlYnVnVGlsZSIsImVtcHR5VGV4dHVyZSIsInRpbGVSYXdEYXRhIiwidGlsZVNpemVLYiIsImJ5dGVMZW5ndGgiLCJ0aWxlSWRUZXh0IiwiaW5pdERlYnVnT3ZlcmxheUNhbnZhcyIsImRlYnVnT3ZlcmxheUNhbnZhcyIsImN0eDJkIiwic2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic3Ryb2tlU3R5bGUiLCJzdHJva2VUZXh0IiwiZGVidWdPdmVybGF5VGV4dHVyZSIsImRyYXdUZXh0VG9PdmVybGF5IiwiZGVidWdCdWZmZXIiLCJkZWJ1Z1NlZ21lbnRzIiwicmVkIiwidGlsZUJvcmRlckluZGV4QnVmZmVyIiwiZHJhd1RlcnJhaW4iLCJMRVFVQUwiLCJkZXB0aFJhbmdlRm9yM0QiLCJtZXNoIiwicHJlcGFyZVRlcnJhaW4iLCJmYiIsIlJlbmRlclRvVGV4dHVyZSIsIl9yZW5kZXJUb1RleHR1cmUiLCJfY29vcmRzRGVzY2VuZGluZ0ludiIsIl9jb29yZHNEZXNjZW5kaW5nSW52U3RyIiwiX3N0YWNrcyIsIl9wcmV2VHlwZSIsIl9yZW5kZXJhYmxlVGlsZXMiLCJfaW5pdCIsInJlbmRlckxheWVyIiwiY3VycmVudExheWVyIiwiaXNMYXN0TGF5ZXIiLCJfcmVuZGVyVGlsZUNsaXBwaW5nTWFza3MiLCJyZW5kZXJQYXNzIiwicGl4ZWxUb1RpbGVTY2FsZSIsInVwZGF0ZVZhcmlhYmxlQW5jaG9ycyIsInN0cm9rZVdpZHRoIiwic3Ryb2tlT3BhY2l0eSIsInNlZ21lbnRzUmVuZGVyU3RhdGVzIiwic2VnbWVudHNTdGF0ZSIsImhlYXRtYXBGYm8iLCJIQUxGX0ZMT0FUX09FUyIsImJpbmRUZXh0dXJlVG9GcmFtZWJ1ZmZlciIsImNvbG9yUmFtcFRleHR1cmUiLCJjb2xvclJhbXAiLCJ0ZXh0dXJlVW5pdCIsImNvbG9yUmFtcFVuaXQiLCJoZWF0bWFwVGV4dHVyZVVuaWZvcm1WYWx1ZXMiLCJ2aWV3cG9ydEJ1ZmZlciIsInZpZXdwb3J0U2VnbWVudHMiLCJyZW5kZXJUZXh0dXJlVG9NYXAiLCJncmFkaWVudCIsInByb2dyYW1JZCIsImZpcnN0VGlsZSIsInByZXZQcm9ncmFtIiwicHJvZ3JhbUNoYW5nZWQiLCJsaW5lQ2xpcHNBcnJheSIsImxheWVyR3JhZGllbnQiLCJncmFkaWVudHMiLCJncmFkaWVudFRleHR1cmUiLCJncmFkaWVudFZlcnNpb24iLCJ0ZXh0dXJlUmVzb2x1dGlvbiIsInN0ZXBJbnRlcnBvbGFudCIsInNvdXJjZU1heFpvb20iLCJwb3RlbnRpYWxPdmVyem9vbSIsIm5leHRQb3dlck9mVHdvIiwibWF4TGluZUxlbmd0aCIsInJlbmRlckNvbG9yUmFtcCIsImdyYWRpZW50RXhwcmVzc2lvbiIsImV2YWx1YXRpb25LZXkiLCJyZXNvbHV0aW9uIiwiY2xpcHMiLCJsYXlvdXRWZXJ0ZXhCdWZmZXIyIiwib3BhcXVlUGFzc0VuYWJsZWRGb3JMYXllciIsInN0ZW5jaWxNb2RlRm9yM0QiLCJzdGVuY2lsTW9kZXMiLCJzdGVuY2lsQ29uZmlnRm9yT3ZlcmxhcCIsIm1pblRpbGVaIiwidGV4dHVyZUZpbHRlciIsImlzUGF0dGVybk1pc3NpbmciLCJ0aWxlRXh0ZW50QnVmZmVyIiwidGlsZUV4dGVudFNlZ21lbnRzIiwiaW1wbGVtZW50YXRpb24iLCJwcmVyZW5kZXIiLCJzZXRDdXN0b21MYXllckRlZmF1bHRzIiwiY3VzdG9tTGF5ZXJNYXRyaXgiLCJzZXRCYXNlU3RhdGUiLCJyZW5kZXJpbmdNb2RlIiwiUGFpbnRlciIsIl90aWxlVGV4dHVyZXMiLCJ0ZXJyYWluRmFjaWxpdGF0b3IiLCJyZW5kZXJUaW1lIiwic2V0dXAiLCJudW1TdWJsYXllcnMiLCJkZXB0aEVwc2lsb24iLCJncHVUaW1lcnMiLCJ0aWxlRXh0ZW50QXJyYXkiLCJkZWJ1Z0FycmF5IiwicmFzdGVyQm91bmRzQXJyYXkiLCJ2aWV3cG9ydEFycmF5IiwidGlsZUxpbmVTdHJpcEluZGljZXMiLCJMaW5lU3RyaXBJbmRleEFycmF5IiwicXVhZFRyaWFuZ2xlSW5kaWNlcyIsInN0ZW5jaWxDbGVhck1vZGUiLCJuZXh0U3RlbmNpbElEIiwiY3VycmVudFN0ZW5jaWxTb3VyY2UiLCJfdGlsZUNsaXBwaW5nTWFza0lEcyIsIlJFUExBQ0UiLCJOT1RFUVVBTCIsIkVRVUFMIiwic3RlbmNpbFZhbHVlcyIsInpUb1N0ZW5jaWxNb2RlIiwiR0VRVUFMIiwiX3Nob3dPdmVyZHJhd0luc3BlY3RvciIsIkNPTlNUQU5UX0NPTE9SIiwib3BhcXVlUGFzc0N1dG9mZiIsInJlbmRlclRvVGV4dHVyZSIsImNvb3Jkc0FzY2VuZGluZyIsImNvb3Jkc0Rlc2NlbmRpbmciLCJjb29yZHNEZXNjZW5kaW5nU3ltYm9sIiwicmV2ZXJzZSIsImlzM0QiLCJuZXdUaWxlcyIsInByb2pNYXRyaXgiLCJkcmF3RGVwdGgiLCJkcmF3Q29vcmRzIiwiaGFzT2Zmc2NyZWVuUGFzcyIsImJsYWNrIiwic2hvd1RpbGVCb3VuZGFyaWVzIiwic2VsZWN0ZWRTb3VyY2UiLCJzaG93UGFkZGluZyIsImJvdHRvbSIsImNlbnRlclBvaW50IiwiZHJhd0Nyb3NzaGFpciIsImRyYXdEZWJ1Z1BhZGRpbmciLCJncHVUaW1pbmdTdGFydCIsImdwdVRpbWluZ0VuZCIsImdwdVRpbWluZyIsImV4dCIsImxheWVyVGltZXIiLCJjYWxscyIsImNwdVRpbWUiLCJjcmVhdGVRdWVyeUVYVCIsImJlZ2luUXVlcnlFWFQiLCJUSU1FX0VMQVBTRURfRVhUIiwiZW5kUXVlcnlFWFQiLCJjb2xsZWN0R3B1VGltZXJzIiwiY3VycmVudExheWVyVGltZXJzIiwicXVlcnlHcHVUaW1lcnMiLCJncHVUaW1lciIsImdwdVRpbWUiLCJnZXRRdWVyeU9iamVjdEVYVCIsIlFVRVJZX1JFU1VMVF9FWFQiLCJkZWxldGVRdWVyeUVYVCIsImluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMiLCJzaW5BIiwiY29zQSIsInRyYW5zbGF0aW9uIiwidHJhbnNsYXRlZE1hdHJpeCIsImNhY2hlIiwiY2FjaGVLZXkiLCJGcnVzdHVtIiwicGxhbmVzIiwiaW52UHJvaiIsImZydXN0dW1Db29yZHMiLCJmcnVzdHVtUGxhbmVzIiwiYXgiLCJheSIsImF6IiwiYngiLCJieSIsImJ6IiwiQWFiYiIsIm1pbl8iLCJtYXhfIiwicXVhZHJhbnQiLCJxTWluIiwicU1heCIsImF4aXMiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJpbnRlcnNlY3RzIiwiZnJ1c3R1bSIsImFhYmJQb2ludHMiLCJmdWxseUluc2lkZSIsInBsYW5lIiwicG9pbnRzSW5zaWRlIiwicHJvak1pbiIsIk1BWF9WQUxVRSIsInByb2pNYXgiLCJFZGdlSW5zZXRzIiwibnVtYmVyIiwiZ2V0Q2VudGVyIiwidG9KU09OIiwiVHJhbnNmb3JtIiwibWluWm9vbSIsIm1pblBpdGNoIiwibWF4UGl0Y2giLCJyZW5kZXJXb3JsZENvcGllcyIsIm1heFZhbGlkTGF0aXR1ZGUiLCJfcmVuZGVyV29ybGRDb3BpZXMiLCJfbWluWm9vbSIsIl9tYXhab29tIiwiX21pblBpdGNoIiwiX21heFBpdGNoIiwic2V0TWF4Qm91bmRzIiwiX2NlbnRlciIsIkxuZ0xhdCIsIl9lbGV2YXRpb24iLCJfZm92IiwiX3VubW9kaWZpZWQiLCJfZWRnZUluc2V0cyIsIl9wb3NNYXRyaXhDYWNoZSIsIl9hbGlnbmVkUG9zTWF0cml4Q2FjaGUiLCJsYXRSYW5nZSIsIl9jYWxjTWF0cmljZXMiLCJjZW50ZXJPZmZzZXQiLCJfc3ViIiwiX2RpdiIsInJvdGF0aW9uTWF0cml4IiwibWF0MiIsImEwIiwiYTEiLCJhMiIsImEzIiwiZm92IiwiX3pvb20iLCJ6b29tU2NhbGUiLCJ6b29tRnJhY3Rpb24iLCJfY29uc3RyYWluIiwiaXNQYWRkaW5nRXF1YWwiLCJpbnRlcnBvbGF0ZVBhZGRpbmciLCJzY2FsZVpvb20iLCJVbndyYXBwZWRUaWxlSUQiLCJ1dGwiLCJ1dHIiLCJ1YmwiLCJ1YnIiLCJ3MCIsIncxIiwiZXh0cmFXb3JsZENvcHkiLCJhY3R1YWxaIiwiY2FtZXJhQ29vcmQiLCJnZXRDYW1lcmFQb2ludCIsImNlbnRlckNvb3JkIiwiY2FtZXJhUG9pbnQiLCJjYW1lcmFGcnVzdHVtIiwiZnJvbUludlByb2plY3Rpb25NYXRyaXgiLCJyYWRpdXNPZk1heEx2bExvZEluVGlsZXMiLCJuZXdSb290VGlsZSIsImFhYmIiLCJmdWxseVZpc2libGUiLCJpbnRlcnNlY3RSZXN1bHQiLCJyZWZQb2ludCIsImxvbmdlc3REaW0iLCJkaXN0VG9TcGxpdCIsImRpc3RhbmNlU3EiLCJ0aWxlRGlzdGFuY2VUb0NhbWVyYSIsImNoaWxkWCIsImNoaWxkWSIsImNoaWxkWiIsIm1pbkVsZXZhdGlvbiIsIm1heEVsZXZhdGlvbiIsInVubW9kaWZpZWQiLCJsbmdsYXQiLCJ1bnByb2plY3QiLCJtZXJjIiwibWVyY1giLCJtZXJjWSIsInRpbGVYIiwidGlsZVkiLCJnZXRDYW1lcmFQb3NpdGlvbiIsImxuZ0xhdCIsInBvaW50TG9jYXRpb24iLCJhbHRpdHVkZSIsIl9waXhlbFBlck1ldGVyIiwiY2FtZXJhUG9zaXRpb24iLCJjYW1lcmEiLCJkaXN0YW5jZSIsInNldExvY2F0aW9uQXRQb2ludCIsImxvYyIsImxvY2F0aW9uQ29vcmRpbmF0ZSIsIm5ld0NlbnRlciIsImNvb3JkaW5hdGVMb2NhdGlvbiIsImxvY2F0aW9uUG9pbnQiLCJjb29yZGluYXRlUG9pbnQiLCJwaXhlbE1hdHJpeDNEIiwiY29vcmRpbmF0ZSIsImNvb3JkMCIsImNvb3JkMSIsInBpeGVsTWF0cml4SW52ZXJzZSIsInowIiwiejEiLCJwaXhlbE1hdHJpeCIsImdldEJvdW5kcyIsImdldEhvcml6b24iLCJnZXRNYXhCb3VuZHMiLCJsbmdSYW5nZSIsInRhbiIsInVud3JhcHBlZFRpbGVJRCIsImFsaWduZWQiLCJwb3NNYXRyaXhLZXkiLCJ1bndyYXBwZWRYIiwiYWxpZ25lZFByb2pNYXRyaXgiLCJtZXJjYXRvck1hdHJpeCIsIl9jb25zdHJhaW5pbmciLCJzeSIsInN4IiwiaDIiLCJ3MiIsIm1lcmNhdG9yWmZyb21BbHRpdHVkZSIsImNhbWVyYVRvU2VhTGV2ZWxEaXN0YW5jZSIsImdyb3VuZEFuZ2xlIiwiZm92QWJvdmVDZW50ZXIiLCJ0b3BIYWxmU3VyZmFjZURpc3RhbmNlIiwiaG9yaXpvbiIsImZvdkNlbnRlclRvSG9yaXpvbiIsImF0YW4iLCJ0b3BIYWxmU3VyZmFjZURpc3RhbmNlSG9yaXpvbiIsImZ1cnRoZXN0RGlzdGFuY2UiLCJmdXJ0aGVzdERpc3RhbmNlSG9yaXpvbiIsImZhcloiLCJuZWFyWiIsInhTaGlmdCIsInlTaGlmdCIsImFuZ2xlQ29zIiwiYW5nbGVTaW4iLCJhbGlnbmVkTSIsInlPZmZzZXQiLCJIYXNoIiwiaGFzaE5hbWUiLCJfaGFzaE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJfdXBkYXRlSGFzaCIsInBlbmRpbmciLCJsYXRlciIsInRocm90dGxlIiwiX3VwZGF0ZUhhc2hVbnRocm90dGxlZCIsImFkZFRvIiwiX21hcCIsIl9vbkhhc2hDaGFuZ2UiLCJnZXRIYXNoU3RyaW5nIiwibWFwRmVlZGJhY2siLCJnZXRab29tIiwiTE4xMCIsImdldEJlYXJpbmciLCJnZXRQaXRjaCIsImhhc2giLCJmb3VuZCIsImxvY2F0aW9uIiwiX2dldEN1cnJlbnRIYXNoIiwia2V5dmFsIiwiZHJhZ1JvdGF0ZSIsImlzRW5hYmxlZCIsInRvdWNoWm9vbVJvdGF0ZSIsImp1bXBUbyIsImhyZWYiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwiU2VjdXJpdHlFcnJvciIsImRlZmF1bHRJbmVydGlhT3B0aW9ucyIsImxpbmVhcml0eSIsImVhc2luZyIsImJlemllciIsImRlZmF1bHRQYW5JbmVydGlhT3B0aW9ucyIsImRlY2VsZXJhdGlvbiIsIm1heFNwZWVkIiwiZGVmYXVsdFpvb21JbmVydGlhT3B0aW9ucyIsImRlZmF1bHRCZWFyaW5nSW5lcnRpYU9wdGlvbnMiLCJkZWZhdWx0UGl0Y2hJbmVydGlhT3B0aW9ucyIsIkhhbmRsZXJJbmVydGlhIiwiX2luZXJ0aWFCdWZmZXIiLCJyZWNvcmQiLCJzZXR0aW5ncyIsIl9kcmFpbkluZXJ0aWFCdWZmZXIiLCJpbmVydGlhIiwiX29uTW92ZUVuZCIsInBhbkluZXJ0aWFPcHRpb25zIiwiZGVsdGFzIiwicGFuIiwicGluY2hBcm91bmQiLCJhcm91bmQiLCJ6b29tRGVsdGEiLCJiZWFyaW5nRGVsdGEiLCJwaXRjaERlbHRhIiwicGFuRGVsdGEiLCJlYXNlT3B0aW9ucyIsImNhbGN1bGF0ZUVhc2luZyIsImFtb3VudCIsImV4dGVuZER1cmF0aW9uIiwibm9Nb3ZlU3RhcnQiLCJpbmVydGlhRHVyYXRpb24iLCJpbmVydGlhT3B0aW9ucyIsInNwZWVkIiwiTWFwTW91c2VFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJtb3VzZVBvcyIsImdldENhbnZhc0NvbnRhaW5lciIsIl9kZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsIk1hcFRvdWNoRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoUG9zIiwibG5nTGF0cyIsImN1cnIiLCJhcnIiLCJkaXYiLCJNYXBXaGVlbEV2ZW50IiwiTWFwRXZlbnRIYW5kbGVyIiwiX2NsaWNrVG9sZXJhbmNlIiwiY2xpY2tUb2xlcmFuY2UiLCJfbW91c2Vkb3duUG9zIiwid2hlZWwiLCJfZmlyZVByZXZlbnRhYmxlIiwibW91c2Vkb3duIiwibW91c2V1cCIsImNsaWNrIiwiZGJsY2xpY2siLCJtb3VzZW92ZXIiLCJtb3VzZW91dCIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInRvdWNoY2FuY2VsIiwibWFwRXZlbnQiLCJpc0FjdGl2ZSIsIkJsb2NrYWJsZU1hcEV2ZW50SGFuZGxlciIsIl9kZWxheUNvbnRleHRNZW51IiwiX2NvbnRleHRNZW51RXZlbnQiLCJtb3VzZW1vdmUiLCJjb250ZXh0bWVudSIsImxpc3RlbnMiLCJCb3hab29tSGFuZGxlciIsIl9lbCIsIl9jb250YWluZXIiLCJnZXRDb250YWluZXIiLCJfZW5hYmxlZCIsIl9hY3RpdmUiLCJzaGlmdEtleSIsImRpc2FibGVEcmFnIiwiX3N0YXJ0UG9zIiwiX2xhc3RQb3MiLCJtb3VzZW1vdmVXaW5kb3ciLCJfYm94IiwicDAiLCJjbGFzc0xpc3QiLCJfZmlyZUV2ZW50Iiwic2V0VHJhbnNmb3JtIiwibW91c2V1cFdpbmRvdyIsInAxIiwic3VwcHJlc3NDbGljayIsImNhbWVyYUFuaW1hdGlvbiIsImZpdFNjcmVlbkNvb3JkaW5hdGVzIiwibGluZWFyIiwia2V5ZG93biIsImtleUNvZGUiLCJlbmFibGVEcmFnIiwiaW5kZXhUb3VjaGVzIiwiU2luZ2xlVGFwUmVjb2duaXplciIsIm51bVRvdWNoZXMiLCJjZW50cm9pZCIsIm1hcFRvdWNoZXMiLCJ0aW1lU3RhbXAiLCJzdW0iLCJnZXRDZW50cm9pZCIsIm5ld1RvdWNoZXMiLCJwcmV2UG9zIiwiVGFwUmVjb2duaXplciIsInNpbmdsZVRhcCIsIm51bVRhcHMiLCJsYXN0VGltZSIsImxhc3RUYXAiLCJjb3VudCIsInRhcCIsInNvb25Fbm91Z2giLCJjbG9zZUVub3VnaCIsIlRhcFpvb21IYW5kbGVyIiwiX3pvb21JbiIsIl96b29tT3V0Iiwiem9vbUluUG9pbnQiLCJ6b29tT3V0UG9pbnQiLCJlYXNlVG8iLCJCVVRUT05TX0ZMQUdTIiwiTW91c2VIYW5kbGVyIiwiX21vdmVkIiwiX2xhc3RQb2ludCIsIl9ldmVudEJ1dHRvbiIsIl9jb3JyZWN0QnV0dG9uIiwiX21vdmUiLCJldmVudEJ1dHRvbiIsIm1vdXNlQnV0dG9uIiwiZmxhZyIsImJ1dHRvbnMiLCJidXR0b25TdGlsbFByZXNzZWQiLCJNb3VzZVBhbkhhbmRsZXIiLCJjdHJsS2V5IiwiTW91c2VSb3RhdGVIYW5kbGVyIiwiTW91c2VQaXRjaEhhbmRsZXIiLCJUb3VjaFBhbkhhbmRsZXIiLCJfbWluVG91Y2hlcyIsIl90b3VjaGVzIiwiX3N1bSIsIl9jYWxjdWxhdGVUcmFuc2Zvcm0iLCJ0b3VjaFBvaW50U3VtIiwidG91Y2hEZWx0YVN1bSIsInRvdWNoRGVsdGFDb3VudCIsInByZXZQb2ludCIsIlR3b1RvdWNoSGFuZGxlciIsIl9maXJzdFR3b1RvdWNoZXMiLCJfc3RhcnQiLCJnZXRUb3VjaEJ5SWQiLCJfYXJvdW5kQ2VudGVyIiwiZ2V0Wm9vbURlbHRhIiwibGFzdERpc3RhbmNlIiwiVG91Y2hab29tSGFuZGxlciIsIl9kaXN0YW5jZSIsIl9zdGFydERpc3RhbmNlIiwiZ2V0QmVhcmluZ0RlbHRhIiwiYW5nbGVXaXRoIiwiVG91Y2hSb3RhdGVIYW5kbGVyIiwiX21pbkRpYW1ldGVyIiwiX3N0YXJ0VmVjdG9yIiwiX3ZlY3RvciIsImxhc3RWZWN0b3IiLCJfaXNCZWxvd1RocmVzaG9sZCIsInRocmVzaG9sZCIsImJlYXJpbmdEZWx0YVNpbmNlU3RhcnQiLCJpc1ZlcnRpY2FsIiwiVG91Y2hQaXRjaEhhbmRsZXIiLCJfdmFsaWQiLCJfZmlyc3RNb3ZlIiwiX2xhc3RQb2ludHMiLCJ2ZWN0b3JBIiwidmVjdG9yQiIsImdlc3R1cmVCZWdpbnNWZXJ0aWNhbGx5IiwibW92ZWRBIiwibW92ZWRCIiwiaXNTYW1lRGlyZWN0aW9uIiwiZGVmYXVsdE9wdGlvbnMiLCJwYW5TdGVwIiwiYmVhcmluZ1N0ZXAiLCJwaXRjaFN0ZXAiLCJLZXlib2FyZEhhbmRsZXIiLCJzdGVwT3B0aW9ucyIsIl9wYW5TdGVwIiwiX2JlYXJpbmdTdGVwIiwiX3BpdGNoU3RlcCIsIl9yb3RhdGlvbkRpc2FibGVkIiwiYWx0S2V5IiwibWV0YUtleSIsInpvb21EaXIiLCJiZWFyaW5nRGlyIiwicGl0Y2hEaXIiLCJ4RGlyIiwieURpciIsImVhc2VJZCIsImVhc2VPdXQiLCJkaXNhYmxlUm90YXRpb24iLCJlbmFibGVSb3RhdGlvbiIsIndoZWVsWm9vbURlbHRhIiwiU2Nyb2xsWm9vbUhhbmRsZXIiLCJoYW5kbGVyIiwiX2hhbmRsZXIiLCJfZGVsdGEiLCJfZGVmYXVsdFpvb21SYXRlIiwiX3doZWVsWm9vbVJhdGUiLCJzZXRab29tUmF0ZSIsInpvb21SYXRlIiwic2V0V2hlZWxab29tUmF0ZSIsIndoZWVsWm9vbVJhdGUiLCJfZmluaXNoVGltZW91dCIsImlzWm9vbWluZyIsIl96b29taW5nIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiZGVsdGFZIiwidGltZURlbHRhIiwiX2xhc3RXaGVlbEV2ZW50VGltZSIsIl90eXBlIiwiX2xhc3RWYWx1ZSIsIl90aW1lb3V0IiwiX29uVGltZW91dCIsIl9sYXN0V2hlZWxFdmVudCIsImluaXRpYWxFdmVudCIsIl9mcmFtZUlkIiwiX2Fyb3VuZCIsIl9hcm91bmRQb2ludCIsIl90cmlnZ2VyUmVuZGVyRnJhbWUiLCJyZW5kZXJGcmFtZSIsImV4cCIsIl90YXJnZXRab29tIiwiX3N0YXJ0Wm9vbSIsIl9lYXNpbmciLCJfc21vb3RoT3V0RWFzaW5nIiwidGFyZ2V0Wm9vbSIsInN0YXJ0Wm9vbSIsImZpbmlzaGVkIiwibm9JbmVydGlhIiwibmVlZHNSZW5kZXJGcmFtZSIsIl9lYXNlIiwiX3ByZXZFYXNlIiwiZWFzZSIsIkRvdWJsZUNsaWNrWm9vbUhhbmRsZXIiLCJjbGlja1pvb20iLCJUYXBab29tIiwiX2NsaWNrWm9vbSIsIl90YXBab29tIiwiQ2xpY2tab29tSGFuZGxlciIsIlRhcERyYWdab29tSGFuZGxlciIsIl90YXAiLCJfc3dpcGVQb2ludCIsIl9zd2lwZVRvdWNoIiwiX3RhcFRpbWUiLCJuZXdTd2lwZVBvaW50IiwiRHJhZ1BhbkhhbmRsZXIiLCJtb3VzZVBhbiIsInRvdWNoUGFuIiwiX21vdXNlUGFuIiwiX3RvdWNoUGFuIiwiX2luZXJ0aWFPcHRpb25zIiwiRHJhZ1JvdGF0ZUhhbmRsZXIiLCJtb3VzZVJvdGF0ZSIsIm1vdXNlUGl0Y2giLCJfcGl0Y2hXaXRoUm90YXRlIiwicGl0Y2hXaXRoUm90YXRlIiwiX21vdXNlUm90YXRlIiwiX21vdXNlUGl0Y2giLCJUb3VjaFpvb21Sb3RhdGVIYW5kbGVyIiwidG91Y2hab29tIiwidG91Y2hSb3RhdGUiLCJ0YXBEcmFnWm9vbSIsIl90b3VjaFpvb20iLCJfdG91Y2hSb3RhdGUiLCJfdGFwRHJhZ1pvb20iLCJpc01vdmluZyIsImRyYWciLCJSZW5kZXJGcmFtZUV2ZW50IiwiaGFzQ2hhbmdlIiwiSGFuZGxlck1hbmFnZXIiLCJfaGFuZGxlcnMiLCJfaGFuZGxlcnNCeUlkIiwiX2NoYW5nZXMiLCJfaW5lcnRpYSIsIl9iZWFyaW5nU25hcCIsImJlYXJpbmdTbmFwIiwiX3ByZXZpb3VzQWN0aXZlSGFuZGxlcnMiLCJfZXZlbnRzSW5Qcm9ncmVzcyIsIl9hZGREZWZhdWx0SGFuZGxlcnMiLCJfbGlzdGVuZXJzIiwicGFzc2l2ZSIsImxpc3RlbmVyT3B0aW9ucyIsImhhbmRsZVdpbmRvd0V2ZW50IiwiaGFuZGxlRXZlbnQiLCJib3hab29tIiwidGFwWm9vbSIsImRvdWJsZUNsaWNrWm9vbSIsInRvdWNoUGl0Y2giLCJkcmFnUGFuIiwic2Nyb2xsWm9vbSIsImtleWJvYXJkIiwiaW50ZXJhY3RpdmUiLCJoYW5kbGVyTmFtZSIsInN0b3AiLCJhbGxvd0VuZEFuaW1hdGlvbiIsIl91cGRhdGluZ0NhbWVyYSIsIl9maXJlRXZlbnRzIiwiaXNSb3RhdGluZyIsIl9ibG9ja2VkQnlBY3RpdmUiLCJhY3RpdmVIYW5kbGVycyIsIm15TmFtZSIsIl9nZXRNYXBUb3VjaGVzIiwiZXZlbnROYW1lIiwiaW5wdXRFdmVudCIsIm1lcmdlZEhhbmRsZXJSZXN1bHQiLCJldmVudHNJblByb2dyZXNzIiwiZXZlbnRUb3VjaGVzIiwibWVyZ2VIYW5kbGVyUmVzdWx0IiwiZGVhY3RpdmF0ZWRIYW5kbGVycyIsIl9zdG9wIiwiaGFuZGxlclJlc3VsdCIsImV2ZW50RGF0YSIsIl9hcHBseUNoYW5nZXMiLCJjb21iaW5lZCIsImNvbWJpbmVkRXZlbnRzSW5Qcm9ncmVzcyIsImNvbWJpbmVkRGVhY3RpdmF0ZWRIYW5kbGVycyIsImNoYW5nZSIsIl91cGRhdGVNYXBUcmFuc2Zvcm0iLCJjb21iaW5lZFJlc3VsdCIsIl9kcmFnIiwibmV3RXZlbnRzSW5Qcm9ncmVzcyIsIndhc01vdmluZyIsIm5vd01vdmluZyIsInN0YXJ0RXZlbnRzIiwiZW5kRXZlbnRzIiwib3JpZ2luYWxFbmRFdmVudCIsInN0aWxsTW92aW5nIiwiaW5lcnRpYWxFYXNlIiwic2hvdWxkU25hcFRvTm9ydGgiLCJyZXNldE5vcnRoIiwiX3JlcXVlc3RGcmFtZSIsIl9yZW5kZXJUYXNrUXVldWUiLCJEZWJ1ZyIsImRlc3QiLCJydW4iLCJsb2dUb0VsZW1lbnQiLCJvdmVyd3JpdGUiLCJpbm5lckhUTUwiLCJDYW1lcmEiLCJfbW92aW5nIiwicGFuQnkiLCJwYW5UbyIsInpvb21UbyIsInpvb21JbiIsInpvb21PdXQiLCJnZXRQYWRkaW5nIiwic2V0UGFkZGluZyIsInJvdGF0ZVRvIiwicmVzZXROb3J0aFBpdGNoIiwic25hcFRvTm9ydGgiLCJjYW1lcmFGb3JCb3VuZHMiLCJfY2FtZXJhRm9yQm94QW5kQmVhcmluZyIsImdldE5vcnRoV2VzdCIsImdldFNvdXRoRWFzdCIsImRlZmF1bHRQYWRkaW5nIiwiZWRnZVBhZGRpbmciLCJwMHdvcmxkIiwicDF3b3JsZCIsInAwcm90YXRlZCIsInAxcm90YXRlZCIsInVwcGVyUmlnaHQiLCJsb3dlckxlZnQiLCJzY2FsZVgiLCJzY2FsZVkiLCJyb3RhdGVkUGFkZGluZ09mZnNldCIsIm9mZnNldEF0RmluYWxab29tIiwiZml0Qm91bmRzIiwiX2ZpdEludGVybmFsIiwiY2FsY3VsYXRlZE9wdGlvbnMiLCJmbHlUbyIsInpvb21DaGFuZ2VkIiwiYmVhcmluZ0NoYW5nZWQiLCJwaXRjaENoYW5nZWQiLCJkZWZhdWx0RWFzaW5nIiwiZXNzZW50aWFsIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJzdGFydEJlYXJpbmciLCJzdGFydFBpdGNoIiwic3RhcnRQYWRkaW5nIiwiX25vcm1hbGl6ZUJlYXJpbmciLCJvZmZzZXRBc1BvaW50IiwicG9pbnRBdE9mZnNldCIsImxvY2F0aW9uQXRPZmZzZXQiLCJfbm9ybWFsaXplQ2VudGVyIiwiZmluYWxTY2FsZSIsImFyb3VuZFBvaW50IiwiY3VycmVudGx5IiwiX3JvdGF0aW5nIiwicGl0Y2hpbmciLCJfcGl0Y2hpbmciLCJfcGFkZGluZyIsIl9lYXNlSWQiLCJfcHJlcGFyZUVhc2UiLCJiYXNlIiwic3BlZWR1cCIsIl9maXJlTW92ZUV2ZW50cyIsImludGVycnVwdGluZ0Vhc2VJZCIsIl9hZnRlckVhc2UiLCJ3YXNab29taW5nIiwid2FzUm90YXRpbmciLCJ3YXNQaXRjaGluZyIsImNvZXJjZWRPcHRpb25zIiwiY3VydmUiLCJyaG8iLCJ1MSIsIndNYXgiLCJyaG8yIiwic2luaCIsImNvc2giLCJyMCIsInUiLCJTIiwiaXNGaW5pdGUiLCJzY3JlZW5TcGVlZCIsIm1heER1cmF0aW9uIiwiaXNFYXNpbmciLCJfZWFzZUZyYW1lSWQiLCJhbGxvd0dlc3R1cmVzIiwiX2NhbmNlbFJlbmRlckZyYW1lIiwiX29uRWFzZUZyYW1lIiwiX29uRWFzZUVuZCIsIm9uRWFzZUVuZCIsImhhbmRsZXJzIiwiZmluaXNoIiwiX2Vhc2VTdGFydCIsIl9lYXNlT3B0aW9ucyIsIl9yZXF1ZXN0UmVuZGVyRnJhbWUiLCJfcmVuZGVyRnJhbWVDYWxsYmFjayIsImN1cnJlbnRCZWFyaW5nIiwiZGlmZiIsIkF0dHJpYnV0aW9uQ29udHJvbCIsImdldERlZmF1bHRQb3NpdGlvbiIsIl9jb21wYWN0IiwiY29tcGFjdCIsIl9jb21wYWN0QnV0dG9uIiwiX3RvZ2dsZUF0dHJpYnV0aW9uIiwiX3NldEVsZW1lbnRUaXRsZSIsIl9pbm5lckNvbnRhaW5lciIsIl91cGRhdGVBdHRyaWJ1dGlvbnMiLCJfdXBkYXRlQ29tcGFjdCIsIl91cGRhdGVEYXRhIiwiX3VwZGF0ZUNvbXBhY3RNaW5pbWl6ZSIsIl9hdHRyaWJIVE1MIiwiZWxlbWVudCIsInRpdGxlIiwic3RyIiwiX2dldFVJU3RyaW5nIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0cmlidXRpb25zIiwiY3VzdG9tQXR0cmlidXRpb24iLCJzdHlsZU93bmVyIiwib3duZXIiLCJzdHlsZUlkIiwidHJpbSIsImF0dHJpYiIsImF0dHJpYkhUTUwiLCJfZWRpdExpbmsiLCJvZmZzZXRXaWR0aCIsIkxvZ29Db250cm9sIiwicmVsIiwiZGlzcGxheSIsImNvbnRhaW5lckNoaWxkcmVuIiwiVGFza1F1ZXVlIiwiX3F1ZXVlIiwiX2lkIiwiX2NsZWFyZWQiLCJfY3VycmVudGx5UnVubmluZyIsImNhbmNlbGxlZCIsInJ1bm5pbmciLCJxdWV1ZSIsInRhc2siLCJkZWZhdWx0TG9jYWxlIiwiYXR0cmlidXRpb25Db250cm9sIiwibWFwbGlicmVMb2dvIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwidHJhY2tSZXNpemUiLCJyZWZyZXNoRXhwaXJlZFRpbGVzIiwibWF4VGlsZUNhY2hlU2l6ZSIsIk1hcCIsIlBlcmZvcm1hbmNlVXRpbHMiLCJtYXJrIiwiUGVyZm9ybWFuY2VNYXJrZXJzIiwiX2ludGVyYWN0aXZlIiwiX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJfcHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiX2FudGlhbGlhcyIsIl90cmFja1Jlc2l6ZSIsIl9jcm9zc1NvdXJjZUNvbGxpc2lvbnMiLCJfY3Jvc3NGYWRpbmdGYWN0b3IiLCJfY29udHJvbHMiLCJfbWFwSWQiLCJfbG9jYWxlIiwibG9jYWxlIiwiX3BpeGVsUmF0aW8iLCJIVE1MRWxlbWVudCIsIm1heEJvdW5kcyIsIl9zZXR1cENvbnRhaW5lciIsIl9zZXR1cFBhaW50ZXIiLCJfb25XaW5kb3dPbmxpbmUiLCJfb25XaW5kb3dSZXNpemUiLCJfaGFzaCIsImZpdEJvdW5kc09wdGlvbnMiLCJfbG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5IiwiYWRkQ29udHJvbCIsImxvZ29Qb3NpdGlvbiIsIl9nZXRNYXBJZCIsImNvbnRyb2wiLCJjb250cm9sRWxlbWVudCIsInBvc2l0aW9uQ29udGFpbmVyIiwiX2NvbnRyb2xQb3NpdGlvbnMiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ29udHJvbCIsImNpIiwiaGFzQ29udHJvbCIsImRpbWVuc2lvbnMiLCJfY29udGFpbmVyRGltZW5zaW9ucyIsIl9yZXNpemVDYW52YXMiLCJmaXJlTW92aW5nIiwic2V0UGl4ZWxSYXRpbyIsInNldE1pblpvb20iLCJnZXRNaW5ab29tIiwic2V0TWF4Wm9vbSIsImdldE1heFpvb20iLCJzZXRNaW5QaXRjaCIsImdldE1pblBpdGNoIiwic2V0TWF4UGl0Y2giLCJnZXRNYXhQaXRjaCIsImdldFJlbmRlcldvcmxkQ29waWVzIiwic2V0UmVuZGVyV29ybGRDb3BpZXMiLCJfY3JlYXRlRGVsZWdhdGVkTGlzdGVuZXIiLCJsaXN0ZW5lciIsIm1vdXNlaW4iLCJkZWxlZ2F0ZXMiLCJkZWxlZ2F0ZSIsImxheWVySWRPckxpc3RlbmVyIiwiZGVsZWdhdGVkTGlzdGVuZXIiLCJfZGVsZWdhdGVkTGlzdGVuZXJzIiwib25jZSIsImRlbGVnYXRlZExpc3RlbmVycyIsImxpc3RlbmVycyIsInJlbW92ZURlbGVnYXRlZExpc3RlbmVyIiwiZ2VvbWV0cnkiLCJfZGlmZlN0eWxlIiwiX3VwZGF0ZVN0eWxlIiwiX2xhenlJbml0RW1wdHlTdHlsZSIsIl91cGRhdGVEaWZmIiwiZ2V0U3R5bGUiLCJpc1N0eWxlTG9hZGVkIiwiZ2V0VGVycmFpbiIsImFyZVRpbGVzTG9hZGVkIiwiZXhpc3RpbmdJbWFnZSIsImhhc0ltYWdlIiwibG9hZEltYWdlIiwiYmVmb3JlSWQiLCJfY2FudmFzQ29udGFpbmVyIiwiX2NhbnZhcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiY2FudmFzQ29udGFpbmVyIiwiX2NvbnRleHRMb3N0IiwiX2NvbnRleHRSZXN0b3JlZCIsImNvbnRyb2xDb250YWluZXIiLCJfY29udHJvbENvbnRhaW5lciIsInBvc2l0aW9ucyIsInBvc2l0aW9uTmFtZSIsIl9vbk1hcFNjcm9sbCIsIndlYnBTdXBwb3J0ZWQiLCJ0ZXN0U3VwcG9ydCIsIl9mcmFtZSIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJfc3R5bGVEaXJ0eSIsIl9zb3VyY2VzRGlydHkiLCJ1cGRhdGVTdHlsZSIsIl9yZW5kZXIiLCJwYWludFN0YXJ0VGltZVN0YW1wIiwiZnJhbWVTdGFydFRpbWUiLCJjcm9zc0ZhZGluZyIsImZhY3RvciIsImNyb3NzRmFkaW5nRmFjdG9yIiwiX3BsYWNlbWVudERpcnR5IiwicmVuZGVyQ1BVVGltZSIsInJlbmRlckdQVVRpbWUiLCJmcmFtZUxheWVyUXVlcmllcyIsInJlbmRlcmVkTGF5ZXJUaW1lcyIsImxheWVyVGltZXMiLCJzb21ldGhpbmdEaXJ0eSIsIl9yZXBhaW50IiwiX2Z1bGx5TG9hZGVkIiwiZnVsbExvYWQiLCJyZWRyYXciLCJsb3NlQ29udGV4dCIsImNsZWFyTWV0cmljcyIsIl9zaG93VGlsZUJvdW5kYXJpZXMiLCJfc2hvd1BhZGRpbmciLCJyZXBhaW50IiwidmVydGljZXMiLCJfdmVydGljZXMiLCJfc2V0Q2FjaGVMaW1pdHMiLCJjaGVja1RocmVzaG9sZCIsInNldENhY2hlTGltaXRzIiwic2hvd0NvbXBhc3MiLCJzaG93Wm9vbSIsInZpc3VhbGl6ZVBpdGNoIiwiTW91c2VSb3RhdGVXcmFwcGVyIiwiZG93biIsIm1vdmUiLCJvZmZUZW1wIiwidGFyZ2V0VG91Y2hlcyIsInNtYXJ0V3JhcCIsInByaW9yUG9zIiwiZGlzdFNxciIsImFuY2hvclRyYW5zbGF0ZSIsImFwcGx5QW5jaG9yQ2xhc3MiLCJwcmVmaXgiLCJNYXJrZXIiLCJsZWdhY3lPcHRpb25zIiwiX2FuY2hvciIsIl9jb2xvciIsIl9zY2FsZSIsIl9kcmFnZ2FibGUiLCJkcmFnZ2FibGUiLCJfaXNEcmFnZ2luZyIsIl9yb3RhdGlvbiIsInJvdGF0aW9uIiwiX3JvdGF0aW9uQWxpZ25tZW50IiwiX3BpdGNoQWxpZ25tZW50IiwiX2VsZW1lbnQiLCJfb2Zmc2V0IiwiX2RlZmF1bHRNYXJrZXIiLCJzdmciLCJjcmVhdGVOUyIsImRlZmF1bHRIZWlnaHQiLCJkZWZhdWx0V2lkdGgiLCJzZXRBdHRyaWJ1dGVOUyIsIm1hcmtlckxhcmdlIiwicGFnZTEiLCJlbGxpcHNlcyIsInJ4IiwicnkiLCJlbGxpcHNlIiwiYmdQYXRoIiwiYm9yZGVyIiwiYm9yZGVyUGF0aCIsIm1ha2kiLCJjaXJjbGVDb250YWluZXIiLCJjaXJjbGUxIiwiY2lyY2xlMiIsIl9wb3B1cCIsInNldERyYWdnYWJsZSIsIl9vbk1hcENsaWNrIiwiX29wYWNpdHlUaW1lb3V0IiwiX2FkZERyYWdIYW5kbGVyIiwiX29uVXAiLCJfb25Nb3ZlIiwiZ2V0TG5nTGF0IiwiX2xuZ0xhdCIsInNldExuZ0xhdCIsIl9wb3MiLCJnZXRFbGVtZW50Iiwic2V0UG9wdXAiLCJwb3B1cCIsIl9vbktleVByZXNzIiwiX29yaWdpbmFsVGFiSW5kZXgiLCJtYXJrZXJIZWlnaHQiLCJtYXJrZXJSYWRpdXMiLCJsaW5lYXJPZmZzZXQiLCJnZXRBdHRyaWJ1dGUiLCJjb2RlIiwibGVnYWN5Q29kZSIsImNoYXJDb2RlIiwidG9nZ2xlUG9wdXAiLCJ0YXJnZXRFbGVtZW50IiwiZ2V0UG9wdXAiLCJpc09wZW4iLCJtZXRyZXNQZXJQaXhlbCIsImRpc3RhbmNlVG8iLCJnZXRPZmZzZXQiLCJzZXRPZmZzZXQiLCJfcG9pbnRlcmRvd25Qb3MiLCJfcG9zaXRpb25EZWx0YSIsInBvaW50ZXJFdmVudHMiLCJzaG91bGRCZURyYWdnYWJsZSIsImlzRHJhZ2dhYmxlIiwic2V0Um90YXRpb24iLCJnZXRSb3RhdGlvbiIsInNldFJvdGF0aW9uQWxpZ25tZW50IiwiYWxpZ25tZW50IiwiZ2V0Um90YXRpb25BbGlnbm1lbnQiLCJzZXRQaXRjaEFsaWdubWVudCIsImdldFBpdGNoQWxpZ25tZW50IiwicG9zaXRpb25PcHRpb25zIiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwibWF4aW11bUFnZSIsInRyYWNrVXNlckxvY2F0aW9uIiwic2hvd0FjY3VyYWN5Q2lyY2xlIiwic2hvd1VzZXJMb2NhdGlvbiIsInN1cHBvcnRzR2VvbG9jYXRpb24iLCJudW1iZXJPZldhdGNoZXMiLCJub1RpbWVvdXQiLCJtYXhXaWR0aCIsInVuaXQiLCJ1cGRhdGVTY2FsZSIsIm1heE1ldGVycyIsIm1heEZlZXQiLCJzZXRTY2FsZSIsIm1heERpc3RhbmNlIiwicG93MTAiLCJtdWx0aXBsaWVyIiwiZ2V0RGVjaW1hbFJvdW5kTnVtIiwiZ2V0Um91bmROdW0iLCJjbG9zZUJ1dHRvbiIsImNsb3NlT25DbGljayIsImZvY3VzQWZ0ZXJPcGVuIiwiZm9jdXNRdWVyeVNlbGVjdG9yIiwibm9ybWFsaXplT2Zmc2V0IiwiY29ybmVyT2Zmc2V0IiwiY29udmVydGVkT2Zmc2V0IiwiZXhwb3J0ZWQiLCJzZXRSVExUZXh0UGx1Z2luIiwiZ2V0UlRMVGV4dFBsdWdpblN0YXR1cyIsIk5hdmlnYXRpb25Db250cm9sIiwiX3pvb21JbkJ1dHRvbiIsIl9jcmVhdGVCdXR0b24iLCJfem9vbU91dEJ1dHRvbiIsIl9jb21wYXNzIiwiX2NvbXBhc3NJY29uIiwiX3VwZGF0ZVpvb21CdXR0b25zIiwiaXNNYXgiLCJpc01pbiIsIl9yb3RhdGVDb21wYXNzQXJyb3ciLCJfc2V0QnV0dG9uVGl0bGUiLCJHZW9sb2NhdGVDb250cm9sIiwiX3NldHVwVUkiLCJuYXZpZ2F0b3IiLCJwZXJtaXNzaW9ucyIsInRoZW4iLCJnZW9sb2NhdGlvbiIsIl9nZW9sb2NhdGlvbldhdGNoSUQiLCJjbGVhcldhdGNoIiwiX3VzZXJMb2NhdGlvbkRvdE1hcmtlciIsIl9hY2N1cmFjeUNpcmNsZU1hcmtlciIsIl9vblpvb20iLCJfaXNPdXRPZk1hcE1heEJvdW5kcyIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwiX3NldEVycm9yU3RhdGUiLCJfd2F0Y2hTdGF0ZSIsIl9nZW9sb2NhdGVCdXR0b24iLCJfb25TdWNjZXNzIiwiX3VwZGF0ZU1hcmtlciIsIl9maW5pc2giLCJfbGFzdEtub3duUG9zaXRpb24iLCJfdXBkYXRlQ2FtZXJhIiwiX2RvdEVsZW1lbnQiLCJhY2N1cmFjeSIsInRvQm91bmRzIiwiZ2VvbG9jYXRlU291cmNlIiwiX2FjY3VyYWN5IiwiX3VwZGF0ZUNpcmNsZVJhZGl1cyIsIm1ldGVyc1BlclBpeGVsIiwiY2lyY2xlRGlhbWV0ZXIiLCJfY2lyY2xlRWxlbWVudCIsIl9vbkVycm9yIiwiX2NsZWFyV2F0Y2giLCJfdGltZW91dElkIiwidHJpZ2dlciIsIl9zZXR1cCIsIndhdGNoUG9zaXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJTY2FsZUNvbnRyb2wiLCJzZXRVbml0IiwiRnVsbHNjcmVlbkNvbnRyb2wiLCJfZnVsbHNjcmVlbiIsIl9mdWxsc2NyZWVuY2hhbmdlIiwiX2NoZWNrRnVsbHNjcmVlblN1cHBvcnQiLCJfY2hhbmdlSWNvbiIsImZ1bGxzY3JlZW5FbmFibGVkIiwibW96RnVsbFNjcmVlbkVuYWJsZWQiLCJtc0Z1bGxzY3JlZW5FbmFibGVkIiwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWQiLCJfZnVsbHNjcmVlbkJ1dHRvbiIsIl91cGRhdGVUaXRsZSIsIl9vbkNsaWNrRnVsbHNjcmVlbiIsIl9nZXRUaXRsZSIsIl9pc0Z1bGxzY3JlZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwidG9nZ2xlIiwiZXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsIndlYmtpdENhbmNlbEZ1bGxTY3JlZW4iLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwiVGVycmFpbkNvbnRyb2wiLCJfdGVycmFpbkJ1dHRvbiIsIl90b2dnbGVUZXJyYWluIiwiX3VwZGF0ZVRlcnJhaW5JY29uIiwiUG9wdXAiLCJfb25DbG9zZSIsImNsb3NlT25Nb3ZlIiwiX2ZvY3VzRmlyc3RFbGVtZW50IiwiX3RyYWNrUG9pbnRlciIsIl9vbk1vdXNlTW92ZSIsIl9vbk1vdXNlVXAiLCJfY29udGVudCIsIl9vbkRyYWciLCJ0cmFja1BvaW50ZXIiLCJzZXRUZXh0Iiwic2V0RE9NQ29udGVudCIsImNyZWF0ZVRleHROb2RlIiwic2V0SFRNTCIsImh0bWwiLCJmcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInRlbXAiLCJjaGlsZCIsImdldE1heFdpZHRoIiwic2V0TWF4V2lkdGgiLCJodG1sTm9kZSIsImhhc0NoaWxkTm9kZXMiLCJfY3JlYXRlQ2xvc2VCdXR0b24iLCJhZGRDbGFzc05hbWUiLCJyZW1vdmVDbGFzc05hbWUiLCJ0b2dnbGVDbGFzc05hbWUiLCJfY2xvc2VCdXR0b24iLCJjdXJzb3IiLCJfdGlwIiwib2Zmc2V0SGVpZ2h0IiwiYW5jaG9yQ29tcG9uZW50cyIsIm9mZnNldGVkUG9zIiwiZmlyc3RGb2N1c2FibGUiLCJxdWVyeVNlbGVjdG9yIiwiZm9jdXMiLCJBSkFYRXJyb3IiLCJjb25maWciLCJwcmV3YXJtIiwiY2xlYXJQcmV3YXJtZWRSZXNvdXJjZXMiLCJwb29sIiwibWF4UGFyYWxsZWxJbWFnZVJlcXVlc3RzIiwiTUFYX1BBUkFMTEVMX0lNQUdFX1JFUVVFU1RTIiwibnVtUmVxdWVzdHMiLCJjbGVhclN0b3JhZ2UiLCJjbGVhclRpbGVDYWNoZSIsImFkZFByb3RvY29sIiwiY3VzdG9tUHJvdG9jb2wiLCJsb2FkRm4iLCJSRUdJU1RFUkVEX1BST1RPQ09MUyIsInJlbW92ZVByb3RvY29sIiwiaXNTYWZhcmkiLCJnZXRQZXJmb3JtYW5jZU1ldHJpY3MiLCJCZW5jaG1hcmsiLCJiZW5jaCIsInRlYXJkb3duIiwiYXN5bmMiLCJfYmVnaW4iLCJfZWxhcHNlZCIsIl9tZWFzdXJlbWVudHMiLCJfaXRlcmF0aW9uc1Blck1lYXN1cmVtZW50IiwicGVyZm9ybWFuY2UiLCJQcm9taXNlIiwiX21lYXN1cmVBc3luYyIsIl9tZWFzdXJlU3luYyIsIml0ZXJhdGlvbnMiLCJfZW5kIiwiX3J1bkFzeW5jIiwicmVzb2x2ZSIsImZldGNoU3R5bGUiLCJmZXRjaCIsIlN0dWJNYXAiLCJUaWxlUGFyc2VyIiwic3R5bGVKU09OIiwiU3R5bGVMYXllckluZGV4IiwibG9hZEltYWdlcyIsImxvYWRHbHlwaHMiLCJwYXJzZXIiLCJyZWplY3QiLCJtYXBTdHViIiwiZmV0Y2hUaWxlIiwicGFyc2VUaWxlIiwicmV0dXJuRGVwZW5kZW5jaWVzIiwid29ya2VyVGlsZSIsIldvcmtlclRpbGUiLCJ2ZWN0b3JUaWxlIiwiVlQiLCJWZWN0b3JUaWxlIiwiUHJvdG9idWYiLCJwYXJzZSIsIkxheW91dCIsInByb21pc2UiLCJjcmVhdGVNYXAiLCJzdHViUmVuZGVyIiwic2hvd01hcCIsIm1hcmdpbiIsInZpc2liaWxpdHkiLCJib2R5IiwiYXNzaWduIiwiaWRsZSIsIlBhaW50IiwibWFwcyIsImNhdGNoIiwiZGVzY3JpcHRpb24iLCJiZW5jaG1hcmtzIiwicmVnaXN0ZXIiLCJ2ZXJzaW9ucyIsInByb2Nlc3MiXSwibWFwcGluZ3MiOiI4Q0FFQUEsTUFBb0JDLEVBV3BCLFNBQVNBLEVBQVlDLEdBQ2pCLE9BR0osU0FBNEJBLEdBQ3hCLE1BY3lCLG9CQUFYQyxRQUE4QyxvQkFBYkMsU0FkdEIsZ0JBbUJyQkMsTUFBTUMsV0FDTkQsTUFBTUMsVUFBVUMsT0FDaEJGLE1BQU1DLFVBQVVFLFFBQ2hCSCxNQUFNQyxVQUFVRyxTQUNoQkosTUFBTUMsVUFBVUksU0FDaEJMLE1BQU1DLFVBQVVLLGFBQ2hCTixNQUFNQyxVQUFVTSxLQUNoQlAsTUFBTUMsVUFBVU8sTUFDaEJSLE1BQU1DLFVBQVVRLFFBQ2hCVCxNQUFNQyxVQUFVUyxhQUNoQlYsTUFBTVcsUUFLSEMsU0FBU1gsV0FBYVcsU0FBU1gsVUFBVVksS0FLNUNDLE9BQU9DLE1BQ1BELE9BQU9FLFFBQ1BGLE9BQU9HLGdCQUNQSCxPQUFPSSxxQkFDUEosT0FBT0ssVUFDUEwsT0FBT00sVUFDUE4sT0FBT08sY0FDUFAsT0FBT1EsMEJBQ1BSLE9BQU9TLGdCQUNQVCxPQUFPVSxrQkFDUFYsT0FBT1cs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
