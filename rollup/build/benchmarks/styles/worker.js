define(["./shared"],(function(e){"use strict";function t(t,r){const n=e.getArrayBuffer(t.request,((t,n,o,i)=>{t?r(t):n&&r(null,{vectorTile:new e.vectorTile.VectorTile(new e.pbf(n)),rawData:n,cacheControl:o,expires:i})}));return()=>{n.cancel(),r()}}class r{constructor(e,r,n,o){this.actor=e,this.layerIndex=r,this.availableImages=n,this.loadVectorData=o||t,this.loading={},this.loaded={}}loadTile(t,r){const n=t.uid;this.loading||(this.loading={});const o=!!(t&&t.request&&t.request.collectResourceTiming)&&new e.RequestPerformance(t.request),i=this.loading[n]=new e.WorkerTile(t);i.abort=this.loadVectorData(t,((t,s)=>{if(delete this.loading[n],t||!s)return i.status="done",this.loaded[n]=i,r(t);const a=s.rawData,u={};s.expires&&(u.expires=s.expires),s.cacheControl&&(u.cacheControl=s.cacheControl);const l={};if(o){const e=o.finish();e&&(l.resourceTiming=JSON.parse(JSON.stringify(e)))}i.vectorTile=s.vectorTile,i.parse(s.vectorTile,this.layerIndex,this.availableImages,this.actor,((t,n)=>{if(t||!n)return r(t);r(null,e.extend({rawTileData:a.slice(0)},n,u,l))})),this.loaded=this.loaded||{},this.loaded[n]=i}))}reloadTile(e,t){const r=this.loaded,n=e.uid,o=this;if(r&&r[n]){const i=r[n];i.showCollisionBoxes=e.showCollisionBoxes;const s=(e,r)=>{const n=i.reloadCallback;n&&(delete i.reloadCallback,i.parse(i.vectorTile,o.layerIndex,this.availableImages,o.actor,n)),t(e,r)};"parsing"===i.status?i.reloadCallback=s:"done"===i.status&&(i.vectorTile?i.parse(i.vectorTile,this.layerIndex,this.availableImages,this.actor,s):s())}}abortTile(e,t){const r=this.loading,n=e.uid;r&&r[n]&&r[n].abort&&(r[n].abort(),delete r[n]),t()}removeTile(e,t){const r=this.loaded,n=e.uid;r&&r[n]&&delete r[n],t()}}var n={exports:{}},o=e.pointGeometry,i=e.vectorTile.VectorTileFeature,s=a;function a(e,t){this.options=t||{},this.features=e,this.length=e.length}function u(e,t){this.id="number"==typeof e.id?e.id:void 0,this.type=e.type,this.rawGeometry=1===e.type?[e.geometry]:e.geometry,this.properties=e.tags,this.extent=t||4096}a.prototype.feature=function(e){return new u(this.features[e],this.options.extent)},u.prototype.loadGeometry=function(){var e=this.rawGeometry;this.geometry=[];for(var t=0;t<e.length;t++){for(var r=e[t],n=[],i=0;i<r.length;i++)n.push(new o(r[i][0],r[i][1]));this.geometry.push(n)}return this.geometry},u.prototype.bbox=function(){this.geometry||this.loadGeometry();for(var e=this.geometry,t=1/0,r=-1/0,n=1/0,o=-1/0,i=0;i<e.length;i++)for(var s=e[i],a=0;a<s.length;a++){var u=s[a];t=Math.min(t,u.x),r=Math.max(r,u.x),n=Math.min(n,u.y),o=Math.max(o,u.y)}return[t,n,r,o]},u.prototype.toGeoJSON=i.prototype.toGeoJSON;var l=e.pbf,c=s;function f(e){var t=new l;return function(e,t){for(var r in e.layers)t.writeMessage(3,h,e.layers[r])}(e,t),t.finish()}function h(e,t){var r;t.writeVarintField(15,e.version||1),t.writeStringField(1,e.name||""),t.writeVarintField(5,e.extent||4096);var n={keys:[],values:[],keycache:{},valuecache:{}};for(r=0;r<e.length;r++)n.feature=e.feature(r),t.writeMessage(2,p,n);var o=n.keys;for(r=0;r<o.length;r++)t.writeStringField(3,o[r]);var i=n.values;for(r=0;r<i.length;r++)t.writeMessage(4,v,i[r])}function p(e,t){var r=e.feature;void 0!==r.id&&t.writeVarintField(1,r.id),t.writeMessage(2,g,e),t.writeVarintField(3,r.type),t.writeMessage(4,y,r)}function g(e,t){var r=e.feature,n=e.keys,o=e.values,i=e.keycache,s=e.valuecache;for(var a in r.properties){var u=r.properties[a],l=i[a];if(null!==u){void 0===l&&(n.push(a),i[a]=l=n.length-1),t.writeVarint(l);var c=typeof u;"string"!==c&&"boolean"!==c&&"number"!==c&&(u=JSON.stringify(u));var f=c+":"+u,h=s[f];void 0===h&&(o.push(u),s[f]=h=o.length-1),t.writeVarint(h)}}}function d(e,t){return(t<<3)+(7&e)}function m(e){return e<<1^e>>31}function y(e,t){for(var r=e.loadGeometry(),n=e.type,o=0,i=0,s=r.length,a=0;a<s;a++){var u=r[a],l=1;1===n&&(l=u.length),t.writeVarint(d(1,l));for(var c=3===n?u.length-1:u.length,f=0;f<c;f++){1===f&&1!==n&&t.writeVarint(d(2,c-1));var h=u[f].x-o,p=u[f].y-i;t.writeVarint(m(h)),t.writeVarint(m(p)),o+=h,i+=p}3===n&&t.writeVarint(d(7,1))}}function v(e,t){var r=typeof e;"string"===r?t.writeStringField(1,e):"boolean"===r?t.writeBooleanField(7,e):"number"===r&&(e%1!=0?t.writeDoubleField(3,e):e<0?t.writeSVarintField(6,e):t.writeVarintField(5,e))}n.exports=f,n.exports.fromVectorTileJs=f,n.exports.fromGeojsonVt=function(e,t){t=t||{};var r={};for(var n in e)r[n]=new c(e[n].features,t),r[n].name=n,r[n].version=t.version,r[n].extent=t.extent;return f({layers:r})},n.exports.GeoJSONWrapper=c;var b=n.exports;function x(e,t,r,n){for(var o,i=n,s=r-t>>1,a=r-t,u=e[t],l=e[t+1],c=e[r],f=e[r+1],h=t+3;h<r;h+=3){var p=w(e[h],e[h+1],u,l,c,f);if(p>i)o=h,i=p;else if(p===i){var g=Math.abs(h-s);g<a&&(o=h,a=g)}}i>n&&(o-t>3&&x(e,t,o,n),e[o+2]=i,r-o>3&&x(e,o,r,n))}function w(e,t,r,n,o,i){var s=o-r,a=i-n;if(0!==s||0!==a){var u=((e-r)*s+(t-n)*a)/(s*s+a*a);u>1?(r=o,n=i):u>0&&(r+=s*u,n+=a*u)}return(s=e-r)*s+(a=t-n)*a}function S(e,t,r,n){var o={id:void 0===e?null:e,type:t,geometry:r,tags:n,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};return function(e){var t=e.geometry,r=e.type;if("Point"===r||"MultiPoint"===r||"LineString"===r)M(e,t);else if("Polygon"===r||"MultiLineString"===r)for(var n=0;n<t.length;n++)M(e,t[n]);else if("MultiPolygon"===r)for(n=0;n<t.length;n++)for(var o=0;o<t[n].length;o++)M(e,t[n][o])}(o),o}function M(e,t){for(var r=0;r<t.length;r+=3)e.minX=Math.min(e.minX,t[r]),e.minY=Math.min(e.minY,t[r+1]),e.maxX=Math.max(e.maxX,t[r]),e.maxY=Math.max(e.maxY,t[r+1])}function T(e,t,r,n){if(t.geometry){var o=t.geometry.coordinates,i=t.geometry.type,s=Math.pow(r.tolerance/((1<<r.maxZoom)*r.extent),2),a=[],u=t.id;if(r.promoteId?u=t.properties[r.promoteId]:r.generateId&&(u=n||0),"Point"===i)O(o,a);else if("MultiPoint"===i)for(var l=0;l<o.length;l++)O(o[l],a);else if("LineString"===i)I(o,a,s,!1);else if("MultiLineString"===i){if(r.lineMetrics){for(l=0;l<o.length;l++)I(o[l],a=[],s,!1),e.push(S(u,"LineString",a,t.properties));return}P(o,a,s,!1)}else if("Polygon"===i)P(o,a,s,!0);else{if("MultiPolygon"!==i){if("GeometryCollection"===i){for(l=0;l<t.geometry.geometries.length;l++)T(e,{id:u,geometry:t.geometry.geometries[l],properties:t.properties},r,n);return}throw new Error("Input data is not a valid GeoJSON object.")}for(l=0;l<o.length;l++){var c=[];P(o[l],c,s,!0),a.push(c)}}e.push(S(u,i,a,t.properties))}}function O(e,t){t.push(E(e[0])),t.push(C(e[1])),t.push(0)}function I(e,t,r,n){for(var o,i,s=0,a=0;a<e.length;a++){var u=E(e[a][0]),l=C(e[a][1]);t.push(u),t.push(l),t.push(0),a>0&&(s+=n?(o*l-u*i)/2:Math.sqrt(Math.pow(u-o,2)+Math.pow(l-i,2))),o=u,i=l}var c=t.length-3;t[2]=1,x(t,0,c,r),t[c+2]=1,t.size=Math.abs(s),t.start=0,t.end=t.size}function P(e,t,r,n){for(var o=0;o<e.length;o++){var i=[];I(e[o],i,r,n),t.push(i)}}function E(e){return e/360+.5}function C(e){var t=Math.sin(e*Math.PI/180),r=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return r<0?0:r>1?1:r}function k(e,t,r,n,o,i,s,a){if(n/=t,i>=(r/=t)&&s<n)return e;if(s<r||i>=n)return null;for(var u=[],l=0;l<e.length;l++){var c=e[l],f=c.geometry,h=c.type,p=0===o?c.minX:c.minY,g=0===o?c.maxX:c.maxY;if(p>=r&&g<n)u.push(c);else if(!(g<r||p>=n)){var d=[];if("Point"===h||"MultiPoint"===h)_(f,d,r,n,o);else if("LineString"===h)j(f,d,r,n,o,!1,a.lineMetrics);else if("MultiLineString"===h)N(f,d,r,n,o,!1);else if("Polygon"===h)N(f,d,r,n,o,!0);else if("MultiPolygon"===h)for(var m=0;m<f.length;m++){var y=[];N(f[m],y,r,n,o,!0),y.length&&d.push(y)}if(d.length){if(a.lineMetrics&&"LineString"===h){for(m=0;m<d.length;m++)u.push(S(c.id,h,d[m],c.tags));continue}"LineString"!==h&&"MultiLineString"!==h||(1===d.length?(h="LineString",d=d[0]):h="MultiLineString"),"Point"!==h&&"MultiPoint"!==h||(h=3===d.length?"Point":"MultiPoint"),u.push(S(c.id,h,d,c.tags))}}}return u.length?u:null}function _(e,t,r,n,o){for(var i=0;i<e.length;i+=3){var s=e[i+o];s>=r&&s<=n&&(t.push(e[i]),t.push(e[i+1]),t.push(e[i+2]))}}function j(e,t,r,n,o,i,s){for(var a,u,l=L(e),c=0===o?R:F,f=e.start,h=0;h<e.length-3;h+=3){var p=e[h],g=e[h+1],d=e[h+2],m=e[h+3],y=e[h+4],v=0===o?p:g,b=0===o?m:y,x=!1;s&&(a=Math.sqrt(Math.pow(p-m,2)+Math.pow(g-y,2))),v<r?b>r&&(u=c(l,p,g,m,y,r),s&&(l.start=f+a*u)):v>n?b<n&&(u=c(l,p,g,m,y,n),s&&(l.start=f+a*u)):A(l,p,g,d),b<r&&v>=r&&(u=c(l,p,g,m,y,r),x=!0),b>n&&v<=n&&(u=c(l,p,g,m,y,n),x=!0),!i&&x&&(s&&(l.end=f+a*u),t.push(l),l=L(e)),s&&(f+=a)}var w=e.length-3;p=e[w],g=e[w+1],d=e[w+2],(v=0===o?p:g)>=r&&v<=n&&A(l,p,g,d),w=l.length-3,i&&w>=3&&(l[w]!==l[0]||l[w+1]!==l[1])&&A(l,l[0],l[1],l[2]),l.length&&t.push(l)}function L(e){var t=[];return t.size=e.size,t.start=e.start,t.end=e.end,t}function N(e,t,r,n,o,i){for(var s=0;s<e.length;s++)j(e[s],t,r,n,o,i,!1)}function A(e,t,r,n){e.push(t),e.push(r),e.push(n)}function R(e,t,r,n,o,i){var s=(i-t)/(n-t);return e.push(i),e.push(r+(o-r)*s),e.push(1),s}function F(e,t,r,n,o,i){var s=(i-r)/(o-r);return e.push(t+(n-t)*s),e.push(i),e.push(1),s}function z(e,t){for(var r=[],n=0;n<e.length;n++){var o,i=e[n],s=i.type;if("Point"===s||"MultiPoint"===s||"LineString"===s)o=G(i.geometry,t);else if("MultiLineString"===s||"Polygon"===s){o=[];for(var a=0;a<i.geometry.length;a++)o.push(G(i.geometry[a],t))}else if("MultiPolygon"===s)for(o=[],a=0;a<i.geometry.length;a++){for(var u=[],l=0;l<i.geometry[a].length;l++)u.push(G(i.geometry[a][l],t));o.push(u)}r.push(S(i.id,s,o,i.tags))}return r}function G(e,t){var r=[];r.size=e.size,void 0!==e.start&&(r.start=e.start,r.end=e.end);for(var n=0;n<e.length;n+=3)r.push(e[n]+t,e[n+1],e[n+2]);return r}function B(e,t){if(e.transformed)return e;var r,n,o,i=1<<e.z,s=e.x,a=e.y;for(r=0;r<e.features.length;r++){var u=e.features[r],l=u.geometry,c=u.type;if(u.geometry=[],1===c)for(n=0;n<l.length;n+=2)u.geometry.push(V(l[n],l[n+1],t,i,s,a));else for(n=0;n<l.length;n++){var f=[];for(o=0;o<l[n].length;o+=2)f.push(V(l[n][o],l[n][o+1],t,i,s,a));u.geometry.push(f)}}return e.transformed=!0,e}function V(e,t,r,n,o,i){return[Math.round(r*(e*n-o)),Math.round(r*(t*n-i))]}function D(e,t,r,n,o){for(var i=t===o.maxZoom?0:o.tolerance/((1<<t)*o.extent),s={features:[],numPoints:0,numSimplified:0,numFeatures:0,source:null,x:r,y:n,z:t,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0},a=0;a<e.length;a++){s.numFeatures++,q(s,e[a],i,o);var u=e[a].minX,l=e[a].minY,c=e[a].maxX,f=e[a].maxY;u<s.minX&&(s.minX=u),l<s.minY&&(s.minY=l),c>s.maxX&&(s.maxX=c),f>s.maxY&&(s.maxY=f)}return s}function q(e,t,r,n){var o=t.geometry,i=t.type,s=[];if("Point"===i||"MultiPoint"===i)for(var a=0;a<o.length;a+=3)s.push(o[a]),s.push(o[a+1]),e.numPoints++,e.numSimplified++;else if("LineString"===i)Y(s,o,e,r,!1,!1);else if("MultiLineString"===i||"Polygon"===i)for(a=0;a<o.length;a++)Y(s,o[a],e,r,"Polygon"===i,0===a);else if("MultiPolygon"===i)for(var u=0;u<o.length;u++){var l=o[u];for(a=0;a<l.length;a++)Y(s,l[a],e,r,!0,0===a)}if(s.length){var c=t.tags||null;if("LineString"===i&&n.lineMetrics){for(var f in c={},t.tags)c[f]=t.tags[f];c.mapbox_clip_start=o.start/o.size,c.mapbox_clip_end=o.end/o.size}var h={geometry:s,type:"Polygon"===i||"MultiPolygon"===i?3:"LineString"===i||"MultiLineString"===i?2:1,tags:c};null!==t.id&&(h.id=t.id),e.features.push(h)}}function Y(e,t,r,n,o,i){var s=n*n;if(n>0&&t.size<(o?s:n))r.numPoints+=t.length/3;else{for(var a=[],u=0;u<t.length;u+=3)(0===n||t[u+2]>s)&&(r.numSimplified++,a.push(t[u]),a.push(t[u+1])),r.numPoints++;o&&function(e,t){for(var r=0,n=0,o=e.length,i=o-2;n<o;i=n,n+=2)r+=(e[n]-e[i])*(e[n+1]+e[i+1]);if(r>0===t)for(n=0,o=e.length;n<o/2;n+=2){var s=e[n],a=e[n+1];e[n]=e[o-2-n],e[n+1]=e[o-1-n],e[o-2-n]=s,e[o-1-n]=a}}(a,i),e.push(a)}}function J(e,t){return new Z(e,t)}function Z(e,t){var r=(t=this.options=function(e,t){for(var r in t)e[r]=t[r];return e}(Object.create(this.options),t)).debug;if(r&&console.time("preprocess data"),t.maxZoom<0||t.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");if(t.promoteId&&t.generateId)throw new Error("promoteId and generateId cannot be used together.");var n=function(e,t){var r=[];if("FeatureCollection"===e.type)for(var n=0;n<e.features.length;n++)T(r,e.features[n],t,n);else T(r,"Feature"===e.type?e:{geometry:e},t);return r}(e,t);this.tiles={},this.tileCoords=[],r&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",t.indexMaxZoom,t.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),n=function(e,t){var r=t.buffer/t.extent,n=e,o=k(e,1,-1-r,r,0,-1,2,t),i=k(e,1,1-r,2+r,0,-1,2,t);return(o||i)&&(n=k(e,1,-r,1+r,0,-1,2,t)||[],o&&(n=z(o,1).concat(n)),i&&(n=n.concat(z(i,-1)))),n}(n,t),n.length&&this.splitTile(n,0,0,0),r&&(n.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}function X(e,t,r){return 32*((1<<e)*r+t)+e}Z.prototype.options={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,lineMetrics:!1,promoteId:null,generateId:!1,debug:0},Z.prototype.splitTile=function(e,t,r,n,o,i,s){for(var a=[e,t,r,n],u=this.options,l=u.debug;a.length;){n=a.pop(),r=a.pop(),t=a.pop(),e=a.pop();var c=1<<t,f=X(t,r,n),h=this.tiles[f];if(!h&&(l>1&&console.time("creation"),h=this.tiles[f]=D(e,t,r,n,u),this.tileCoords.push({z:t,x:r,y:n}),l)){l>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",t,r,n,h.numFeatures,h.numPoints,h.numSimplified),console.timeEnd("creation"));var p="z"+t;this.stats[p]=(this.stats[p]||0)+1,this.total++}if(h.source=e,o){if(t===u.maxZoom||t===o)continue;var g=1<<o-t;if(r!==Math.floor(i/g)||n!==Math.floor(s/g))continue}else if(t===u.indexMaxZoom||h.numPoints<=u.indexMaxPoints)continue;if(h.source=null,0!==e.length){l>1&&console.time("clipping");var d,m,y,v,b,x,w=.5*u.buffer/u.extent,S=.5-w,M=.5+w,T=1+w;d=m=y=v=null,b=k(e,c,r-w,r+M,0,h.minX,h.maxX,u),x=k(e,c,r+S,r+T,0,h.minX,h.maxX,u),e=null,b&&(d=k(b,c,n-w,n+M,1,h.minY,h.maxY,u),m=k(b,c,n+S,n+T,1,h.minY,h.maxY,u),b=null),x&&(y=k(x,c,n-w,n+M,1,h.minY,h.maxY,u),v=k(x,c,n+S,n+T,1,h.minY,h.maxY,u),x=null),l>1&&console.timeEnd("clipping"),a.push(d||[],t+1,2*r,2*n),a.push(m||[],t+1,2*r,2*n+1),a.push(y||[],t+1,2*r+1,2*n),a.push(v||[],t+1,2*r+1,2*n+1)}}},Z.prototype.getTile=function(e,t,r){var n=this.options,o=n.extent,i=n.debug;if(e<0||e>24)return null;var s=1<<e,a=X(e,t=(t%s+s)%s,r);if(this.tiles[a])return B(this.tiles[a],o);i>1&&console.log("drilling down to z%d-%d-%d",e,t,r);for(var u,l=e,c=t,f=r;!u&&l>0;)l--,c=Math.floor(c/2),f=Math.floor(f/2),u=this.tiles[X(l,c,f)];return u&&u.source?(i>1&&console.log("found parent tile z%d-%d-%d",l,c,f),i>1&&console.time("drilling down"),this.splitTile(u.source,l,c,f,e,t,r),i>1&&console.timeEnd("drilling down"),this.tiles[a]?B(this.tiles[a],o):null):null};const W=e.vectorTile.VectorTileFeature.prototype.toGeoJSON;class ${constructor(t,r=e.EXTENT){this._feature=t,this.extent=r,this.type=t.type,this.properties=t.tags,"id"in t&&!isNaN(t.id)&&(this.id=parseInt(t.id,10))}loadGeometry(){if(1===this._feature.type){const t=[];for(const r of this._feature.geometry)t.push([new e.pointGeometry(r[0],r[1])]);return t}{const t=[];for(const r of this._feature.geometry){const n=[];for(const t of r)n.push(new e.pointGeometry(t[0],t[1]));t.push(n)}return t}}toGeoJSON(e,t,r){return W.call(this,e,t,r)}}class U{constructor(t,r){const{name:n="_geojsonTileLayer",extent:o=e.EXTENT}=r||{};this.layers={[n]:this},this.name=n,this.extent=o,this.length=t.length,this._features=t}feature(e){return new $(this._features[e],this.extent)}}class H{constructor(t,r){const{extent:n=e.EXTENT}=r||{},o={};Object.keys(t).forEach((e=>{o[e]=new U(t[e].features,{name:e,extent:n})})),this.layers=o}}var K="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},Q=function(e){return e&&e.Math==Math&&e},ee=Q("object"==typeof globalThis&&globalThis)||Q("object"==typeof window&&window)||Q("object"==typeof self&&self)||Q("object"==typeof K&&K)||function(){return this}()||Function("return this")(),te={},re=function(e){try{return!!e()}catch(e){return!0}},ne=!re((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),oe=!re((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")})),ie=Function.prototype.call,se=oe?ie.bind(ie):function(){return ie.apply(ie,arguments)},ae={},ue={}.propertyIsEnumerable,le=Object.getOwnPropertyDescriptor,ce=le&&!ue.call({1:2},1);ae.f=ce?function(e){var t=le(this,e);return!!t&&t.enumerable}:ue;var fe,he,pe=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},ge=oe,de=Function.prototype,me=de.call,ye=ge&&de.bind.bind(me,me),ve=ge?function(e){return e&&ye(e)}:function(e){return e&&function(){return me.apply(e,arguments)}},be=ve,xe=be({}.toString),we=be("".slice),Se=function(e){return we(xe(e),8,-1)},Me=re,Te=Se,Oe=ee.Object,Ie=ve("".split),Pe=Me((function(){return!Oe("z").propertyIsEnumerable(0)}))?function(e){return"String"==Te(e)?Ie(e,""):Oe(e)}:Oe,Ee=ee.TypeError,Ce=function(e){if(null==e)throw Ee("Can't call method on "+e);return e},ke=Pe,_e=Ce,je=function(e){return ke(_e(e))},Le=function(e){return"function"==typeof e},Ne=Le,Ae=function(e){return"object"==typeof e?null!==e:Ne(e)},Re=ee,Fe=Le,ze=function(e){return Fe(e)?e:void 0},Ge=function(e,t){return arguments.length<2?ze(Re[e]):Re[e]&&Re[e][t]},Be=ve({}.isPrototypeOf),Ve=Ge("navigator","userAgent")||"",De=Ve,qe=ee.process,Ye=ee.Deno,Je=qe&&qe.versions||Ye&&Ye.version,Ze=Je&&Je.v8;Ze&&(he=(fe=Ze.split("."))[0]>0&&fe[0]<4?1:+(fe[0]+fe[1])),!he&&De&&(!(fe=De.match(/Edge\/(\d+)/))||fe[1]>=74)&&(fe=De.match(/Chrome\/(\d+)/))&&(he=+fe[1]);var Xe=he,We=!!Object.getOwnPropertySymbols&&!re((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&Xe&&Xe<41})),$e=We&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Ue=Ge,He=Le,Ke=Be,Qe=ee.Object,et=$e?function(e){return"symbol"==typeof e}:function(e){var t=Ue("Symbol");return He(t)&&Ke(t.prototype,Qe(e))},tt=ee.String,rt=function(e){try{return tt(e)}catch(e){return"Object"}},nt=Le,ot=rt,it=ee.TypeError,st=function(e,t){var r=e[t];return null==r?void 0:function(e){if(nt(e))return e;throw it(ot(e)+" is not a function")}(r)},at=se,ut=Le,lt=Ae,ct=ee.TypeError,ft={exports:{}},ht=ee,pt=Object.defineProperty,gt=function(e,t){try{pt(ht,e,{value:t,configurable:!0,writable:!0})}catch(r){ht[e]=t}return t},dt="__core-js_shared__",mt=ee[dt]||gt(dt,{}),yt=mt;(ft.exports=function(e,t){return yt[e]||(yt[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.21.1",mode:"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"});var vt=Ce,bt=ee.Object,xt=function(e){return bt(vt(e))},wt=xt,St=ve({}.hasOwnProperty),Mt=Object.hasOwn||function(e,t){return St(wt(e),t)},Tt=ve,Ot=0,It=Math.random(),Pt=Tt(1..toString),Et=function(e){return"Symbol("+(void 0===e?"":e)+")_"+Pt(++Ot+It,36)},Ct=ee,kt=Mt,_t=Et,jt=We,Lt=$e,Nt=(0,ft.exports)("wks"),At=Ct.Symbol,Rt=At&&At.for,Ft=Lt?At:At&&At.withoutSetter||_t,zt=function(e){if(!kt(Nt,e)||!jt&&"string"!=typeof Nt[e]){var t="Symbol."+e;Nt[e]=jt&&kt(At,e)?At[e]:Lt&&Rt?Rt(t):Ft(t)}return Nt[e]},Gt=se,Bt=Ae,Vt=et,Dt=st,qt=ee.TypeError,Yt=zt("toPrimitive"),Jt=et,Zt=function(e){var t=function(e,t){if(!Bt(e)||Vt(e))return e;var r,n=Dt(e,Yt);if(n){if(void 0===t&&(t="default"),r=Gt(n,e,t),!Bt(r)||Vt(r))return r;throw qt("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var r,n;if("string"===t&&ut(r=e.toString)&&!lt(n=at(r,e)))return n;if(ut(r=e.valueOf)&&!lt(n=at(r,e)))return n;if("string"!==t&&ut(r=e.toString)&&!lt(n=at(r,e)))return n;throw ct("Can't convert object to primitive value")}(e,t)}(e,"string");return Jt(t)?t:t+""},Xt=Ae,Wt=ee.document,$t=Xt(Wt)&&Xt(Wt.createElement),Ut=function(e){return $t?Wt.createElement(e):{}},Ht=Ut,Kt=!ne&&!re((function(){return 7!=Object.defineProperty(Ht("div"),"a",{get:function(){return 7}}).a})),Qt=se,er=ae,tr=pe,rr=je,nr=Zt,or=Mt,ir=Kt,sr=Object.getOwnPropertyDescriptor;te.f=ne?sr:function(e,t){if(e=rr(e),t=nr(t),ir)try{return sr(e,t)}catch(e){}if(or(e,t))return tr(!Qt(er.f,e,t),e[t])};var ar={},ur=ne&&re((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype})),lr=Ae,cr=ee.String,fr=ee.TypeError,hr=function(e){if(lr(e))return e;throw fr(cr(e)+" is not an object")},pr=Kt,gr=hr,dr=Zt,mr=ee.TypeError,yr=Object.defineProperty,vr=Object.getOwnPropertyDescriptor;ar.f=ne?ur?function(e,t,r){if(gr(e),t=dr(t),gr(r),"function"==typeof e&&"prototype"===t&&"value"in r&&"writable"in r&&!r.writable){var n=vr(e,t);n&&n.writable&&(e[t]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return yr(e,t,r)}:yr:function(e,t,r){if(gr(e),t=dr(t),gr(r),pr)try{return yr(e,t,r)}catch(e){}if("get"in r||"set"in r)throw mr("Accessors not supported");return"value"in r&&(e[t]=r.value),e};var br=ar,xr=pe,wr=ne?function(e,t,r){return br.f(e,t,xr(1,r))}:function(e,t,r){return e[t]=r,e},Sr={exports:{}},Mr=Le,Tr=mt,Or=ve(Function.toString);Mr(Tr.inspectSource)||(Tr.inspectSource=function(e){return Or(e)});var Ir,Pr,Er,Cr=Tr.inspectSource,kr=Cr,_r=ee.WeakMap,jr=Le(_r)&&/native code/.test(kr(_r)),Lr=Et,Nr=(0,ft.exports)("keys"),Ar=function(e){return Nr[e]||(Nr[e]=Lr(e))},Rr={},Fr=ve,zr=Ae,Gr=wr,Br=Mt,Vr=Ar,Dr=Rr,qr="Object already initialized",Yr=ee.TypeError;if(jr||mt.state){var Jr=mt.state||(mt.state=new(0,ee.WeakMap)),Zr=Fr(Jr.get),Xr=Fr(Jr.has),Wr=Fr(Jr.set);Ir=function(e,t){if(Xr(Jr,e))throw new Yr(qr);return t.facade=e,Wr(Jr,e,t),t},Pr=function(e){return Zr(Jr,e)||{}},Er=function(e){return Xr(Jr,e)}}else{var $r=Vr("state");Dr[$r]=!0,Ir=function(e,t){if(Br(e,$r))throw new Yr(qr);return t.facade=e,Gr(e,$r,t),t},Pr=function(e){return Br(e,$r)?e[$r]:{}},Er=function(e){return Br(e,$r)}}var Ur={set:Ir,get:Pr,has:Er,enforce:function(e){return Er(e)?Pr(e):Ir(e,{})},getterFor:function(e){return function(t){var r;if(!zr(t)||(r=Pr(t)).type!==e)throw Yr("Incompatible receiver, "+e+" required");return r}}},Hr=ne,Kr=Function.prototype,Qr=Hr&&Object.getOwnPropertyDescriptor,en=Mt(Kr,"name"),tn={EXISTS:en,PROPER:en&&"something"===function(){}.name,CONFIGURABLE:en&&(!Hr||Hr&&Qr(Kr,"name").configurable)},rn=ee,nn=Le,on=Mt,sn=wr,an=gt,un=Cr,ln=tn.CONFIGURABLE,cn=Ur.get,fn=Ur.enforce,hn=String(String).split("String");(Sr.exports=function(e,t,r,n){var o,i=!!n&&!!n.unsafe,s=!!n&&!!n.enumerable,a=!!n&&!!n.noTargetGet,u=n&&void 0!==n.name?n.name:t;nn(r)&&("Symbol("===String(u).slice(0,7)&&(u="["+String(u).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!on(r,"name")||ln&&r.name!==u)&&sn(r,"name",u),(o=fn(r)).source||(o.source=hn.join("string"==typeof u?u:""))),e!==rn?(i?!a&&e[t]&&(s=!0):delete e[t],s?e[t]=r:sn(e,t,r)):s?e[t]=r:an(t,r)})(Function.prototype,"toString",(function(){return nn(this)&&cn(this).source||un(this)}));var pn={},gn=Math.ceil,dn=Math.floor,mn=function(e){var t=+e;return t!=t||0===t?0:(t>0?dn:gn)(t)},yn=mn,vn=Math.max,bn=Math.min,xn=function(e,t){var r=yn(e);return r<0?vn(r+t,0):bn(r,t)},wn=mn,Sn=Math.min,Mn=function(e){return e>0?Sn(wn(e),9007199254740991):0},Tn=Mn,On=function(e){return Tn(e.length)},In=je,Pn=xn,En=On,Cn=function(e){return function(t,r,n){var o,i=In(t),s=En(i),a=Pn(n,s);if(e&&r!=r){for(;s>a;)if((o=i[a++])!=o)return!0}else for(;s>a;a++)if((e||a in i)&&i[a]===r)return e||a||0;return!e&&-1}},kn={includes:Cn(!0),indexOf:Cn(!1)},_n=Mt,jn=je,Ln=kn.indexOf,Nn=Rr,An=ve([].push),Rn=function(e,t){var r,n=jn(e),o=0,i=[];for(r in n)!_n(Nn,r)&&_n(n,r)&&An(i,r);for(;t.length>o;)_n(n,r=t[o++])&&(~Ln(i,r)||An(i,r));return i},Fn=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],zn=Rn,Gn=Fn.concat("length","prototype");pn.f=Object.getOwnPropertyNames||function(e){return zn(e,Gn)};var Bn={};Bn.f=Object.getOwnPropertySymbols;var Vn=Ge,Dn=pn,qn=Bn,Yn=hr,Jn=ve([].concat),Zn=Vn("Reflect","ownKeys")||function(e){var t=Dn.f(Yn(e)),r=qn.f;return r?Jn(t,r(e)):t},Xn=Mt,Wn=Zn,$n=te,Un=ar,Hn=re,Kn=Le,Qn=/#|\.prototype\./,eo=function(e,t){var r=ro[to(e)];return r==oo||r!=no&&(Kn(t)?Hn(t):!!t)},to=eo.normalize=function(e){return String(e).replace(Qn,".").toLowerCase()},ro=eo.data={},no=eo.NATIVE="N",oo=eo.POLYFILL="P",io=ee,so=te.f,ao=wr,uo=Sr.exports,lo=gt,co=function(e,t,r){for(var n=Wn(t),o=Un.f,i=$n.f,s=0;s<n.length;s++){var a=n[s];Xn(e,a)||r&&Xn(r,a)||o(e,a,i(t,a))}},fo=eo,ho=function(e,t){var r,n,o,i,s,a=e.target,u=e.global,l=e.stat;if(r=u?io:l?io[a]||lo(a,{}):(io[a]||{}).prototype)for(n in t){if(i=t[n],o=e.noTargetGet?(s=so(r,n))&&s.value:r[n],!fo(u?n:a+(l?".":"#")+n,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;co(i,o)}(e.sham||o&&o.sham)&&ao(i,"sham",!0),uo(r,n,i,e)}},po={};po[zt("toStringTag")]="z";var go=ee,mo="[object z]"===String(po),yo=Le,vo=Se,bo=zt("toStringTag"),xo=go.Object,wo="Arguments"==vo(function(){return arguments}()),So=mo?vo:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=xo(e),bo))?r:wo?vo(t):"Object"==(n=vo(t))&&yo(t.callee)?"Arguments":n},Mo=So,To=ee.String,Oo=function(e){if("Symbol"===Mo(e))throw TypeError("Cannot convert a Symbol value to a string");return To(e)},Io=hr,Po=function(){var e=Io(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},Eo=re,Co=ee.RegExp,ko=Eo((function(){var e=Co("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),_o=ko||Eo((function(){return!Co("a","y").sticky})),jo={BROKEN_CARET:ko||Eo((function(){var e=Co("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:_o,UNSUPPORTED_Y:ko},Lo={},No=Rn,Ao=Fn,Ro=Object.keys||function(e){return No(e,Ao)},Fo=ar,zo=hr,Go=je,Bo=Ro;Lo.f=ne&&!ur?Object.defineProperties:function(e,t){zo(e);for(var r,n=Go(t),o=Bo(t),i=o.length,s=0;i>s;)Fo.f(e,r=o[s++],n[r]);return e};var Vo,Do=Ge("document","documentElement"),qo=hr,Yo=Lo,Jo=Fn,Zo=Rr,Xo=Do,Wo=Ut,$o=Ar("IE_PROTO"),Uo=function(){},Ho=function(e){return"<script>"+e+"<\/script>"},Ko=function(e){e.write(Ho("")),e.close();var t=e.parentWindow.Object;return e=null,t},Qo=function(){try{Vo=new ActiveXObject("htmlfile")}catch(e){}var e,t;Qo="undefined"!=typeof document?document.domain&&Vo?Ko(Vo):((t=Wo("iframe")).style.display="none",Xo.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(Ho("document.F=Object")),e.close(),e.F):Ko(Vo);for(var r=Jo.length;r--;)delete Qo.prototype[Jo[r]];return Qo()};Zo[$o]=!0;var ei,ti,ri=Object.create||function(e,t){var r;return null!==e?(Uo.prototype=qo(e),r=new Uo,Uo.prototype=null,r[$o]=e):r=Qo(),void 0===t?r:Yo.f(r,t)},ni=ee.RegExp,oi=re((function(){var e=ni(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),ii=ee.RegExp,si=re((function(){var e=ii("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),ai=se,ui=ve,li=Oo,ci=Po,fi=jo,hi=ri,pi=Ur.get,gi=oi,di=si,mi=(0,ft.exports)("native-string-replace",String.prototype.replace),yi=RegExp.prototype.exec,vi=yi,bi=ui("".charAt),xi=ui("".indexOf),wi=ui("".replace),Si=ui("".slice),Mi=(ti=/b*/g,ai(yi,ei=/a/,"a"),ai(yi,ti,"a"),0!==ei.lastIndex||0!==ti.lastIndex),Ti=fi.BROKEN_CARET,Oi=void 0!==/()??/.exec("")[1];(Mi||Oi||Ti||gi||di)&&(vi=function(e){var t,r,n,o,i,s,a,u=this,l=pi(u),c=li(e),f=l.raw;if(f)return f.lastIndex=u.lastIndex,t=ai(vi,f,c),u.lastIndex=f.lastIndex,t;var h=l.groups,p=Ti&&u.sticky,g=ai(ci,u),d=u.source,m=0,y=c;if(p&&(g=wi(g,"y",""),-1===xi(g,"g")&&(g+="g"),y=Si(c,u.lastIndex),u.lastIndex>0&&(!u.multiline||u.multiline&&"\n"!==bi(c,u.lastIndex-1))&&(d="(?: "+d+")",y=" "+y,m++),r=new RegExp("^(?:"+d+")",g)),Oi&&(r=new RegExp("^"+d+"$(?!\\s)",g)),Mi&&(n=u.lastIndex),o=ai(yi,p?r:u,y),p?o?(o.input=Si(o.input,m),o[0]=Si(o[0],m),o.index=u.lastIndex,u.lastIndex+=o[0].length):u.lastIndex=0:Mi&&o&&(u.lastIndex=u.global?o.index+o[0].length:n),Oi&&o&&o.length>1&&ai(mi,o[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&h)for(o.groups=s=hi(null),i=0;i<h.length;i++)s[(a=h[i])[0]]=o[a[1]];return o});var Ii=vi;ho({target:"RegExp",proto:!0,forced:/./.exec!==Ii},{exec:Ii});var Pi=Function.prototype,Ei=Pi.apply,Ci=Pi.call,ki="object"==typeof Reflect&&Reflect.apply||(oe?Ci.bind(Ei):function(){return Ci.apply(Ei,arguments)}),_i=ve,ji=Sr.exports,Li=Ii,Ni=re,Ai=zt,Ri=wr,Fi=Ai("species"),zi=RegExp.prototype,Gi=Ae,Bi=Se,Vi=zt("match"),Di=ve,qi=re,Yi=Le,Ji=So,Zi=Cr,Xi=function(){},Wi=[],$i=Ge("Reflect","construct"),Ui=/^\s*(?:class|function)\b/,Hi=Di(Ui.exec),Ki=!Ui.exec(Xi),Qi=function(e){if(!Yi(e))return!1;try{return $i(Xi,Wi,e),!0}catch(e){return!1}},es=function(e){if(!Yi(e))return!1;switch(Ji(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return Ki||!!Hi(Ui,Zi(e))}catch(e){return!0}};es.sham=!0;var ts=!$i||qi((function(){var e;return Qi(Qi.call)||!Qi(Object)||!Qi((function(){e=!0}))||e}))?es:Qi,rs=rt,ns=ee.TypeError,os=hr,is=zt("species"),ss=ve,as=mn,us=Oo,ls=Ce,cs=ss("".charAt),fs=ss("".charCodeAt),hs=ss("".slice),ps=function(e){return function(t,r){var n,o,i=us(ls(t)),s=as(r),a=i.length;return s<0||s>=a?e?"":void 0:(n=fs(i,s))<55296||n>56319||s+1===a||(o=fs(i,s+1))<56320||o>57343?e?cs(i,s):n:e?hs(i,s,s+2):o-56320+(n-55296<<10)+65536}},gs=(ps(!1),ps(!0)),ds=Zt,ms=ar,ys=pe,vs=xn,bs=On,xs=ee.Array,ws=Math.max,Ss=se,Ms=hr,Ts=Le,Os=Se,Is=Ii,Ps=ee.TypeError,Es=ki,Cs=se,ks=ve,_s=hr,js=Ce,Ls=function(e,t,r){return t+(r?gs(e,t).length:1)},Ns=Mn,As=Oo,Rs=st,Fs=function(e,t,r){for(var n=bs(e),o=vs(t,n),i=vs(void 0===r?n:r,n),s=xs(ws(i-o,0)),a=0;o<i;o++,a++)u=s,l=e[o],void 0,(c=ds(a))in u?ms.f(u,c,ys(0,l)):u[c]=l;var u,l,c;return s.length=a,s},zs=function(e,t){var r=e.exec;if(Ts(r)){var n=Ss(r,e,t);return null!==n&&Ms(n),n}if("RegExp"===Os(e))return Ss(Is,e,t);throw Ps("RegExp#exec called on incompatible receiver")},Gs=Ii,Bs=re,Vs=jo.UNSUPPORTED_Y,Ds=4294967295,qs=Math.min,Ys=[].push,Js=ks(/./.exec),Zs=ks(Ys),Xs=ks("".slice),Ws=!Bs((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));!function(e,t,r,n){var o,i,s,a,u=Ai(e),l=!Ni((function(){var t={};return t[u]=function(){return 7},7!=""[e](t)})),c=l&&!Ni((function(){var e=!1,t=/a/;return(t={}).constructor={},t.constructor[Fi]=function(){return t},t.flags="",t[u]=/./[u],t.exec=function(){return e=!0,null},t[u](""),!e}));if(!l||!c||r){var f=_i(/./[u]),h=(o=u,i=""[e],s=function(e,t,r,n,o){var i=_i(e),s=t.exec;return s===Li||s===zi.exec?l&&!o?{done:!0,value:f(t,r,n)}:{done:!0,value:i(r,t,n)}:{done:!1}},a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var r,n,o=As(js(this)),s=void 0===t?Ds:t>>>0;if(0===s)return[];if(void 0===e)return[o];if(!Gi(r=e)||!(void 0!==(n=r[Vi])?n:"RegExp"==Bi(r)))return Cs(i,o,e,s);for(var a,u,l,c=[],f=0,h=new RegExp(e.source,(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":"")+"g");(a=Cs(Gs,h,o))&&!((u=h.lastIndex)>f&&(Zs(c,Xs(o,f,a.index)),a.length>1&&a.index<o.length&&Es(Ys,c,Fs(a,1)),l=a[0].length,f=u,c.length>=s));)h.lastIndex===a.index&&h.lastIndex++;return f===o.length?!l&&Js(h,"")||Zs(c,""):Zs(c,Xs(o,f)),c.length>s?Fs(c,0,s):c}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:Cs(i,this,e,t)}:i,[function(e,t){var r=js(this),n=null==e?void 0:Rs(e,o);return n?Cs(n,e,r,t):Cs(a,As(r),e,t)},function(e,t){var r=_s(this),n=As(e),o=s(a,r,n,t,a!==i);if(o.done)return o.value;var u=function(e,t){var r,n=os(e).constructor;return void 0===n||null==(r=os(n)[is])?t:function(e){if(ts(e))return e;throw ns(rs(e)+" is not a constructor")}(r)}(r,RegExp),l=r.unicode,c=new u(Vs?"^(?:"+r.source+")":r,(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.unicode?"u":"")+(Vs?"g":"y")),f=void 0===t?Ds:t>>>0;if(0===f)return[];if(0===n.length)return null===zs(c,n)?[n]:[];for(var h=0,p=0,g=[];p<n.length;){c.lastIndex=Vs?0:p;var d,m=zs(c,Vs?Xs(n,p):n);if(null===m||(d=qs(Ns(c.lastIndex+(Vs?p:0)),n.length))===h)p=Ls(n,p,l);else{if(Zs(g,Xs(n,h,p)),g.length===f)return g;for(var y=1;y<=m.length-1;y++)if(Zs(g,m[y]),g.length===f)return g;p=h=d}}return Zs(g,Xs(n,h)),g}]);ji(String.prototype,e,h[0]),ji(zi,u,h[1])}n&&Ri(zi[u],"sham",!0)}("split",0,!Ws,Vs);var $s=Ce,Us=Oo,Hs=ve("".replace),Ks="[\t\n\v\f\r                　\u2028\u2029\ufeff]",Qs=RegExp("^"+Ks+Ks+"*"),ea=RegExp(Ks+Ks+"*$"),ta=function(e){return function(t){var r=Us($s(t));return 1&e&&(r=Hs(r,Qs,"")),2&e&&(r=Hs(r,ea,"")),r}},ra={start:ta(1),end:ta(2),trim:ta(3)},na=re,oa=Oo,ia=ra.trim,sa="\t\n\v\f\r                　\u2028\u2029\ufeff",aa=ee.parseInt,ua=ee.Symbol,la=ua&&ua.iterator,ca=/^[+-]?0x/i,fa=ve(ca.exec),ha=8!==aa(sa+"08")||22!==aa(sa+"0x16")||la&&!na((function(){aa(Object(la))}))?function(e,t){var r=ia(oa(e));return aa(r,t>>>0||(fa(ca,r)?16:10))}:aa;ho({global:!0,forced:parseInt!=ha},{parseInt:ha});var pa=tn.PROPER,ga=Sr.exports,da=hr,ma=Be,ya=Oo,va=re,ba="toString",xa=RegExp.prototype,wa=xa.toString,Sa=ve(Po);(va((function(){return"/a/b"!=wa.call({source:"a",flags:"b"})}))||pa&&wa.name!=ba)&&ga(RegExp.prototype,ba,(function(){var e=da(this),t=ya(e.source),r=e.flags;return"/"+t+"/"+ya(void 0===r&&ma(xa,e)&&!("flags"in xa)?Sa(e):r)}),{unsafe:!0});const Ma=e=>parseInt(e.toString().slice(-1)),Ta=(e,t,r)=>parseInt([Ma(e)+1,Ma(t)+1,r].join(""));var Oa,Ia,Pa;!function(e){e.point="point",e.rectangle="rectangle"}(Oa||(Oa={})),function(e){e.None="none",e.Add="add",e.Max="max",e.TimeCompare="timecompare",e.Bivariate="bivariate",e.Literal="literal",e.Cumulative="cumulative"}(Ia||(Ia={})),function(e){e.Sum="sum",e.Avg="avg"}(Pa||(Pa={}));var Ea=ri,Ca=ar,ka=zt("unscopables"),_a=Array.prototype;null==_a[ka]&&Ca.f(_a,ka,{configurable:!0,value:Ea(null)});var ja,La,Na,Aa={},Ra=!re((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),Fa=ee,za=Mt,Ga=Le,Ba=xt,Va=Ra,Da=Ar("IE_PROTO"),qa=Fa.Object,Ya=qa.prototype,Ja=Va?qa.getPrototypeOf:function(e){var t=Ba(e);if(za(t,Da))return t[Da];var r=t.constructor;return Ga(r)&&t instanceof r?r.prototype:t instanceof qa?Ya:null},Za=re,Xa=Le,Wa=Ja,$a=Sr.exports,Ua=zt("iterator"),Ha=!1;[].keys&&("next"in(Na=[].keys())?(La=Wa(Wa(Na)))!==Object.prototype&&(ja=La):Ha=!0);var Ka=null==ja||Za((function(){var e={};return ja[Ua].call(e)!==e}));Ka&&(ja={}),Xa(ja[Ua])||$a(ja,Ua,(function(){return this}));var Qa={IteratorPrototype:ja,BUGGY_SAFARI_ITERATORS:Ha},eu=ar.f,tu=Mt,ru=zt("toStringTag"),nu=function(e,t,r){e&&!r&&(e=e.prototype),e&&!tu(e,ru)&&eu(e,ru,{configurable:!0,value:t})},ou=Qa.IteratorPrototype,iu=ri,su=pe,au=nu,uu=Aa,lu=function(){return this},cu=Le,fu=ee.String,hu=ee.TypeError,pu=ve,gu=hr,du=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=pu(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return gu(r),function(e){if("object"==typeof e||cu(e))return e;throw hu("Can't set "+fu(e)+" as a prototype")}(n),t?e(r,n):r.__proto__=n,r}}():void 0),mu=ho,yu=se,vu=Le,bu=Ja,xu=du,wu=nu,Su=wr,Mu=Sr.exports,Tu=Aa,Ou=tn.PROPER,Iu=tn.CONFIGURABLE,Pu=Qa.IteratorPrototype,Eu=Qa.BUGGY_SAFARI_ITERATORS,Cu=zt("iterator"),ku="keys",_u="values",ju="entries",Lu=function(){return this},Nu=je,Au=function(e){_a[ka][e]=!0},Ru=Aa,Fu=ar.f,zu=ne,Gu="Array Iterator",Bu=Ur.set,Vu=Ur.getterFor(Gu),Du=function(e,t,r,n,o,i,s){!function(e,t,r,n){var o="Array Iterator";e.prototype=iu(ou,{next:su(1,r)}),au(e,o,!1),uu[o]=lu}(r,0,(function(){var e=Vu(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}));var a,u,l,c=function(e){if(e===o&&g)return g;if(!Eu&&e in h)return h[e];switch(e){case ku:case _u:case ju:return function(){return new r(this,e)}}return function(){return new r(this)}},f=!1,h=e.prototype,p=h[Cu]||h["@@iterator"]||h.values,g=!Eu&&p||c(o),d=h.entries||p;if(d&&(a=bu(d.call(new e)))!==Object.prototype&&a.next&&(bu(a)!==Pu&&(xu?xu(a,Pu):vu(a[Cu])||Mu(a,Cu,Lu)),wu(a,"Array Iterator",!0)),Ou&&p&&p.name!==_u&&(Iu?Su(h,"name",_u):(f=!0,g=function(){return yu(p,this)})),void(u={values:c(_u),keys:c(ku),entries:c(ju)}))for(l in u)(Eu||f||!(l in h))&&Mu(h,l,u[l]);else mu({target:t,proto:!0,forced:Eu||f},u);return h[Cu]!==g&&Mu(h,Cu,g,{name:o}),Tu.Array=g,u}(Array,"Array",(function(e,t){Bu(this,{type:Gu,target:Nu(e),index:0,kind:t})}),0,"values"),qu=Ru.Arguments=Ru.Array;if(Au("keys"),Au("values"),Au("entries"),zu&&"values"!==qu.name)try{Fu(qu,"name",{value:"values"})}catch(e){}var Yu=Ut("span").classList,Ju=Yu&&Yu.constructor&&Yu.constructor.prototype,Zu=ee,Xu={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Wu=Ju===Object.prototype?void 0:Ju,$u=Du,Uu=wr,Hu=zt,Ku=Hu("iterator"),Qu=Hu("toStringTag"),el=$u.values,tl=function(e,t){if(e){if(e[Ku]!==el)try{Uu(e,Ku,el)}catch(t){e[Ku]=el}if(e[Qu]||Uu(e,Qu,t),Xu[t])for(var r in $u)if(e[r]!==$u[r])try{Uu(e,r,$u[r])}catch(t){e[r]=$u[r]}}};for(var rl in Xu)tl(Zu[rl]&&Zu[rl].prototype,rl);tl(Wu,"DOMTokenList");var nl=ne,ol=se,il=re,sl=Ro,al=Bn,ul=ae,ll=xt,cl=Pe,fl=Object.assign,hl=Object.defineProperty,pl=ve([].concat),gl=!fl||il((function(){if(nl&&1!==fl({b:1},fl(hl({},"a",{enumerable:!0,get:function(){hl(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach((function(e){t[e]=e})),7!=fl({},e)[r]||sl(fl({},t)).join("")!=n}))?function(e,t){for(var r=ll(e),n=arguments.length,o=1,i=al.f,s=ul.f;n>o;)for(var a,u=cl(arguments[o++]),l=i?pl(sl(u),i(u)):sl(u),c=l.length,f=0;c>f;)a=l[f++],nl&&!ol(s,u,a)||(r[a]=u[a]);return r}:fl;ho({target:"Object",stat:!0,forced:Object.assign!==gl},{assign:gl});var dl=mn,ml=Oo,yl=Ce,vl=ee.RangeError,bl=ve,xl=Mn,wl=Oo,Sl=Ce,Ml=bl((function(e){var t=ml(yl(this)),r="",n=dl(e);if(n<0||n==1/0)throw vl("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r})),Tl=bl("".slice),Ol=Math.ceil,Il=function(e){return function(t,r,n){var o,i,s=wl(Sl(t)),a=xl(r),u=s.length,l=void 0===n?" ":wl(n);return a<=u||""==l?s:((i=Ml(l,Ol((o=a-u)/l.length))).length>o&&(i=Tl(i,0,o)),e?s+i:i+s)}},Pl={start:Il(!1),end:Il(!0)},El=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(Ve),Cl=Pl.start;ho({target:"String",proto:!0,forced:El},{padStart:function(e){return Cl(this,e,arguments.length>1?arguments[1]:void 0)}});const kl=(e,t,r)=>{const n=t%r,o=Math.floor(t/r),[i,s,a,u]=e;return{col:n,row:o,width:a-i,height:u-s}},_l=e=>{const t=e.geomType===Oa.point?(({tileBBox:e,cell:t,numCols:r,numRows:n,addMeta:o})=>{const[i,s]=e,{col:a,row:u,width:l,height:c}=kl(e,t,r);return{type:"Feature",properties:o?{_col:a,_row:u}:{},geometry:{type:"Point",coordinates:[i+a/r*l,s+u/n*c]}}})(e):(({tileBBox:e,cell:t,numCols:r,numRows:n,addMeta:o})=>{const[i,s]=e,{col:a,row:u,width:l,height:c}=kl(e,t,r),f=i+a/r*l,h=s+u/n*c,p=i+(a+1)/r*l,g=s+(u+1)/n*c;return{type:"Feature",properties:o?{_col:a,_row:u}:{},geometry:{type:"Polygon",coordinates:[[[f,h],[p,h],[p,g],[f,g],[f,h]]]}}})(e);return t.id=e.id,t},jl=(e,t,r)=>{const n=e.toString();void 0!==t&&(r.properties[n]=isNaN(t)?null:t)},Ll=(e,t)=>{let r;if(isNaN(t))return 0;for(let n=0;n<e.length+1;n++)if(t<=(void 0!==e[n]?e[n]:Number.POSITIVE_INFINITY)){r=n;break}return void 0===r&&(r=e.length),r},Nl=(e,t)=>{if(0!==e)return t?Ll(t[0],e):e},Al=(e,t,r)=>{if(0!==e)return r?10*t+Ll(r[t],e):`${t};${e}`},Rl=(e,t)=>{if(0!==e[0]||0!==e[1]){if(t){const r=Ll(t[0],e[0]);return 4*((Ll(t[1],e[1])||1)-1)+((r||1)-1)+1}return`${e[0]};${e[1]}`}},Fl=(e,t)=>{const r=e[1]-e[0];if(0!==r)return t?Ll(t[0],r):r},zl=(e,t)=>{if(0!==e)return t.join("")},Gl=e=>{throw console.error("4w-agg::",e),new Error(`4w-agg::${e}`)};var Bl=Math.PI/180,Vl=180/Math.PI;function Dl(e){var t=ql(e[0]+1,e[2]);return[ql(e[0],e[2]),Yl(e[1]+1,e[2]),t,Yl(e[1],e[2])]}function ql(e,t){return e/Math.pow(2,t)*360-180}function Yl(e,t){var r=Math.PI-2*Math.PI*e/Math.pow(2,t);return Vl*Math.atan(.5*(Math.exp(r)-Math.exp(-r)))}function Jl(e,t,r){var n=Hl(e,t,r);return n[0]=Math.floor(n[0]),n[1]=Math.floor(n[1]),n}function Zl(e){return[[2*e[0],2*e[1],e[2]+1],[2*e[0]+1,2*e[1],e[2]+1],[2*e[0]+1,2*e[1]+1,e[2]+1],[2*e[0],2*e[1]+1,e[2]+1]]}function Xl(e){return[e[0]>>1,e[1]>>1,e[2]-1]}function Wl(e){return Zl(Xl(e))}function $l(e,t){for(var r=0;r<e.length;r++)if(Ul(e[r],t))return!0;return!1}function Ul(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}function Hl(e,t,r){var n=Math.sin(t*Bl),o=Math.pow(2,r),i=o*(e/360+.5);return(i%=o)<0&&(i+=o),[i,o*(.5-.25*Math.log((1+n)/(1-n))/Math.PI),r]}var Kl={tileToGeoJSON:function(e){var t=Dl(e);return{type:"Polygon",coordinates:[[[t[0],t[3]],[t[0],t[1]],[t[2],t[1]],[t[2],t[3]],[t[0],t[3]]]]}},tileToBBOX:Dl,getChildren:Zl,getParent:Xl,getSiblings:Wl,hasTile:$l,hasSiblings:function(e,t){for(var r=Wl(e),n=0;n<r.length;n++)if(!$l(t,r[n]))return!1;return!0},tilesEqual:Ul,tileToQuadkey:function(e){for(var t="",r=e[2];r>0;r--){var n=0,o=1<<r-1;0!=(e[0]&o)&&n++,0!=(e[1]&o)&&(n+=2),t+=n.toString()}return t},quadkeyToTile:function(e){for(var t=0,r=0,n=e.length,o=n;o>0;o--){var i=1<<o-1,s=+e[n-o];1===s&&(t|=i),2===s&&(r|=i),3===s&&(t|=i,r|=i)}return[t,r,n]},pointToTile:Jl,bboxToTile:function(e){var t=Jl(e[0],e[1],32),r=Jl(e[2],e[3],32),n=[t[0],t[1],r[0],r[1]],o=function(e){for(var t=0;t<28;t++){var r=1<<32-(t+1);if((e[0]&r)!=(e[2]&r)||(e[1]&r)!=(e[3]&r))return t}return 28}(n);return 0===o?[0,0,0]:[n[0]>>>32-o,n[1]>>>32-o,o]},pointToTileFraction:Hl};const Ql=Object.entries||function(e){const t=Object.keys(e);let r=t.length;const n=new Array(r);for(;r--;)n[r]=[t[r],e[t[r]]];return n},ec=Object.fromEntries||function(e){if(!e||!e[Symbol.iterator])throw new Error("Object.fromEntries() requires a single iterable argument");const t={};for(const[r,n]of e)t[r]=n;return t};class tc{constructor(e){this.query=e}getSearchObject(){const{query:e}=this;return e?(/^[?#]/.test(e)?e.slice(1):e).split("&").reduce(((e,t)=>{const[r,n]=t.split("=");return e[r]=n?decodeURIComponent(n.replace(/\+/g," ")):"",e}),{}):{}}get(e){return this.getSearchObject()[e]}}const rc=["aggregationOperation","delta","geomType","id","interactive","quantizeOffset","singleFrame","sublayerBreaks","sublayerCombinationMode","sublayerCount","sublayerVisibility"],nc=(e,t)=>{const{x:r,y:n,z:o}=t;return J(e).getTile(o,r,n)},oc=(t,r)=>{const{x:n,y:o,z:i}=r,s=Kl.tileToBBOX([n,o,i]),a=(t=>{const r=new e.pbf(t).readFields((function(e,t,r){1===e&&r.readPackedVarint(t.data)}),{data:[]},void 0);return r&&r.data})(t),u=function(e,t){const{quantizeOffset:r=0,tileBBox:n,x:o,y:i,delta:s=30,geomType:a=Oa.rectangle,singleFrame:u,interactive:l,sublayerBreaks:c,sublayerCount:f,sublayerCombinationMode:h,sublayerVisibility:p,aggregationOperation:g}=t;h===Ia.None&&f>1&&Gl("Multiple sublayers but no proper combination mode set"),!c||c.length===f||h!==Ia.Max&&h!==Ia.Bivariate||Gl("must provide as many breaks arrays as number of datasets when using compare and bivariate modes"),h===Ia.TimeCompare&&(2!==f&&Gl("delta combinationMode requires sublayer count === 2"),c&&1!==c.length&&Gl("delta combinationMode requires exactly one breaks array to generate a diverging scale")),c&&1!==c.length&&h===Ia.Add&&Gl("add combinationMode requires one and only one breaks array"),h===Ia.Bivariate&&(2!==f&&Gl("bivariate combinationMode requires exactly two datasets"),c&&(2!==c.length&&Gl("bivariate combinationMode requires exactly two breaks array"),c[0].length!==c[1].length&&Gl("bivariate breaks arrays must have the same length"),4===c[0].length&&4===c[1].length||Gl("each bivariate breaks array require exactly 4 values")));const d=[],m=[];let y,v,b,x,w,S,M,T=Array(f).fill([]),O=Array(f).fill(0),I=0,P=0,E=Number.NEGATIVE_INFINITY,C=0,k="[",_=[];const j=e[0],L=e[1],N=[];let A=0,R=0,F=0,z=0,G=0;const B=g===Pa.Avg?NaN:0;for(let t=2;t<e.length;t++){const r=e[t];if(0===G?F=t:1===G?A=r:2===G&&(R=r,z=F+3+(R-A+1)*f),G++,t===z-1){G=0;const t=e.slice(F,z),r=new Array(s*f).fill(B);t[2]=R+s;const n=t.concat(r);N.push(n)}}if(u)for(let t=2;t<e.length;t++){const r=e[t];if(t%2==0)b=r;else{const e=Ta(o,i,b);y=_l({geomType:a,tileBBox:n,cell:b,numCols:L,numRows:j,id:e}),y.properties.value=r/100,d.push(y)}}else for(let e=0;e<N.length;e++){const t=N[e];b=t[0],x=t[1],w=x;const u={geomType:a,tileBBox:n,cell:b,numCols:L,numRows:j,id:Ta(o,i,b),addMeta:!0};y=_l(u),l&&(v=_l(Object.assign(Object.assign({},u),{addMeta:!0})));for(let e=3;e<t.length;e++){const n=t[e];S=w-s+1;const o=P%f;T[o].push(n);let i=0;S>x?i=T[o].shift():I++;let a=0,u=0;if(p[o]&&(g===Pa.Avg?(u=isNaN(n)?O[o]-i:O[o]+n-i,isNaN(n)&&I--,a=u/I):a=u=O[o]+n-i),O[o]=u,h===Ia.Max&&a>E&&(E=a,M=o),h!==Ia.Add&&h!==Ia.Cumulative||(C+=a),h===Ia.Cumulative){const e=Math.round(C).toString().padStart(6,"0");_.push(e)}h===Ia.Literal&&(k+=Math.round(a),o<f-1&&(k+=","));const l=S-r;if(l>=0&&o===f-1){let e;h===Ia.Literal&&(k+="]"),h===Ia.None?e=Nl(a,c):h===Ia.Max?e=Al(E,M,c):h===Ia.Add?e=Nl(C,c):h===Ia.Bivariate?e=Rl(O,c):h===Ia.TimeCompare?e=Fl(O,c):h===Ia.Literal?e=k:h===Ia.Cumulative&&(e=zl(C,_)),jl(l,e,y)}o===f-1&&(w++,E=Number.NEGATIVE_INFINITY,C=0,_=[],k="["),P++}d.push(y),l&&(v.properties.rawValues=t,m.push(v)),P=0,E=Number.NEGATIVE_INFINITY,C=0,_=[],T=Array(f).fill([]),O=Array(f).fill(0)}const V={main:{type:"FeatureCollection",features:d}};return l&&(V.interactive={type:"FeatureCollection",features:m}),V}(a,Object.assign(Object.assign({},r),{tileBBox:s})),l={temporalgrid:nc(u.main,r)};if(!0===r.interactive){const e=nc(u.interactive,r);l.temporalgrid_interactive=e}const c=new H(l,{extent:4096});let f=b.fromGeojsonVt(l);return 0===f.byteOffset&&f.byteLength===f.buffer.byteLength||(f=new Uint8Array(f)),{vectorTile:c,rawData:f.buffer}},ic=(t,r)=>{const n=(e=>{const t=new URL(e.request.url).searchParams;let r;r=t?Object.fromEntries(t):new tc(e.request.url).getSearchObject();const{x:n,y:o,z:i}=e.tileID.canonical,{interval:s,aggregationOperation:a,sublayerCombinationMode:u}=r,l={x:n,y:o,z:i,interval:s,aggregationOperation:a,sublayerCombinationMode:u,singleFrame:"true"===r.singleFrame,interactive:"true"===r.interactive,quantizeOffset:parseInt(r.quantizeOffset||"0"),geomType:r.geomType||"point",delta:parseInt(r.delta)||"10",sublayerCount:parseInt(r.sublayerCount)||1,sublayerBreaks:r.sublayerBreaks?JSON.parse(r.sublayerBreaks):null,sublayerVisibility:r.sublayerVisibility?JSON.parse(r.sublayerVisibility):new Array(r.sublayerCount).fill(!0)};return ec(Ql(l).filter((([e,t])=>null!=t)))})(t),o=(e=>{const t=new URL(e);let r=t.searchParams;r||(r=new tc(e)),rc.forEach((e=>{r.get(e)&&r.delete(e)}));const n=`${t.origin}${t.pathname}?${r.toString()}`;return decodeURI(n)})(t.request.url),i=e.extend(t.request,{url:o}),s=e.getArrayBuffer(i,((e,t,o,i)=>{if(e)r(e);else if(t){const e=oc(t,n);r(null,Object.assign(Object.assign({},e),{cacheControl:o,expires:i}))}}));return()=>{s.cancel(),r()}};class sc extends r{constructor(e,t,r){super(e,t,r,ic)}}class ac{constructor(){this.loaded={}}loadTile(t,r){const{uid:n,encoding:o,rawImageData:i}=t,s=e.isImageBitmap(i)?this.getImageData(i):i,a=new e.DEMData(n,s,o);this.loaded=this.loaded||{},this.loaded[n]=a,r(null,a)}getImageData(t){this.offscreenCanvas&&this.offscreenCanvasContext||(this.offscreenCanvas=new OffscreenCanvas(t.width,t.height),this.offscreenCanvasContext=this.offscreenCanvas.getContext("2d")),this.offscreenCanvas.width=t.width,this.offscreenCanvas.height=t.height,this.offscreenCanvasContext.drawImage(t,0,0,t.width,t.height);const r=this.offscreenCanvasContext.getImageData(-1,-1,t.width+2,t.height+2);return this.offscreenCanvasContext.clearRect(0,0,this.offscreenCanvas.width,this.offscreenCanvas.height),new e.RGBAImage({width:r.width,height:r.height},r.data)}removeTile(e){const t=this.loaded,r=e.uid;t&&t[r]&&delete t[r]}}var uc=function e(t,r){var n,o=t&&t.type;if("FeatureCollection"===o)for(n=0;n<t.features.length;n++)e(t.features[n],r);else if("GeometryCollection"===o)for(n=0;n<t.geometries.length;n++)e(t.geometries[n],r);else if("Feature"===o)e(t.geometry,r);else if("Polygon"===o)lc(t.coordinates,r);else if("MultiPolygon"===o)for(n=0;n<t.coordinates.length;n++)lc(t.coordinates[n],r);return t};function lc(e,t){if(0!==e.length){cc(e[0],t);for(var r=1;r<e.length;r++)cc(e[r],!t)}}function cc(e,t){for(var r=0,n=0,o=0,i=e.length,s=i-1;o<i;s=o++){var a=(e[o][0]-e[s][0])*(e[s][1]+e[o][1]),u=r+a;n+=Math.abs(r)>=Math.abs(a)?r-u+a:a-u+r,r=u}r+n>=0!=!!t&&e.reverse()}function fc(e,t,r,n,o,i){if(o-n<=r)return;const s=n+o>>1;hc(e,t,s,n,o,i%2),fc(e,t,r,n,s-1,i+1),fc(e,t,r,s+1,o,i+1)}function hc(e,t,r,n,o,i){for(;o>n;){if(o-n>600){const s=o-n+1,a=r-n+1,u=Math.log(s),l=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*l*(s-l)/s)*(a-s/2<0?-1:1);hc(e,t,r,Math.max(n,Math.floor(r-a*l/s+c)),Math.min(o,Math.floor(r+(s-a)*l/s+c)),i)}const s=t[2*r+i];let a=n,u=o;for(pc(e,t,n,r),t[2*o+i]>s&&pc(e,t,n,o);a<u;){for(pc(e,t,a,u),a++,u--;t[2*a+i]<s;)a++;for(;t[2*u+i]>s;)u--}t[2*n+i]===s?pc(e,t,n,u):(u++,pc(e,t,u,o)),u<=r&&(n=u+1),r<=u&&(o=u-1)}}function pc(e,t,r,n){gc(e,r,n),gc(t,2*r,2*n),gc(t,2*r+1,2*n+1)}function gc(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function dc(e,t,r,n){const o=e-r,i=t-n;return o*o+i*i}const mc=e=>e[0],yc=e=>e[1];class vc{constructor(e,t=mc,r=yc,n=64,o=Float64Array){this.nodeSize=n,this.points=e;const i=e.length<65536?Uint16Array:Uint32Array,s=this.ids=new i(e.length),a=this.coords=new o(2*e.length);for(let n=0;n<e.length;n++)s[n]=n,a[2*n]=t(e[n]),a[2*n+1]=r(e[n]);fc(s,a,n,0,s.length-1,0)}range(e,t,r,n){return function(e,t,r,n,o,i,s){const a=[0,e.length-1,0],u=[];let l,c;for(;a.length;){const f=a.pop(),h=a.pop(),p=a.pop();if(h-p<=s){for(let s=p;s<=h;s++)l=t[2*s],c=t[2*s+1],l>=r&&l<=o&&c>=n&&c<=i&&u.push(e[s]);continue}const g=Math.floor((p+h)/2);l=t[2*g],c=t[2*g+1],l>=r&&l<=o&&c>=n&&c<=i&&u.push(e[g]);const d=(f+1)%2;(0===f?r<=l:n<=c)&&(a.push(p),a.push(g-1),a.push(d)),(0===f?o>=l:i>=c)&&(a.push(g+1),a.push(h),a.push(d))}return u}(this.ids,this.coords,e,t,r,n,this.nodeSize)}within(e,t,r){return function(e,t,r,n,o,i){const s=[0,e.length-1,0],a=[],u=o*o;for(;s.length;){const l=s.pop(),c=s.pop(),f=s.pop();if(c-f<=i){for(let o=f;o<=c;o++)dc(t[2*o],t[2*o+1],r,n)<=u&&a.push(e[o]);continue}const h=Math.floor((f+c)/2),p=t[2*h],g=t[2*h+1];dc(p,g,r,n)<=u&&a.push(e[h]);const d=(l+1)%2;(0===l?r-o<=p:n-o<=g)&&(s.push(f),s.push(h-1),s.push(d)),(0===l?r+o>=p:n+o>=g)&&(s.push(h+1),s.push(c),s.push(d))}return a}(this.ids,this.coords,e,t,r,this.nodeSize)}}const bc={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},xc=Math.fround||(wc=new Float32Array(1),e=>(wc[0]=+e,wc[0]));var wc;class Sc{constructor(e){this.options=kc(Object.create(bc),e),this.trees=new Array(this.options.maxZoom+1)}load(e){const{log:t,minZoom:r,maxZoom:n,nodeSize:o}=this.options;t&&console.time("total time");const i=`prepare ${e.length} points`;t&&console.time(i),this.points=e;let s=[];for(let t=0;t<e.length;t++)e[t].geometry&&s.push(Tc(e[t],t));this.trees[n+1]=new vc(s,_c,jc,o,Float32Array),t&&console.timeEnd(i);for(let e=n;e>=r;e--){const r=+Date.now();s=this._cluster(s,e),this.trees[e]=new vc(s,_c,jc,o,Float32Array),t&&console.log("z%d: %d clusters in %dms",e,s.length,+Date.now()-r)}return t&&console.timeEnd("total time"),this}getClusters(e,t){let r=((e[0]+180)%360+360)%360-180;const n=Math.max(-90,Math.min(90,e[1]));let o=180===e[2]?180:((e[2]+180)%360+360)%360-180;const i=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)r=-180,o=180;else if(r>o){const e=this.getClusters([r,n,180,i],t),s=this.getClusters([-180,n,o,i],t);return e.concat(s)}const s=this.trees[this._limitZoom(t)],a=s.range(Pc(r),Ec(i),Pc(o),Ec(n)),u=[];for(const e of a){const t=s.points[e];u.push(t.numPoints?Oc(t):this.points[t.index])}return u}getChildren(e){const t=this._getOriginId(e),r=this._getOriginZoom(e),n="No cluster with the specified id.",o=this.trees[r];if(!o)throw new Error(n);const i=o.points[t];if(!i)throw new Error(n);const s=this.options.radius/(this.options.extent*Math.pow(2,r-1)),a=o.within(i.x,i.y,s),u=[];for(const t of a){const r=o.points[t];r.parentId===e&&u.push(r.numPoints?Oc(r):this.points[r.index])}if(0===u.length)throw new Error(n);return u}getLeaves(e,t,r){const n=[];return this._appendLeaves(n,e,t=t||10,r=r||0,0),n}getTile(e,t,r){const n=this.trees[this._limitZoom(e)],o=Math.pow(2,e),{extent:i,radius:s}=this.options,a=s/i,u=(r-a)/o,l=(r+1+a)/o,c={features:[]};return this._addTileFeatures(n.range((t-a)/o,u,(t+1+a)/o,l),n.points,t,r,o,c),0===t&&this._addTileFeatures(n.range(1-a/o,u,1,l),n.points,o,r,o,c),t===o-1&&this._addTileFeatures(n.range(0,u,a/o,l),n.points,-1,r,o,c),c.features.length?c:null}getClusterExpansionZoom(e){let t=this._getOriginZoom(e)-1;for(;t<=this.options.maxZoom;){const r=this.getChildren(e);if(t++,1!==r.length)break;e=r[0].properties.cluster_id}return t}_appendLeaves(e,t,r,n,o){const i=this.getChildren(t);for(const t of i){const i=t.properties;if(i&&i.cluster?o+i.point_count<=n?o+=i.point_count:o=this._appendLeaves(e,i.cluster_id,r,n,o):o<n?o++:e.push(t),e.length===r)break}return o}_addTileFeatures(e,t,r,n,o,i){for(const s of e){const e=t[s],a=e.numPoints;let u,l,c;if(a)u=Ic(e),l=e.x,c=e.y;else{const t=this.points[e.index];u=t.properties,l=Pc(t.geometry.coordinates[0]),c=Ec(t.geometry.coordinates[1])}const f={type:1,geometry:[[Math.round(this.options.extent*(l*o-r)),Math.round(this.options.extent*(c*o-n))]],tags:u};let h;a?h=e.id:this.options.generateId?h=e.index:this.points[e.index].id&&(h=this.points[e.index].id),void 0!==h&&(f.id=h),i.features.push(f)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(+e,this.options.maxZoom+1))}_cluster(e,t){const r=[],{radius:n,extent:o,reduce:i,minPoints:s}=this.options,a=n/(o*Math.pow(2,t));for(let n=0;n<e.length;n++){const o=e[n];if(o.zoom<=t)continue;o.zoom=t;const u=this.trees[t+1],l=u.within(o.x,o.y,a),c=o.numPoints||1;let f=c;for(const e of l){const r=u.points[e];r.zoom>t&&(f+=r.numPoints||1)}if(f>c&&f>=s){let e=o.x*c,s=o.y*c,a=i&&c>1?this._map(o,!0):null;const h=(n<<5)+(t+1)+this.points.length;for(const r of l){const n=u.points[r];if(n.zoom<=t)continue;n.zoom=t;const l=n.numPoints||1;e+=n.x*l,s+=n.y*l,n.parentId=h,i&&(a||(a=this._map(o,!0)),i(a,this._map(n)))}o.parentId=h,r.push(Mc(e/f,s/f,h,f,a))}else if(r.push(o),f>1)for(const e of l){const n=u.points[e];n.zoom<=t||(n.zoom=t,r.push(n))}}return r}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,t){if(e.numPoints)return t?kc({},e.properties):e.properties;const r=this.points[e.index].properties,n=this.options.map(r);return t&&n===r?kc({},n):n}}function Mc(e,t,r,n,o){return{x:xc(e),y:xc(t),zoom:1/0,id:r,parentId:-1,numPoints:n,properties:o}}function Tc(e,t){const[r,n]=e.geometry.coordinates;return{x:xc(Pc(r)),y:xc(Ec(n)),zoom:1/0,index:t,parentId:-1}}function Oc(e){return{type:"Feature",id:e.id,properties:Ic(e),geometry:{type:"Point",coordinates:[(t=e.x,360*(t-.5)),Cc(e.y)]}};var t}function Ic(e){const t=e.numPoints,r=t>=1e4?`${Math.round(t/1e3)}k`:t>=1e3?Math.round(t/100)/10+"k":t;return kc(kc({},e.properties),{cluster:!0,cluster_id:e.id,point_count:t,point_count_abbreviated:r})}function Pc(e){return e/360+.5}function Ec(e){const t=Math.sin(e*Math.PI/180),r=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return r<0?0:r>1?1:r}function Cc(e){const t=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(t))/Math.PI-90}function kc(e,t){for(const r in t)e[r]=t[r];return e}function _c(e){return e.x}function jc(e){return e.y}function Lc(e,t){const r=e.tileID.canonical;if(!this._geoJSONIndex)return t(null,null);const n=this._geoJSONIndex.getTile(r.z,r.x,r.y);if(!n)return t(null,null);const o=new U(n.features);let i=b(o);0===i.byteOffset&&i.byteLength===i.buffer.byteLength||(i=new Uint8Array(i)),t(null,{vectorTile:o,rawData:i.buffer})}class Nc extends r{constructor(e,t,r,n){super(e,t,r,Lc),n&&(this.loadGeoJSON=n)}loadData(t,r){var n;null===(n=this._pendingRequest)||void 0===n||n.cancel(),this._pendingCallback&&this._pendingCallback(null,{abandoned:!0});const o=!!(t&&t.request&&t.request.collectResourceTiming)&&new e.RequestPerformance(t.request);this._pendingCallback=r,this._pendingRequest=this.loadGeoJSON(t,((n,i)=>{if(delete this._pendingCallback,delete this._pendingRequest,n||!i)return r(n);if("object"!=typeof i)return r(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));{uc(i,!0);try{if(t.filter){const r=e.createExpression(t.filter,{type:"boolean","property-type":"data-driven",overridable:!1,transition:!1});if("error"===r.result)throw new Error(r.value.map((e=>`${e.key}: ${e.message}`)).join(", "));const n=i.features.filter((e=>r.value.evaluate({zoom:0},e)));i={type:"FeatureCollection",features:n}}this._geoJSONIndex=t.cluster?new Sc(function({superclusterOptions:t,clusterProperties:r}){if(!r||!t)return t;const n={},o={},i={accumulated:null,zoom:0},s={properties:null},a=Object.keys(r);for(const t of a){const[i,s]=r[t],a=e.createExpression(s),u=e.createExpression("string"==typeof i?[i,["accumulated"],["get",t]]:i);n[t]=a.value,o[t]=u.value}return t.map=e=>{s.properties=e;const t={};for(const e of a)t[e]=n[e].evaluate(i,s);return t},t.reduce=(e,t)=>{s.properties=t;for(const t of a)i.accumulated=e[t],e[t]=o[t].evaluate(i,s)},t}(t)).load(i.features):J(i,t.geojsonVtOptions)}catch(n){return r(n)}this.loaded={};const s={};if(o){const e=o.finish();e&&(s.resourceTiming={},s.resourceTiming[t.source]=JSON.parse(JSON.stringify(e)))}r(null,s)}}))}reloadTile(e,t){const r=this.loaded;return r&&r[e.uid]?super.reloadTile(e,t):this.loadTile(e,t)}loadGeoJSON(t,r){if(t.request)return e.getJSON(t.request,r);if("string"==typeof t.data)try{r(null,JSON.parse(t.data))}catch(e){r(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`))}else r(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));return{cancel:()=>{}}}removeSource(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),t()}getClusterExpansionZoom(e,t){try{t(null,this._geoJSONIndex.getClusterExpansionZoom(e.clusterId))}catch(e){t(e)}}getClusterChildren(e,t){try{t(null,this._geoJSONIndex.getChildren(e.clusterId))}catch(e){t(e)}}getClusterLeaves(e,t){try{t(null,this._geoJSONIndex.getLeaves(e.clusterId,e.limit,e.offset))}catch(e){t(e)}}}class Ac{constructor(t){this.self=t,this.actor=new e.Actor(t,this),this.layerIndexes={},this.availableImages={},this.workerSourceTypes={vector:r,temporalgrid:sc,geojson:Nc},this.workerSources={},this.demWorkerSources={},this.self.registerWorkerSource=(e,t)=>{if(this.workerSourceTypes[e])throw new Error(`Worker source with name "${e}" already registered.`);this.workerSourceTypes[e]=t},this.self.registerRTLTextPlugin=t=>{if(e.plugin.isParsed())throw new Error("RTL text plugin already registered.");e.plugin.applyArabicShaping=t.applyArabicShaping,e.plugin.processBidirectionalText=t.processBidirectionalText,e.plugin.processStyledBidirectionalText=t.processStyledBidirectionalText}}setReferrer(e,t){this.referrer=t}setImages(e,t,r){this.availableImages[e]=t;for(const r in this.workerSources[e]){const n=this.workerSources[e][r];for(const e in n)n[e].availableImages=t}r()}setLayers(e,t,r){this.getLayerIndex(e).replace(t),r()}updateLayers(e,t,r){this.getLayerIndex(e).update(t.layers,t.removedIds),r()}loadTile(e,t,r){this.getWorkerSource(e,t.type,t.source).loadTile(t,r)}loadDEMTile(e,t,r){this.getDEMWorkerSource(e,t.source).loadTile(t,r)}reloadTile(e,t,r){this.getWorkerSource(e,t.type,t.source).reloadTile(t,r)}abortTile(e,t,r){this.getWorkerSource(e,t.type,t.source).abortTile(t,r)}removeTile(e,t,r){this.getWorkerSource(e,t.type,t.source).removeTile(t,r)}removeDEMTile(e,t){this.getDEMWorkerSource(e,t.source).removeTile(t)}removeSource(e,t,r){if(!this.workerSources[e]||!this.workerSources[e][t.type]||!this.workerSources[e][t.type][t.source])return;const n=this.workerSources[e][t.type][t.source];delete this.workerSources[e][t.type][t.source],void 0!==n.removeSource?n.removeSource(t,r):r()}loadWorkerSource(e,t,r){try{this.self.importScripts(t.url),r()}catch(e){r(e.toString())}}syncRTLPluginState(t,r,n){try{e.plugin.setState(r);const t=e.plugin.getPluginURL();if(e.plugin.isLoaded()&&!e.plugin.isParsed()&&null!=t){this.self.importScripts(t);const r=e.plugin.isParsed();n(r?void 0:new Error(`RTL Text Plugin failed to import scripts from ${t}`),r)}}catch(e){n(e.toString())}}getAvailableImages(e){let t=this.availableImages[e];return t||(t=[]),t}getLayerIndex(t){let r=this.layerIndexes[t];return r||(r=this.layerIndexes[t]=new e.StyleLayerIndex),r}getWorkerSource(e,t,r){if(this.workerSources[e]||(this.workerSources[e]={}),this.workerSources[e][t]||(this.workerSources[e][t]={}),!this.workerSources[e][t][r]){const n={send:(t,r,n)=>{this.actor.send(t,r,n,e)}};this.workerSources[e][t][r]=new this.workerSourceTypes[t](n,this.getLayerIndex(e),this.getAvailableImages(e))}return this.workerSources[e][t][r]}getDEMWorkerSource(e,t){return this.demWorkerSources[e]||(this.demWorkerSources[e]={}),this.demWorkerSources[e][t]||(this.demWorkerSources[e][t]=new ac),this.demWorkerSources[e][t]}enforceCacheSizeLimit(t,r){e.enforceCacheSizeLimit(r)}}return"undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof self&&self instanceof WorkerGlobalScope&&(self.worker=new Ac(self)),Ac}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3ZlY3Rvcl90aWxlX3dvcmtlcl9zb3VyY2UudHMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnQtcGJmL2xpYi9nZW9qc29uX3dyYXBwZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnQtcGJmL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dlb2pzb24tdnQvc3JjL3NpbXBsaWZ5LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dlb2pzb24tdnQvc3JjL2ZlYXR1cmUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvY29udmVydC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nZW9qc29uLXZ0L3NyYy9jbGlwLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dlb2pzb24tdnQvc3JjL3dyYXAuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvdHJhbnNmb3JtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dlb2pzb24tdnQvc3JjL3RpbGUuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL2dlb2pzb25fd3JhcHBlci50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2UvbXVsdGlfc291cmNlX2dlb2pzb25fd3JhcHBlci50cyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AZ2xvYmFsZmlzaGluZ3dhdGNoL2ZvdXJ3aW5ncy1hZ2dyZWdhdGUvaW5kZXguZXNtLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXBib3gvdGlsZWJlbHQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3RlbXBvcmFsZ3JpZF90aWxlX3dvcmtlcl9zb3VyY2UudHMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL3Jhc3Rlcl9kZW1fdGlsZV93b3JrZXJfc291cmNlLnRzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXBib3gvZ2VvanNvbi1yZXdpbmQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMva2RidXNoL3NyYy9zb3J0LmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2tkYnVzaC9zcmMvd2l0aGluLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2tkYnVzaC9zcmMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMva2RidXNoL3NyYy9yYW5nZS5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdXBlcmNsdXN0ZXIvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9zcmMvc291cmNlL2dlb2pzb25fd29ya2VyX3NvdXJjZS50cyIsIi4uLy4uLy4uLy4uL3NyYy9zb3VyY2Uvd29ya2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbCwiJ3VzZSBzdHJpY3QnXG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknKVxudmFyIFZlY3RvclRpbGVGZWF0dXJlID0gcmVxdWlyZSgnQG1hcGJveC92ZWN0b3ItdGlsZScpLlZlY3RvclRpbGVGZWF0dXJlXG5cbm1vZHVsZS5leHBvcnRzID0gR2VvSlNPTldyYXBwZXJcblxuLy8gY29uZm9ybSB0byB2ZWN0b3J0aWxlIGFwaVxuZnVuY3Rpb24gR2VvSlNPTldyYXBwZXIgKGZlYXR1cmVzLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzXG4gIHRoaXMubGVuZ3RoID0gZmVhdHVyZXMubGVuZ3RoXG59XG5cbkdlb0pTT05XcmFwcGVyLnByb3RvdHlwZS5mZWF0dXJlID0gZnVuY3Rpb24gKGkpIHtcbiAgcmV0dXJuIG5ldyBGZWF0dXJlV3JhcHBlcih0aGlzLmZlYXR1cmVzW2ldLCB0aGlzLm9wdGlvbnMuZXh0ZW50KVxufVxuXG5mdW5jdGlvbiBGZWF0dXJlV3JhcHBlciAoZmVhdHVyZSwgZXh0ZW50KSB7XG4gIHRoaXMuaWQgPSB0eXBlb2YgZmVhdHVyZS5pZCA9PT0gJ251bWJlcicgPyBmZWF0dXJlLmlkIDogdW5kZWZpbmVkXG4gIHRoaXMudHlwZSA9IGZlYXR1cmUudHlwZVxuICB0aGlzLnJhd0dlb21ldHJ5ID0gZmVhdHVyZS50eXBlID09PSAxID8gW2ZlYXR1cmUuZ2VvbWV0cnldIDogZmVhdHVyZS5nZW9tZXRyeVxuICB0aGlzLnByb3BlcnRpZXMgPSBmZWF0dXJlLnRhZ3NcbiAgdGhpcy5leHRlbnQgPSBleHRlbnQgfHwgNDA5NlxufVxuXG5GZWF0dXJlV3JhcHBlci5wcm90b3R5cGUubG9hZEdlb21ldHJ5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmluZ3MgPSB0aGlzLnJhd0dlb21ldHJ5XG4gIHRoaXMuZ2VvbWV0cnkgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmluZyA9IHJpbmdzW2ldXG4gICAgdmFyIG5ld1JpbmcgPSBbXVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZy5sZW5ndGg7IGorKykge1xuICAgICAgbmV3UmluZy5wdXNoKG5ldyBQb2ludChyaW5nW2pdWzBdLCByaW5nW2pdWzFdKSlcbiAgICB9XG4gICAgdGhpcy5nZW9tZXRyeS5wdXNoKG5ld1JpbmcpXG4gIH1cbiAgcmV0dXJuIHRoaXMuZ2VvbWV0cnlcbn1cblxuRmVhdHVyZVdyYXBwZXIucHJvdG90eXBlLmJib3ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5nZW9tZXRyeSkgdGhpcy5sb2FkR2VvbWV0cnkoKVxuXG4gIHZhciByaW5ncyA9IHRoaXMuZ2VvbWV0cnlcbiAgdmFyIHgxID0gSW5maW5pdHlcbiAgdmFyIHgyID0gLUluZmluaXR5XG4gIHZhciB5MSA9IEluZmluaXR5XG4gIHZhciB5MiA9IC1JbmZpbml0eVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmluZyA9IHJpbmdzW2ldXG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJpbmcubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBjb29yZCA9IHJpbmdbal1cblxuICAgICAgeDEgPSBNYXRoLm1pbih4MSwgY29vcmQueClcbiAgICAgIHgyID0gTWF0aC5tYXgoeDIsIGNvb3JkLngpXG4gICAgICB5MSA9IE1hdGgubWluKHkxLCBjb29yZC55KVxuICAgICAgeTIgPSBNYXRoLm1heCh5MiwgY29vcmQueSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3gxLCB5MSwgeDIsIHkyXVxufVxuXG5GZWF0dXJlV3JhcHBlci5wcm90b3R5cGUudG9HZW9KU09OID0gVmVjdG9yVGlsZUZlYXR1cmUucHJvdG90eXBlLnRvR2VvSlNPTlxuIiwidmFyIFBiZiA9IHJlcXVpcmUoJ3BiZicpXG52YXIgR2VvSlNPTldyYXBwZXIgPSByZXF1aXJlKCcuL2xpYi9nZW9qc29uX3dyYXBwZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZyb21WZWN0b3JUaWxlSnNcbm1vZHVsZS5leHBvcnRzLmZyb21WZWN0b3JUaWxlSnMgPSBmcm9tVmVjdG9yVGlsZUpzXG5tb2R1bGUuZXhwb3J0cy5mcm9tR2VvanNvblZ0ID0gZnJvbUdlb2pzb25WdFxubW9kdWxlLmV4cG9ydHMuR2VvSlNPTldyYXBwZXIgPSBHZW9KU09OV3JhcHBlclxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIHZlY3Rvci10aWxlLWpzLWNyZWF0ZWQgdGlsZSB0byBwYmZcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGlsZVxuICogQHJldHVybiB7QnVmZmVyfSB1bmNvbXByZXNzZWQsIHBiZi1zZXJpYWxpemVkIHRpbGUgZGF0YVxuICovXG5mdW5jdGlvbiBmcm9tVmVjdG9yVGlsZUpzICh0aWxlKSB7XG4gIHZhciBvdXQgPSBuZXcgUGJmKClcbiAgd3JpdGVUaWxlKHRpbGUsIG91dClcbiAgcmV0dXJuIG91dC5maW5pc2goKVxufVxuXG4vKipcbiAqIFNlcmlhbGl6ZWQgYSBnZW9qc29uLXZ0LWNyZWF0ZWQgdGlsZSB0byBwYmYuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGxheWVycyAtIEFuIG9iamVjdCBtYXBwaW5nIGxheWVyIG5hbWVzIHRvIGdlb2pzb24tdnQtY3JlYXRlZCB2ZWN0b3IgdGlsZSBvYmplY3RzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQW4gb2JqZWN0IHNwZWNpZnlpbmcgdGhlIHZlY3Rvci10aWxlIHNwZWNpZmljYXRpb24gdmVyc2lvbiBhbmQgZXh0ZW50IHRoYXQgd2VyZSB1c2VkIHRvIGNyZWF0ZSBgbGF5ZXJzYC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52ZXJzaW9uPTFdIC0gVmVyc2lvbiBvZiB2ZWN0b3ItdGlsZSBzcGVjIHVzZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5leHRlbnQ9NDA5Nl0gLSBFeHRlbnQgb2YgdGhlIHZlY3RvciB0aWxlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHVuY29tcHJlc3NlZCwgcGJmLXNlcmlhbGl6ZWQgdGlsZSBkYXRhXG4gKi9cbmZ1bmN0aW9uIGZyb21HZW9qc29uVnQgKGxheWVycywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgbCA9IHt9XG4gIGZvciAodmFyIGsgaW4gbGF5ZXJzKSB7XG4gICAgbFtrXSA9IG5ldyBHZW9KU09OV3JhcHBlcihsYXllcnNba10uZmVhdHVyZXMsIG9wdGlvbnMpXG4gICAgbFtrXS5uYW1lID0ga1xuICAgIGxba10udmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvblxuICAgIGxba10uZXh0ZW50ID0gb3B0aW9ucy5leHRlbnRcbiAgfVxuICByZXR1cm4gZnJvbVZlY3RvclRpbGVKcyh7IGxheWVyczogbCB9KVxufVxuXG5mdW5jdGlvbiB3cml0ZVRpbGUgKHRpbGUsIHBiZikge1xuICBmb3IgKHZhciBrZXkgaW4gdGlsZS5sYXllcnMpIHtcbiAgICBwYmYud3JpdGVNZXNzYWdlKDMsIHdyaXRlTGF5ZXIsIHRpbGUubGF5ZXJzW2tleV0pXG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVMYXllciAobGF5ZXIsIHBiZikge1xuICBwYmYud3JpdGVWYXJpbnRGaWVsZCgxNSwgbGF5ZXIudmVyc2lvbiB8fCAxKVxuICBwYmYud3JpdGVTdHJpbmdGaWVsZCgxLCBsYXllci5uYW1lIHx8ICcnKVxuICBwYmYud3JpdGVWYXJpbnRGaWVsZCg1LCBsYXllci5leHRlbnQgfHwgNDA5NilcblxuICB2YXIgaVxuICB2YXIgY29udGV4dCA9IHtcbiAgICBrZXlzOiBbXSxcbiAgICB2YWx1ZXM6IFtdLFxuICAgIGtleWNhY2hlOiB7fSxcbiAgICB2YWx1ZWNhY2hlOiB7fVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGxheWVyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29udGV4dC5mZWF0dXJlID0gbGF5ZXIuZmVhdHVyZShpKVxuICAgIHBiZi53cml0ZU1lc3NhZ2UoMiwgd3JpdGVGZWF0dXJlLCBjb250ZXh0KVxuICB9XG5cbiAgdmFyIGtleXMgPSBjb250ZXh0LmtleXNcbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBwYmYud3JpdGVTdHJpbmdGaWVsZCgzLCBrZXlzW2ldKVxuICB9XG5cbiAgdmFyIHZhbHVlcyA9IGNvbnRleHQudmFsdWVzXG4gIGZvciAoaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBwYmYud3JpdGVNZXNzYWdlKDQsIHdyaXRlVmFsdWUsIHZhbHVlc1tpXSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3cml0ZUZlYXR1cmUgKGNvbnRleHQsIHBiZikge1xuICB2YXIgZmVhdHVyZSA9IGNvbnRleHQuZmVhdHVyZVxuXG4gIGlmIChmZWF0dXJlLmlkICE9PSB1bmRlZmluZWQpIHtcbiAgICBwYmYud3JpdGVWYXJpbnRGaWVsZCgxLCBmZWF0dXJlLmlkKVxuICB9XG5cbiAgcGJmLndyaXRlTWVzc2FnZSgyLCB3cml0ZVByb3BlcnRpZXMsIGNvbnRleHQpXG4gIHBiZi53cml0ZVZhcmludEZpZWxkKDMsIGZlYXR1cmUudHlwZSlcbiAgcGJmLndyaXRlTWVzc2FnZSg0LCB3cml0ZUdlb21ldHJ5LCBmZWF0dXJlKVxufVxuXG5mdW5jdGlvbiB3cml0ZVByb3BlcnRpZXMgKGNvbnRleHQsIHBiZikge1xuICB2YXIgZmVhdHVyZSA9IGNvbnRleHQuZmVhdHVyZVxuICB2YXIga2V5cyA9IGNvbnRleHQua2V5c1xuICB2YXIgdmFsdWVzID0gY29udGV4dC52YWx1ZXNcbiAgdmFyIGtleWNhY2hlID0gY29udGV4dC5rZXljYWNoZVxuICB2YXIgdmFsdWVjYWNoZSA9IGNvbnRleHQudmFsdWVjYWNoZVxuXG4gIGZvciAodmFyIGtleSBpbiBmZWF0dXJlLnByb3BlcnRpZXMpIHtcbiAgICB2YXIgdmFsdWUgPSBmZWF0dXJlLnByb3BlcnRpZXNba2V5XVxuXG4gICAgdmFyIGtleUluZGV4ID0ga2V5Y2FjaGVba2V5XVxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgY29udGludWUgLy8gZG9uJ3QgZW5jb2RlIG51bGwgdmFsdWUgcHJvcGVydGllc1xuXG4gICAgaWYgKHR5cGVvZiBrZXlJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGtleXMucHVzaChrZXkpXG4gICAgICBrZXlJbmRleCA9IGtleXMubGVuZ3RoIC0gMVxuICAgICAga2V5Y2FjaGVba2V5XSA9IGtleUluZGV4XG4gICAgfVxuICAgIHBiZi53cml0ZVZhcmludChrZXlJbmRleClcblxuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlXG4gICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnICYmIHR5cGUgIT09ICdib29sZWFuJyAmJiB0eXBlICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICB9XG4gICAgdmFyIHZhbHVlS2V5ID0gdHlwZSArICc6JyArIHZhbHVlXG4gICAgdmFyIHZhbHVlSW5kZXggPSB2YWx1ZWNhY2hlW3ZhbHVlS2V5XVxuICAgIGlmICh0eXBlb2YgdmFsdWVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgICAgdmFsdWVJbmRleCA9IHZhbHVlcy5sZW5ndGggLSAxXG4gICAgICB2YWx1ZWNhY2hlW3ZhbHVlS2V5XSA9IHZhbHVlSW5kZXhcbiAgICB9XG4gICAgcGJmLndyaXRlVmFyaW50KHZhbHVlSW5kZXgpXG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWFuZCAoY21kLCBsZW5ndGgpIHtcbiAgcmV0dXJuIChsZW5ndGggPDwgMykgKyAoY21kICYgMHg3KVxufVxuXG5mdW5jdGlvbiB6aWd6YWcgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSBeIChudW0gPj4gMzEpXG59XG5cbmZ1bmN0aW9uIHdyaXRlR2VvbWV0cnkgKGZlYXR1cmUsIHBiZikge1xuICB2YXIgZ2VvbWV0cnkgPSBmZWF0dXJlLmxvYWRHZW9tZXRyeSgpXG4gIHZhciB0eXBlID0gZmVhdHVyZS50eXBlXG4gIHZhciB4ID0gMFxuICB2YXIgeSA9IDBcbiAgdmFyIHJpbmdzID0gZ2VvbWV0cnkubGVuZ3RoXG4gIGZvciAodmFyIHIgPSAwOyByIDwgcmluZ3M7IHIrKykge1xuICAgIHZhciByaW5nID0gZ2VvbWV0cnlbcl1cbiAgICB2YXIgY291bnQgPSAxXG4gICAgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgIGNvdW50ID0gcmluZy5sZW5ndGhcbiAgICB9XG4gICAgcGJmLndyaXRlVmFyaW50KGNvbW1hbmQoMSwgY291bnQpKSAvLyBtb3ZldG9cbiAgICAvLyBkbyBub3Qgd3JpdGUgcG9seWdvbiBjbG9zaW5nIHBhdGggYXMgbGluZXRvXG4gICAgdmFyIGxpbmVDb3VudCA9IHR5cGUgPT09IDMgPyByaW5nLmxlbmd0aCAtIDEgOiByaW5nLmxlbmd0aFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZUNvdW50OyBpKyspIHtcbiAgICAgIGlmIChpID09PSAxICYmIHR5cGUgIT09IDEpIHtcbiAgICAgICAgcGJmLndyaXRlVmFyaW50KGNvbW1hbmQoMiwgbGluZUNvdW50IC0gMSkpIC8vIGxpbmV0b1xuICAgICAgfVxuICAgICAgdmFyIGR4ID0gcmluZ1tpXS54IC0geFxuICAgICAgdmFyIGR5ID0gcmluZ1tpXS55IC0geVxuICAgICAgcGJmLndyaXRlVmFyaW50KHppZ3phZyhkeCkpXG4gICAgICBwYmYud3JpdGVWYXJpbnQoemlnemFnKGR5KSlcbiAgICAgIHggKz0gZHhcbiAgICAgIHkgKz0gZHlcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgIHBiZi53cml0ZVZhcmludChjb21tYW5kKDcsIDEpKSAvLyBjbG9zZXBhdGhcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVWYWx1ZSAodmFsdWUsIHBiZikge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZVxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBwYmYud3JpdGVTdHJpbmdGaWVsZCgxLCB2YWx1ZSlcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICBwYmYud3JpdGVCb29sZWFuRmllbGQoNywgdmFsdWUpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodmFsdWUgJSAxICE9PSAwKSB7XG4gICAgICBwYmYud3JpdGVEb3VibGVGaWVsZCgzLCB2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgcGJmLndyaXRlU1ZhcmludEZpZWxkKDYsIHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBwYmYud3JpdGVWYXJpbnRGaWVsZCg1LCB2YWx1ZSlcbiAgICB9XG4gIH1cbn1cbiIsIlxuLy8gY2FsY3VsYXRlIHNpbXBsaWZpY2F0aW9uIGRhdGEgdXNpbmcgb3B0aW1pemVkIERvdWdsYXMtUGV1Y2tlciBhbGdvcml0aG1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2ltcGxpZnkoY29vcmRzLCBmaXJzdCwgbGFzdCwgc3FUb2xlcmFuY2UpIHtcbiAgICB2YXIgbWF4U3FEaXN0ID0gc3FUb2xlcmFuY2U7XG4gICAgdmFyIG1pZCA9IChsYXN0IC0gZmlyc3QpID4+IDE7XG4gICAgdmFyIG1pblBvc1RvTWlkID0gbGFzdCAtIGZpcnN0O1xuICAgIHZhciBpbmRleDtcblxuICAgIHZhciBheCA9IGNvb3Jkc1tmaXJzdF07XG4gICAgdmFyIGF5ID0gY29vcmRzW2ZpcnN0ICsgMV07XG4gICAgdmFyIGJ4ID0gY29vcmRzW2xhc3RdO1xuICAgIHZhciBieSA9IGNvb3Jkc1tsYXN0ICsgMV07XG5cbiAgICBmb3IgKHZhciBpID0gZmlyc3QgKyAzOyBpIDwgbGFzdDsgaSArPSAzKSB7XG4gICAgICAgIHZhciBkID0gZ2V0U3FTZWdEaXN0KGNvb3Jkc1tpXSwgY29vcmRzW2kgKyAxXSwgYXgsIGF5LCBieCwgYnkpO1xuXG4gICAgICAgIGlmIChkID4gbWF4U3FEaXN0KSB7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICBtYXhTcURpc3QgPSBkO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoZCA9PT0gbWF4U3FEaXN0KSB7XG4gICAgICAgICAgICAvLyBhIHdvcmthcm91bmQgdG8gZW5zdXJlIHdlIGNob29zZSBhIHBpdm90IGNsb3NlIHRvIHRoZSBtaWRkbGUgb2YgdGhlIGxpc3QsXG4gICAgICAgICAgICAvLyByZWR1Y2luZyByZWN1cnNpb24gZGVwdGgsIGZvciBjZXJ0YWluIGRlZ2VuZXJhdGUgaW5wdXRzXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L2dlb2pzb24tdnQvaXNzdWVzLzEwNFxuICAgICAgICAgICAgdmFyIHBvc1RvTWlkID0gTWF0aC5hYnMoaSAtIG1pZCk7XG4gICAgICAgICAgICBpZiAocG9zVG9NaWQgPCBtaW5Qb3NUb01pZCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBtaW5Qb3NUb01pZCA9IHBvc1RvTWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1heFNxRGlzdCA+IHNxVG9sZXJhbmNlKSB7XG4gICAgICAgIGlmIChpbmRleCAtIGZpcnN0ID4gMykgc2ltcGxpZnkoY29vcmRzLCBmaXJzdCwgaW5kZXgsIHNxVG9sZXJhbmNlKTtcbiAgICAgICAgY29vcmRzW2luZGV4ICsgMl0gPSBtYXhTcURpc3Q7XG4gICAgICAgIGlmIChsYXN0IC0gaW5kZXggPiAzKSBzaW1wbGlmeShjb29yZHMsIGluZGV4LCBsYXN0LCBzcVRvbGVyYW5jZSk7XG4gICAgfVxufVxuXG4vLyBzcXVhcmUgZGlzdGFuY2UgZnJvbSBhIHBvaW50IHRvIGEgc2VnbWVudFxuZnVuY3Rpb24gZ2V0U3FTZWdEaXN0KHB4LCBweSwgeCwgeSwgYngsIGJ5KSB7XG5cbiAgICB2YXIgZHggPSBieCAtIHg7XG4gICAgdmFyIGR5ID0gYnkgLSB5O1xuXG4gICAgaWYgKGR4ICE9PSAwIHx8IGR5ICE9PSAwKSB7XG5cbiAgICAgICAgdmFyIHQgPSAoKHB4IC0geCkgKiBkeCArIChweSAtIHkpICogZHkpIC8gKGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgICAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgICAgIHggPSBieDtcbiAgICAgICAgICAgIHkgPSBieTtcblxuICAgICAgICB9IGVsc2UgaWYgKHQgPiAwKSB7XG4gICAgICAgICAgICB4ICs9IGR4ICogdDtcbiAgICAgICAgICAgIHkgKz0gZHkgKiB0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHggPSBweCAtIHg7XG4gICAgZHkgPSBweSAtIHk7XG5cbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG4iLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUZlYXR1cmUoaWQsIHR5cGUsIGdlb20sIHRhZ3MpIHtcbiAgICB2YXIgZmVhdHVyZSA9IHtcbiAgICAgICAgaWQ6IHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogaWQsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGdlb21ldHJ5OiBnZW9tLFxuICAgICAgICB0YWdzOiB0YWdzLFxuICAgICAgICBtaW5YOiBJbmZpbml0eSxcbiAgICAgICAgbWluWTogSW5maW5pdHksXG4gICAgICAgIG1heFg6IC1JbmZpbml0eSxcbiAgICAgICAgbWF4WTogLUluZmluaXR5XG4gICAgfTtcbiAgICBjYWxjQkJveChmZWF0dXJlKTtcbiAgICByZXR1cm4gZmVhdHVyZTtcbn1cblxuZnVuY3Rpb24gY2FsY0JCb3goZmVhdHVyZSkge1xuICAgIHZhciBnZW9tID0gZmVhdHVyZS5nZW9tZXRyeTtcbiAgICB2YXIgdHlwZSA9IGZlYXR1cmUudHlwZTtcblxuICAgIGlmICh0eXBlID09PSAnUG9pbnQnIHx8IHR5cGUgPT09ICdNdWx0aVBvaW50JyB8fCB0eXBlID09PSAnTGluZVN0cmluZycpIHtcbiAgICAgICAgY2FsY0xpbmVCQm94KGZlYXR1cmUsIGdlb20pO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnUG9seWdvbicgfHwgdHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjYWxjTGluZUJCb3goZmVhdHVyZSwgZ2VvbVtpXSk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGdlb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2VvbVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNhbGNMaW5lQkJveChmZWF0dXJlLCBnZW9tW2ldW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FsY0xpbmVCQm94KGZlYXR1cmUsIGdlb20pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb20ubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgZmVhdHVyZS5taW5YID0gTWF0aC5taW4oZmVhdHVyZS5taW5YLCBnZW9tW2ldKTtcbiAgICAgICAgZmVhdHVyZS5taW5ZID0gTWF0aC5taW4oZmVhdHVyZS5taW5ZLCBnZW9tW2kgKyAxXSk7XG4gICAgICAgIGZlYXR1cmUubWF4WCA9IE1hdGgubWF4KGZlYXR1cmUubWF4WCwgZ2VvbVtpXSk7XG4gICAgICAgIGZlYXR1cmUubWF4WSA9IE1hdGgubWF4KGZlYXR1cmUubWF4WSwgZ2VvbVtpICsgMV0pO1xuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHNpbXBsaWZ5IGZyb20gJy4vc2ltcGxpZnknO1xuaW1wb3J0IGNyZWF0ZUZlYXR1cmUgZnJvbSAnLi9mZWF0dXJlJztcblxuLy8gY29udmVydHMgR2VvSlNPTiBmZWF0dXJlIGludG8gYW4gaW50ZXJtZWRpYXRlIHByb2plY3RlZCBKU09OIHZlY3RvciBmb3JtYXQgd2l0aCBzaW1wbGlmaWNhdGlvbiBkYXRhXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnZlcnQoZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIGlmIChkYXRhLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb252ZXJ0RmVhdHVyZShmZWF0dXJlcywgZGF0YS5mZWF0dXJlc1tpXSwgb3B0aW9ucywgaSk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnRmVhdHVyZScpIHtcbiAgICAgICAgY29udmVydEZlYXR1cmUoZmVhdHVyZXMsIGRhdGEsIG9wdGlvbnMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2luZ2xlIGdlb21ldHJ5IG9yIGEgZ2VvbWV0cnkgY29sbGVjdGlvblxuICAgICAgICBjb252ZXJ0RmVhdHVyZShmZWF0dXJlcywge2dlb21ldHJ5OiBkYXRhfSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZlYXR1cmVzO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RmVhdHVyZShmZWF0dXJlcywgZ2VvanNvbiwgb3B0aW9ucywgaW5kZXgpIHtcbiAgICBpZiAoIWdlb2pzb24uZ2VvbWV0cnkpIHJldHVybjtcblxuICAgIHZhciBjb29yZHMgPSBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgIHZhciB0eXBlID0gZ2VvanNvbi5nZW9tZXRyeS50eXBlO1xuICAgIHZhciB0b2xlcmFuY2UgPSBNYXRoLnBvdyhvcHRpb25zLnRvbGVyYW5jZSAvICgoMSA8PCBvcHRpb25zLm1heFpvb20pICogb3B0aW9ucy5leHRlbnQpLCAyKTtcbiAgICB2YXIgZ2VvbWV0cnkgPSBbXTtcbiAgICB2YXIgaWQgPSBnZW9qc29uLmlkO1xuICAgIGlmIChvcHRpb25zLnByb21vdGVJZCkge1xuICAgICAgICBpZCA9IGdlb2pzb24ucHJvcGVydGllc1tvcHRpb25zLnByb21vdGVJZF07XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmdlbmVyYXRlSWQpIHtcbiAgICAgICAgaWQgPSBpbmRleCB8fCAwO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1BvaW50Jykge1xuICAgICAgICBjb252ZXJ0UG9pbnQoY29vcmRzLCBnZW9tZXRyeSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdNdWx0aVBvaW50Jykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29udmVydFBvaW50KGNvb3Jkc1tpXSwgZ2VvbWV0cnkpO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICBjb252ZXJ0TGluZShjb29yZHMsIGdlb21ldHJ5LCB0b2xlcmFuY2UsIGZhbHNlKTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubGluZU1ldHJpY3MpIHtcbiAgICAgICAgICAgIC8vIGV4cGxvZGUgaW50byBsaW5lc3RyaW5ncyB0byBiZSBhYmxlIHRvIHRyYWNrIG1ldHJpY3NcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnZlcnRMaW5lKGNvb3Jkc1tpXSwgZ2VvbWV0cnksIHRvbGVyYW5jZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goY3JlYXRlRmVhdHVyZShpZCwgJ0xpbmVTdHJpbmcnLCBnZW9tZXRyeSwgZ2VvanNvbi5wcm9wZXJ0aWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb252ZXJ0TGluZXMoY29vcmRzLCBnZW9tZXRyeSwgdG9sZXJhbmNlLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIGNvbnZlcnRMaW5lcyhjb29yZHMsIGdlb21ldHJ5LCB0b2xlcmFuY2UsIHRydWUpO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcG9seWdvbiA9IFtdO1xuICAgICAgICAgICAgY29udmVydExpbmVzKGNvb3Jkc1tpXSwgcG9seWdvbiwgdG9sZXJhbmNlLCB0cnVlKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LnB1c2gocG9seWdvbik7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBnZW9qc29uLmdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnZlcnRGZWF0dXJlKGZlYXR1cmVzLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBnZW9qc29uLmdlb21ldHJ5Lmdlb21ldHJpZXNbaV0sXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogZ2VvanNvbi5wcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LCBvcHRpb25zLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBpcyBub3QgYSB2YWxpZCBHZW9KU09OIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICBmZWF0dXJlcy5wdXNoKGNyZWF0ZUZlYXR1cmUoaWQsIHR5cGUsIGdlb21ldHJ5LCBnZW9qc29uLnByb3BlcnRpZXMpKTtcbn1cblxuZnVuY3Rpb24gY29udmVydFBvaW50KGNvb3Jkcywgb3V0KSB7XG4gICAgb3V0LnB1c2gocHJvamVjdFgoY29vcmRzWzBdKSk7XG4gICAgb3V0LnB1c2gocHJvamVjdFkoY29vcmRzWzFdKSk7XG4gICAgb3V0LnB1c2goMCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRMaW5lKHJpbmcsIG91dCwgdG9sZXJhbmNlLCBpc1BvbHlnb24pIHtcbiAgICB2YXIgeDAsIHkwO1xuICAgIHZhciBzaXplID0gMDtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgeCA9IHByb2plY3RYKHJpbmdbal1bMF0pO1xuICAgICAgICB2YXIgeSA9IHByb2plY3RZKHJpbmdbal1bMV0pO1xuXG4gICAgICAgIG91dC5wdXNoKHgpO1xuICAgICAgICBvdXQucHVzaCh5KTtcbiAgICAgICAgb3V0LnB1c2goMCk7XG5cbiAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICBpZiAoaXNQb2x5Z29uKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSAoeDAgKiB5IC0geCAqIHkwKSAvIDI7IC8vIGFyZWFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIHgwLCAyKSArIE1hdGgucG93KHkgLSB5MCwgMikpOyAvLyBsZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB4MCA9IHg7XG4gICAgICAgIHkwID0geTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdCA9IG91dC5sZW5ndGggLSAzO1xuICAgIG91dFsyXSA9IDE7XG4gICAgc2ltcGxpZnkob3V0LCAwLCBsYXN0LCB0b2xlcmFuY2UpO1xuICAgIG91dFtsYXN0ICsgMl0gPSAxO1xuXG4gICAgb3V0LnNpemUgPSBNYXRoLmFicyhzaXplKTtcbiAgICBvdXQuc3RhcnQgPSAwO1xuICAgIG91dC5lbmQgPSBvdXQuc2l6ZTtcbn1cblxuZnVuY3Rpb24gY29udmVydExpbmVzKHJpbmdzLCBvdXQsIHRvbGVyYW5jZSwgaXNQb2x5Z29uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZ2VvbSA9IFtdO1xuICAgICAgICBjb252ZXJ0TGluZShyaW5nc1tpXSwgZ2VvbSwgdG9sZXJhbmNlLCBpc1BvbHlnb24pO1xuICAgICAgICBvdXQucHVzaChnZW9tKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb2plY3RYKHgpIHtcbiAgICByZXR1cm4geCAvIDM2MCArIDAuNTtcbn1cblxuZnVuY3Rpb24gcHJvamVjdFkoeSkge1xuICAgIHZhciBzaW4gPSBNYXRoLnNpbih5ICogTWF0aC5QSSAvIDE4MCk7XG4gICAgdmFyIHkyID0gMC41IC0gMC4yNSAqIE1hdGgubG9nKCgxICsgc2luKSAvICgxIC0gc2luKSkgLyBNYXRoLlBJO1xuICAgIHJldHVybiB5MiA8IDAgPyAwIDogeTIgPiAxID8gMSA6IHkyO1xufVxuIiwiXG5pbXBvcnQgY3JlYXRlRmVhdHVyZSBmcm9tICcuL2ZlYXR1cmUnO1xuXG4vKiBjbGlwIGZlYXR1cmVzIGJldHdlZW4gdHdvIGF4aXMtcGFyYWxsZWwgbGluZXM6XG4gKiAgICAgfCAgICAgICAgfFxuICogIF9fX3xfX18gICAgIHwgICAgIC9cbiAqIC8gICB8ICAgXFxfX19ffF9fX18vXG4gKiAgICAgfCAgICAgICAgfFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaXAoZmVhdHVyZXMsIHNjYWxlLCBrMSwgazIsIGF4aXMsIG1pbkFsbCwgbWF4QWxsLCBvcHRpb25zKSB7XG5cbiAgICBrMSAvPSBzY2FsZTtcbiAgICBrMiAvPSBzY2FsZTtcblxuICAgIGlmIChtaW5BbGwgPj0gazEgJiYgbWF4QWxsIDwgazIpIHJldHVybiBmZWF0dXJlczsgLy8gdHJpdmlhbCBhY2NlcHRcbiAgICBlbHNlIGlmIChtYXhBbGwgPCBrMSB8fCBtaW5BbGwgPj0gazIpIHJldHVybiBudWxsOyAvLyB0cml2aWFsIHJlamVjdFxuXG4gICAgdmFyIGNsaXBwZWQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVzW2ldO1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBmZWF0dXJlLmdlb21ldHJ5O1xuICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUudHlwZTtcblxuICAgICAgICB2YXIgbWluID0gYXhpcyA9PT0gMCA/IGZlYXR1cmUubWluWCA6IGZlYXR1cmUubWluWTtcbiAgICAgICAgdmFyIG1heCA9IGF4aXMgPT09IDAgPyBmZWF0dXJlLm1heFggOiBmZWF0dXJlLm1heFk7XG5cbiAgICAgICAgaWYgKG1pbiA+PSBrMSAmJiBtYXggPCBrMikgeyAvLyB0cml2aWFsIGFjY2VwdFxuICAgICAgICAgICAgY2xpcHBlZC5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAobWF4IDwgazEgfHwgbWluID49IGsyKSB7IC8vIHRyaXZpYWwgcmVqZWN0XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdHZW9tZXRyeSA9IFtdO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnUG9pbnQnIHx8IHR5cGUgPT09ICdNdWx0aVBvaW50Jykge1xuICAgICAgICAgICAgY2xpcFBvaW50cyhnZW9tZXRyeSwgbmV3R2VvbWV0cnksIGsxLCBrMiwgYXhpcyk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTGluZVN0cmluZycpIHtcbiAgICAgICAgICAgIGNsaXBMaW5lKGdlb21ldHJ5LCBuZXdHZW9tZXRyeSwgazEsIGsyLCBheGlzLCBmYWxzZSwgb3B0aW9ucy5saW5lTWV0cmljcyk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJykge1xuICAgICAgICAgICAgY2xpcExpbmVzKGdlb21ldHJ5LCBuZXdHZW9tZXRyeSwgazEsIGsyLCBheGlzLCBmYWxzZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgICAgIGNsaXBMaW5lcyhnZW9tZXRyeSwgbmV3R2VvbWV0cnksIGsxLCBrMiwgYXhpcywgdHJ1ZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBnZW9tZXRyeS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBwb2x5Z29uID0gW107XG4gICAgICAgICAgICAgICAgY2xpcExpbmVzKGdlb21ldHJ5W2pdLCBwb2x5Z29uLCBrMSwgazIsIGF4aXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChwb2x5Z29uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdHZW9tZXRyeS5wdXNoKHBvbHlnb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdHZW9tZXRyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxpbmVNZXRyaWNzICYmIHR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdHZW9tZXRyeS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjbGlwcGVkLnB1c2goY3JlYXRlRmVhdHVyZShmZWF0dXJlLmlkLCB0eXBlLCBuZXdHZW9tZXRyeVtqXSwgZmVhdHVyZS50YWdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ0xpbmVTdHJpbmcnIHx8IHR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0dlb21ldHJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ0xpbmVTdHJpbmcnO1xuICAgICAgICAgICAgICAgICAgICBuZXdHZW9tZXRyeSA9IG5ld0dlb21ldHJ5WzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnTXVsdGlMaW5lU3RyaW5nJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1BvaW50JyB8fCB0eXBlID09PSAnTXVsdGlQb2ludCcpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gbmV3R2VvbWV0cnkubGVuZ3RoID09PSAzID8gJ1BvaW50JyA6ICdNdWx0aVBvaW50JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xpcHBlZC5wdXNoKGNyZWF0ZUZlYXR1cmUoZmVhdHVyZS5pZCwgdHlwZSwgbmV3R2VvbWV0cnksIGZlYXR1cmUudGFncykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBwZWQubGVuZ3RoID8gY2xpcHBlZCA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsaXBQb2ludHMoZ2VvbSwgbmV3R2VvbSwgazEsIGsyLCBheGlzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciBhID0gZ2VvbVtpICsgYXhpc107XG5cbiAgICAgICAgaWYgKGEgPj0gazEgJiYgYSA8PSBrMikge1xuICAgICAgICAgICAgbmV3R2VvbS5wdXNoKGdlb21baV0pO1xuICAgICAgICAgICAgbmV3R2VvbS5wdXNoKGdlb21baSArIDFdKTtcbiAgICAgICAgICAgIG5ld0dlb20ucHVzaChnZW9tW2kgKyAyXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsaXBMaW5lKGdlb20sIG5ld0dlb20sIGsxLCBrMiwgYXhpcywgaXNQb2x5Z29uLCB0cmFja01ldHJpY3MpIHtcblxuICAgIHZhciBzbGljZSA9IG5ld1NsaWNlKGdlb20pO1xuICAgIHZhciBpbnRlcnNlY3QgPSBheGlzID09PSAwID8gaW50ZXJzZWN0WCA6IGludGVyc2VjdFk7XG4gICAgdmFyIGxlbiA9IGdlb20uc3RhcnQ7XG4gICAgdmFyIHNlZ0xlbiwgdDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbS5sZW5ndGggLSAzOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIGF4ID0gZ2VvbVtpXTtcbiAgICAgICAgdmFyIGF5ID0gZ2VvbVtpICsgMV07XG4gICAgICAgIHZhciBheiA9IGdlb21baSArIDJdO1xuICAgICAgICB2YXIgYnggPSBnZW9tW2kgKyAzXTtcbiAgICAgICAgdmFyIGJ5ID0gZ2VvbVtpICsgNF07XG4gICAgICAgIHZhciBhID0gYXhpcyA9PT0gMCA/IGF4IDogYXk7XG4gICAgICAgIHZhciBiID0gYXhpcyA9PT0gMCA/IGJ4IDogYnk7XG4gICAgICAgIHZhciBleGl0ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodHJhY2tNZXRyaWNzKSBzZWdMZW4gPSBNYXRoLnNxcnQoTWF0aC5wb3coYXggLSBieCwgMikgKyBNYXRoLnBvdyhheSAtIGJ5LCAyKSk7XG5cbiAgICAgICAgaWYgKGEgPCBrMSkge1xuICAgICAgICAgICAgLy8gLS0tfC0tPiAgfCAobGluZSBlbnRlcnMgdGhlIGNsaXAgcmVnaW9uIGZyb20gdGhlIGxlZnQpXG4gICAgICAgICAgICBpZiAoYiA+IGsxKSB7XG4gICAgICAgICAgICAgICAgdCA9IGludGVyc2VjdChzbGljZSwgYXgsIGF5LCBieCwgYnksIGsxKTtcbiAgICAgICAgICAgICAgICBpZiAodHJhY2tNZXRyaWNzKSBzbGljZS5zdGFydCA9IGxlbiArIHNlZ0xlbiAqIHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYSA+IGsyKSB7XG4gICAgICAgICAgICAvLyB8ICA8LS18LS0tIChsaW5lIGVudGVycyB0aGUgY2xpcCByZWdpb24gZnJvbSB0aGUgcmlnaHQpXG4gICAgICAgICAgICBpZiAoYiA8IGsyKSB7XG4gICAgICAgICAgICAgICAgdCA9IGludGVyc2VjdChzbGljZSwgYXgsIGF5LCBieCwgYnksIGsyKTtcbiAgICAgICAgICAgICAgICBpZiAodHJhY2tNZXRyaWNzKSBzbGljZS5zdGFydCA9IGxlbiArIHNlZ0xlbiAqIHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGRQb2ludChzbGljZSwgYXgsIGF5LCBheik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgPCBrMSAmJiBhID49IGsxKSB7XG4gICAgICAgICAgICAvLyA8LS18LS0tICB8IG9yIDwtLXwtLS0tLXwtLS0gKGxpbmUgZXhpdHMgdGhlIGNsaXAgcmVnaW9uIG9uIHRoZSBsZWZ0KVxuICAgICAgICAgICAgdCA9IGludGVyc2VjdChzbGljZSwgYXgsIGF5LCBieCwgYnksIGsxKTtcbiAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgPiBrMiAmJiBhIDw9IGsyKSB7XG4gICAgICAgICAgICAvLyB8ICAtLS18LS0+IG9yIC0tLXwtLS0tLXwtLT4gKGxpbmUgZXhpdHMgdGhlIGNsaXAgcmVnaW9uIG9uIHRoZSByaWdodClcbiAgICAgICAgICAgIHQgPSBpbnRlcnNlY3Qoc2xpY2UsIGF4LCBheSwgYngsIGJ5LCBrMik7XG4gICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1BvbHlnb24gJiYgZXhpdGVkKSB7XG4gICAgICAgICAgICBpZiAodHJhY2tNZXRyaWNzKSBzbGljZS5lbmQgPSBsZW4gKyBzZWdMZW4gKiB0O1xuICAgICAgICAgICAgbmV3R2VvbS5wdXNoKHNsaWNlKTtcbiAgICAgICAgICAgIHNsaWNlID0gbmV3U2xpY2UoZ2VvbSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhY2tNZXRyaWNzKSBsZW4gKz0gc2VnTGVuO1xuICAgIH1cblxuICAgIC8vIGFkZCB0aGUgbGFzdCBwb2ludFxuICAgIHZhciBsYXN0ID0gZ2VvbS5sZW5ndGggLSAzO1xuICAgIGF4ID0gZ2VvbVtsYXN0XTtcbiAgICBheSA9IGdlb21bbGFzdCArIDFdO1xuICAgIGF6ID0gZ2VvbVtsYXN0ICsgMl07XG4gICAgYSA9IGF4aXMgPT09IDAgPyBheCA6IGF5O1xuICAgIGlmIChhID49IGsxICYmIGEgPD0gazIpIGFkZFBvaW50KHNsaWNlLCBheCwgYXksIGF6KTtcblxuICAgIC8vIGNsb3NlIHRoZSBwb2x5Z29uIGlmIGl0cyBlbmRwb2ludHMgYXJlIG5vdCB0aGUgc2FtZSBhZnRlciBjbGlwcGluZ1xuICAgIGxhc3QgPSBzbGljZS5sZW5ndGggLSAzO1xuICAgIGlmIChpc1BvbHlnb24gJiYgbGFzdCA+PSAzICYmIChzbGljZVtsYXN0XSAhPT0gc2xpY2VbMF0gfHwgc2xpY2VbbGFzdCArIDFdICE9PSBzbGljZVsxXSkpIHtcbiAgICAgICAgYWRkUG9pbnQoc2xpY2UsIHNsaWNlWzBdLCBzbGljZVsxXSwgc2xpY2VbMl0pO1xuICAgIH1cblxuICAgIC8vIGFkZCB0aGUgZmluYWwgc2xpY2VcbiAgICBpZiAoc2xpY2UubGVuZ3RoKSB7XG4gICAgICAgIG5ld0dlb20ucHVzaChzbGljZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBuZXdTbGljZShsaW5lKSB7XG4gICAgdmFyIHNsaWNlID0gW107XG4gICAgc2xpY2Uuc2l6ZSA9IGxpbmUuc2l6ZTtcbiAgICBzbGljZS5zdGFydCA9IGxpbmUuc3RhcnQ7XG4gICAgc2xpY2UuZW5kID0gbGluZS5lbmQ7XG4gICAgcmV0dXJuIHNsaWNlO1xufVxuXG5mdW5jdGlvbiBjbGlwTGluZXMoZ2VvbSwgbmV3R2VvbSwgazEsIGsyLCBheGlzLCBpc1BvbHlnb24pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2xpcExpbmUoZ2VvbVtpXSwgbmV3R2VvbSwgazEsIGsyLCBheGlzLCBpc1BvbHlnb24sIGZhbHNlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZFBvaW50KG91dCwgeCwgeSwgeikge1xuICAgIG91dC5wdXNoKHgpO1xuICAgIG91dC5wdXNoKHkpO1xuICAgIG91dC5wdXNoKHopO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RYKG91dCwgYXgsIGF5LCBieCwgYnksIHgpIHtcbiAgICB2YXIgdCA9ICh4IC0gYXgpIC8gKGJ4IC0gYXgpO1xuICAgIG91dC5wdXNoKHgpO1xuICAgIG91dC5wdXNoKGF5ICsgKGJ5IC0gYXkpICogdCk7XG4gICAgb3V0LnB1c2goMSk7XG4gICAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdFkob3V0LCBheCwgYXksIGJ4LCBieSwgeSkge1xuICAgIHZhciB0ID0gKHkgLSBheSkgLyAoYnkgLSBheSk7XG4gICAgb3V0LnB1c2goYXggKyAoYnggLSBheCkgKiB0KTtcbiAgICBvdXQucHVzaCh5KTtcbiAgICBvdXQucHVzaCgxKTtcbiAgICByZXR1cm4gdDtcbn1cbiIsIlxuaW1wb3J0IGNsaXAgZnJvbSAnLi9jbGlwJztcbmltcG9ydCBjcmVhdGVGZWF0dXJlIGZyb20gJy4vZmVhdHVyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdyYXAoZmVhdHVyZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYnVmZmVyID0gb3B0aW9ucy5idWZmZXIgLyBvcHRpb25zLmV4dGVudDtcbiAgICB2YXIgbWVyZ2VkID0gZmVhdHVyZXM7XG4gICAgdmFyIGxlZnQgID0gY2xpcChmZWF0dXJlcywgMSwgLTEgLSBidWZmZXIsIGJ1ZmZlciwgICAgIDAsIC0xLCAyLCBvcHRpb25zKTsgLy8gbGVmdCB3b3JsZCBjb3B5XG4gICAgdmFyIHJpZ2h0ID0gY2xpcChmZWF0dXJlcywgMSwgIDEgLSBidWZmZXIsIDIgKyBidWZmZXIsIDAsIC0xLCAyLCBvcHRpb25zKTsgLy8gcmlnaHQgd29ybGQgY29weVxuXG4gICAgaWYgKGxlZnQgfHwgcmlnaHQpIHtcbiAgICAgICAgbWVyZ2VkID0gY2xpcChmZWF0dXJlcywgMSwgLWJ1ZmZlciwgMSArIGJ1ZmZlciwgMCwgLTEsIDIsIG9wdGlvbnMpIHx8IFtdOyAvLyBjZW50ZXIgd29ybGQgY29weVxuXG4gICAgICAgIGlmIChsZWZ0KSBtZXJnZWQgPSBzaGlmdEZlYXR1cmVDb29yZHMobGVmdCwgMSkuY29uY2F0KG1lcmdlZCk7IC8vIG1lcmdlIGxlZnQgaW50byBjZW50ZXJcbiAgICAgICAgaWYgKHJpZ2h0KSBtZXJnZWQgPSBtZXJnZWQuY29uY2F0KHNoaWZ0RmVhdHVyZUNvb3JkcyhyaWdodCwgLTEpKTsgLy8gbWVyZ2UgcmlnaHQgaW50byBjZW50ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuXG5mdW5jdGlvbiBzaGlmdEZlYXR1cmVDb29yZHMoZmVhdHVyZXMsIG9mZnNldCkge1xuICAgIHZhciBuZXdGZWF0dXJlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVzW2ldLFxuICAgICAgICAgICAgdHlwZSA9IGZlYXR1cmUudHlwZTtcblxuICAgICAgICB2YXIgbmV3R2VvbWV0cnk7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdQb2ludCcgfHwgdHlwZSA9PT0gJ011bHRpUG9pbnQnIHx8IHR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICAgICAgbmV3R2VvbWV0cnkgPSBzaGlmdENvb3JkcyhmZWF0dXJlLmdlb21ldHJ5LCBvZmZzZXQpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycgfHwgdHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgICAgICBuZXdHZW9tZXRyeSA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmZWF0dXJlLmdlb21ldHJ5Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgbmV3R2VvbWV0cnkucHVzaChzaGlmdENvb3JkcyhmZWF0dXJlLmdlb21ldHJ5W2pdLCBvZmZzZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICAgICAgbmV3R2VvbWV0cnkgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBmZWF0dXJlLmdlb21ldHJ5Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BvbHlnb24gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGZlYXR1cmUuZ2VvbWV0cnlbal0ubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UG9seWdvbi5wdXNoKHNoaWZ0Q29vcmRzKGZlYXR1cmUuZ2VvbWV0cnlbal1ba10sIG9mZnNldCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdHZW9tZXRyeS5wdXNoKG5ld1BvbHlnb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbmV3RmVhdHVyZXMucHVzaChjcmVhdGVGZWF0dXJlKGZlYXR1cmUuaWQsIHR5cGUsIG5ld0dlb21ldHJ5LCBmZWF0dXJlLnRhZ3MpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3RmVhdHVyZXM7XG59XG5cbmZ1bmN0aW9uIHNoaWZ0Q29vcmRzKHBvaW50cywgb2Zmc2V0KSB7XG4gICAgdmFyIG5ld1BvaW50cyA9IFtdO1xuICAgIG5ld1BvaW50cy5zaXplID0gcG9pbnRzLnNpemU7XG5cbiAgICBpZiAocG9pbnRzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3UG9pbnRzLnN0YXJ0ID0gcG9pbnRzLnN0YXJ0O1xuICAgICAgICBuZXdQb2ludHMuZW5kID0gcG9pbnRzLmVuZDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBuZXdQb2ludHMucHVzaChwb2ludHNbaV0gKyBvZmZzZXQsIHBvaW50c1tpICsgMV0sIHBvaW50c1tpICsgMl0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3UG9pbnRzO1xufVxuIiwiXG4vLyBUcmFuc2Zvcm1zIHRoZSBjb29yZGluYXRlcyBvZiBlYWNoIGZlYXR1cmUgaW4gdGhlIGdpdmVuIHRpbGUgZnJvbVxuLy8gbWVyY2F0b3ItcHJvamVjdGVkIHNwYWNlIGludG8gKGV4dGVudCB4IGV4dGVudCkgdGlsZSBzcGFjZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybVRpbGUodGlsZSwgZXh0ZW50KSB7XG4gICAgaWYgKHRpbGUudHJhbnNmb3JtZWQpIHJldHVybiB0aWxlO1xuXG4gICAgdmFyIHoyID0gMSA8PCB0aWxlLnosXG4gICAgICAgIHR4ID0gdGlsZS54LFxuICAgICAgICB0eSA9IHRpbGUueSxcbiAgICAgICAgaSwgaiwgaztcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0aWxlLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmZWF0dXJlID0gdGlsZS5mZWF0dXJlc1tpXSxcbiAgICAgICAgICAgIGdlb20gPSBmZWF0dXJlLmdlb21ldHJ5LFxuICAgICAgICAgICAgdHlwZSA9IGZlYXR1cmUudHlwZTtcblxuICAgICAgICBmZWF0dXJlLmdlb21ldHJ5ID0gW107XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBnZW9tLmxlbmd0aDsgaiArPSAyKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeS5wdXNoKHRyYW5zZm9ybVBvaW50KGdlb21bal0sIGdlb21baiArIDFdLCBleHRlbnQsIHoyLCB0eCwgdHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBnZW9tLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJpbmcgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgZ2VvbVtqXS5sZW5ndGg7IGsgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICByaW5nLnB1c2godHJhbnNmb3JtUG9pbnQoZ2VvbVtqXVtrXSwgZ2VvbVtqXVtrICsgMV0sIGV4dGVudCwgejIsIHR4LCB0eSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmZWF0dXJlLmdlb21ldHJ5LnB1c2gocmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aWxlLnRyYW5zZm9ybWVkID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aWxlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludCh4LCB5LCBleHRlbnQsIHoyLCB0eCwgdHkpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBNYXRoLnJvdW5kKGV4dGVudCAqICh4ICogejIgLSB0eCkpLFxuICAgICAgICBNYXRoLnJvdW5kKGV4dGVudCAqICh5ICogejIgLSB0eSkpXTtcbn1cbiIsIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVGlsZShmZWF0dXJlcywgeiwgdHgsIHR5LCBvcHRpb25zKSB7XG4gICAgdmFyIHRvbGVyYW5jZSA9IHogPT09IG9wdGlvbnMubWF4Wm9vbSA/IDAgOiBvcHRpb25zLnRvbGVyYW5jZSAvICgoMSA8PCB6KSAqIG9wdGlvbnMuZXh0ZW50KTtcbiAgICB2YXIgdGlsZSA9IHtcbiAgICAgICAgZmVhdHVyZXM6IFtdLFxuICAgICAgICBudW1Qb2ludHM6IDAsXG4gICAgICAgIG51bVNpbXBsaWZpZWQ6IDAsXG4gICAgICAgIG51bUZlYXR1cmVzOiAwLFxuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIHg6IHR4LFxuICAgICAgICB5OiB0eSxcbiAgICAgICAgejogeixcbiAgICAgICAgdHJhbnNmb3JtZWQ6IGZhbHNlLFxuICAgICAgICBtaW5YOiAyLFxuICAgICAgICBtaW5ZOiAxLFxuICAgICAgICBtYXhYOiAtMSxcbiAgICAgICAgbWF4WTogMFxuICAgIH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aWxlLm51bUZlYXR1cmVzKys7XG4gICAgICAgIGFkZEZlYXR1cmUodGlsZSwgZmVhdHVyZXNbaV0sIHRvbGVyYW5jZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIG1pblggPSBmZWF0dXJlc1tpXS5taW5YO1xuICAgICAgICB2YXIgbWluWSA9IGZlYXR1cmVzW2ldLm1pblk7XG4gICAgICAgIHZhciBtYXhYID0gZmVhdHVyZXNbaV0ubWF4WDtcbiAgICAgICAgdmFyIG1heFkgPSBmZWF0dXJlc1tpXS5tYXhZO1xuXG4gICAgICAgIGlmIChtaW5YIDwgdGlsZS5taW5YKSB0aWxlLm1pblggPSBtaW5YO1xuICAgICAgICBpZiAobWluWSA8IHRpbGUubWluWSkgdGlsZS5taW5ZID0gbWluWTtcbiAgICAgICAgaWYgKG1heFggPiB0aWxlLm1heFgpIHRpbGUubWF4WCA9IG1heFg7XG4gICAgICAgIGlmIChtYXhZID4gdGlsZS5tYXhZKSB0aWxlLm1heFkgPSBtYXhZO1xuICAgIH1cbiAgICByZXR1cm4gdGlsZTtcbn1cblxuZnVuY3Rpb24gYWRkRmVhdHVyZSh0aWxlLCBmZWF0dXJlLCB0b2xlcmFuY2UsIG9wdGlvbnMpIHtcblxuICAgIHZhciBnZW9tID0gZmVhdHVyZS5nZW9tZXRyeSxcbiAgICAgICAgdHlwZSA9IGZlYXR1cmUudHlwZSxcbiAgICAgICAgc2ltcGxpZmllZCA9IFtdO1xuXG4gICAgaWYgKHR5cGUgPT09ICdQb2ludCcgfHwgdHlwZSA9PT0gJ011bHRpUG9pbnQnKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbS5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgc2ltcGxpZmllZC5wdXNoKGdlb21baV0pO1xuICAgICAgICAgICAgc2ltcGxpZmllZC5wdXNoKGdlb21baSArIDFdKTtcbiAgICAgICAgICAgIHRpbGUubnVtUG9pbnRzKys7XG4gICAgICAgICAgICB0aWxlLm51bVNpbXBsaWZpZWQrKztcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnTGluZVN0cmluZycpIHtcbiAgICAgICAgYWRkTGluZShzaW1wbGlmaWVkLCBnZW9tLCB0aWxlLCB0b2xlcmFuY2UsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnIHx8IHR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYWRkTGluZShzaW1wbGlmaWVkLCBnZW9tW2ldLCB0aWxlLCB0b2xlcmFuY2UsIHR5cGUgPT09ICdQb2x5Z29uJywgaSA9PT0gMCk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcblxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGdlb20ubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHZhciBwb2x5Z29uID0gZ2VvbVtrXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwb2x5Z29uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYWRkTGluZShzaW1wbGlmaWVkLCBwb2x5Z29uW2ldLCB0aWxlLCB0b2xlcmFuY2UsIHRydWUsIGkgPT09IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNpbXBsaWZpZWQubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0YWdzID0gZmVhdHVyZS50YWdzIHx8IG51bGw7XG4gICAgICAgIGlmICh0eXBlID09PSAnTGluZVN0cmluZycgJiYgb3B0aW9ucy5saW5lTWV0cmljcykge1xuICAgICAgICAgICAgdGFncyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGZlYXR1cmUudGFncykgdGFnc1trZXldID0gZmVhdHVyZS50YWdzW2tleV07XG4gICAgICAgICAgICB0YWdzWydtYXBib3hfY2xpcF9zdGFydCddID0gZ2VvbS5zdGFydCAvIGdlb20uc2l6ZTtcbiAgICAgICAgICAgIHRhZ3NbJ21hcGJveF9jbGlwX2VuZCddID0gZ2VvbS5lbmQgLyBnZW9tLnNpemU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRpbGVGZWF0dXJlID0ge1xuICAgICAgICAgICAgZ2VvbWV0cnk6IHNpbXBsaWZpZWQsXG4gICAgICAgICAgICB0eXBlOiB0eXBlID09PSAnUG9seWdvbicgfHwgdHlwZSA9PT0gJ011bHRpUG9seWdvbicgPyAzIDpcbiAgICAgICAgICAgICAgICB0eXBlID09PSAnTGluZVN0cmluZycgfHwgdHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycgPyAyIDogMSxcbiAgICAgICAgICAgIHRhZ3M6IHRhZ3NcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGZlYXR1cmUuaWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRpbGVGZWF0dXJlLmlkID0gZmVhdHVyZS5pZDtcbiAgICAgICAgfVxuICAgICAgICB0aWxlLmZlYXR1cmVzLnB1c2godGlsZUZlYXR1cmUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkTGluZShyZXN1bHQsIGdlb20sIHRpbGUsIHRvbGVyYW5jZSwgaXNQb2x5Z29uLCBpc091dGVyKSB7XG4gICAgdmFyIHNxVG9sZXJhbmNlID0gdG9sZXJhbmNlICogdG9sZXJhbmNlO1xuXG4gICAgaWYgKHRvbGVyYW5jZSA+IDAgJiYgKGdlb20uc2l6ZSA8IChpc1BvbHlnb24gPyBzcVRvbGVyYW5jZSA6IHRvbGVyYW5jZSkpKSB7XG4gICAgICAgIHRpbGUubnVtUG9pbnRzICs9IGdlb20ubGVuZ3RoIC8gMztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByaW5nID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb20ubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgaWYgKHRvbGVyYW5jZSA9PT0gMCB8fCBnZW9tW2kgKyAyXSA+IHNxVG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aWxlLm51bVNpbXBsaWZpZWQrKztcbiAgICAgICAgICAgIHJpbmcucHVzaChnZW9tW2ldKTtcbiAgICAgICAgICAgIHJpbmcucHVzaChnZW9tW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGlsZS5udW1Qb2ludHMrKztcbiAgICB9XG5cbiAgICBpZiAoaXNQb2x5Z29uKSByZXdpbmQocmluZywgaXNPdXRlcik7XG5cbiAgICByZXN1bHQucHVzaChyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmV3aW5kKHJpbmcsIGNsb2Nrd2lzZSkge1xuICAgIHZhciBhcmVhID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmluZy5sZW5ndGgsIGogPSBsZW4gLSAyOyBpIDwgbGVuOyBqID0gaSwgaSArPSAyKSB7XG4gICAgICAgIGFyZWEgKz0gKHJpbmdbaV0gLSByaW5nW2pdKSAqIChyaW5nW2kgKyAxXSArIHJpbmdbaiArIDFdKTtcbiAgICB9XG4gICAgaWYgKGFyZWEgPiAwID09PSBjbG9ja3dpc2UpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmluZy5sZW5ndGg7IGkgPCBsZW4gLyAyOyBpICs9IDIpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcmluZ1tpXTtcbiAgICAgICAgICAgIHZhciB5ID0gcmluZ1tpICsgMV07XG4gICAgICAgICAgICByaW5nW2ldID0gcmluZ1tsZW4gLSAyIC0gaV07XG4gICAgICAgICAgICByaW5nW2kgKyAxXSA9IHJpbmdbbGVuIC0gMSAtIGldO1xuICAgICAgICAgICAgcmluZ1tsZW4gLSAyIC0gaV0gPSB4O1xuICAgICAgICAgICAgcmluZ1tsZW4gLSAxIC0gaV0gPSB5O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiXG5pbXBvcnQgY29udmVydCBmcm9tICcuL2NvbnZlcnQnOyAgICAgLy8gR2VvSlNPTiBjb252ZXJzaW9uIGFuZCBwcmVwcm9jZXNzaW5nXG5pbXBvcnQgY2xpcCBmcm9tICcuL2NsaXAnOyAgICAgICAgICAgLy8gc3RyaXBlIGNsaXBwaW5nIGFsZ29yaXRobVxuaW1wb3J0IHdyYXAgZnJvbSAnLi93cmFwJzsgICAgICAgICAgIC8vIGRhdGUgbGluZSBwcm9jZXNzaW5nXG5pbXBvcnQgdHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3JtJzsgLy8gY29vcmRpbmF0ZSB0cmFuc2Zvcm1hdGlvblxuaW1wb3J0IGNyZWF0ZVRpbGUgZnJvbSAnLi90aWxlJzsgICAgIC8vIGZpbmFsIHNpbXBsaWZpZWQgdGlsZSBnZW5lcmF0aW9uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlb2pzb252dChkYXRhLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBHZW9KU09OVlQoZGF0YSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIEdlb0pTT05WVChkYXRhLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyA9IGV4dGVuZChPYmplY3QuY3JlYXRlKHRoaXMub3B0aW9ucyksIG9wdGlvbnMpO1xuXG4gICAgdmFyIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcblxuICAgIGlmIChkZWJ1ZykgY29uc29sZS50aW1lKCdwcmVwcm9jZXNzIGRhdGEnKTtcblxuICAgIGlmIChvcHRpb25zLm1heFpvb20gPCAwIHx8IG9wdGlvbnMubWF4Wm9vbSA+IDI0KSB0aHJvdyBuZXcgRXJyb3IoJ21heFpvb20gc2hvdWxkIGJlIGluIHRoZSAwLTI0IHJhbmdlJyk7XG4gICAgaWYgKG9wdGlvbnMucHJvbW90ZUlkICYmIG9wdGlvbnMuZ2VuZXJhdGVJZCkgdGhyb3cgbmV3IEVycm9yKCdwcm9tb3RlSWQgYW5kIGdlbmVyYXRlSWQgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXIuJyk7XG5cbiAgICB2YXIgZmVhdHVyZXMgPSBjb252ZXJ0KGRhdGEsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy50aWxlcyA9IHt9O1xuICAgIHRoaXMudGlsZUNvb3JkcyA9IFtdO1xuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgncHJlcHJvY2VzcyBkYXRhJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbmRleDogbWF4Wm9vbTogJWQsIG1heFBvaW50czogJWQnLCBvcHRpb25zLmluZGV4TWF4Wm9vbSwgb3B0aW9ucy5pbmRleE1heFBvaW50cyk7XG4gICAgICAgIGNvbnNvbGUudGltZSgnZ2VuZXJhdGUgdGlsZXMnKTtcbiAgICAgICAgdGhpcy5zdGF0cyA9IHt9O1xuICAgICAgICB0aGlzLnRvdGFsID0gMDtcbiAgICB9XG5cbiAgICBmZWF0dXJlcyA9IHdyYXAoZmVhdHVyZXMsIG9wdGlvbnMpO1xuXG4gICAgLy8gc3RhcnQgc2xpY2luZyBmcm9tIHRoZSB0b3AgdGlsZSBkb3duXG4gICAgaWYgKGZlYXR1cmVzLmxlbmd0aCkgdGhpcy5zcGxpdFRpbGUoZmVhdHVyZXMsIDAsIDAsIDApO1xuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGgpIGNvbnNvbGUubG9nKCdmZWF0dXJlczogJWQsIHBvaW50czogJWQnLCB0aGlzLnRpbGVzWzBdLm51bUZlYXR1cmVzLCB0aGlzLnRpbGVzWzBdLm51bVBvaW50cyk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnZ2VuZXJhdGUgdGlsZXMnKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RpbGVzIGdlbmVyYXRlZDonLCB0aGlzLnRvdGFsLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRzKSk7XG4gICAgfVxufVxuXG5HZW9KU09OVlQucHJvdG90eXBlLm9wdGlvbnMgPSB7XG4gICAgbWF4Wm9vbTogMTQsICAgICAgICAgICAgLy8gbWF4IHpvb20gdG8gcHJlc2VydmUgZGV0YWlsIG9uXG4gICAgaW5kZXhNYXhab29tOiA1LCAgICAgICAgLy8gbWF4IHpvb20gaW4gdGhlIHRpbGUgaW5kZXhcbiAgICBpbmRleE1heFBvaW50czogMTAwMDAwLCAvLyBtYXggbnVtYmVyIG9mIHBvaW50cyBwZXIgdGlsZSBpbiB0aGUgdGlsZSBpbmRleFxuICAgIHRvbGVyYW5jZTogMywgICAgICAgICAgIC8vIHNpbXBsaWZpY2F0aW9uIHRvbGVyYW5jZSAoaGlnaGVyIG1lYW5zIHNpbXBsZXIpXG4gICAgZXh0ZW50OiA0MDk2LCAgICAgICAgICAgLy8gdGlsZSBleHRlbnRcbiAgICBidWZmZXI6IDY0LCAgICAgICAgICAgICAvLyB0aWxlIGJ1ZmZlciBvbiBlYWNoIHNpZGVcbiAgICBsaW5lTWV0cmljczogZmFsc2UsICAgICAvLyB3aGV0aGVyIHRvIGNhbGN1bGF0ZSBsaW5lIG1ldHJpY3NcbiAgICBwcm9tb3RlSWQ6IG51bGwsICAgICAgICAvLyBuYW1lIG9mIGEgZmVhdHVyZSBwcm9wZXJ0eSB0byBiZSBwcm9tb3RlZCB0byBmZWF0dXJlLmlkXG4gICAgZ2VuZXJhdGVJZDogZmFsc2UsICAgICAgLy8gd2hldGhlciB0byBnZW5lcmF0ZSBmZWF0dXJlIGlkcy4gQ2Fubm90IGJlIHVzZWQgd2l0aCBwcm9tb3RlSWRcbiAgICBkZWJ1ZzogMCAgICAgICAgICAgICAgICAvLyBsb2dnaW5nIGxldmVsICgwLCAxIG9yIDIpXG59O1xuXG5HZW9KU09OVlQucHJvdG90eXBlLnNwbGl0VGlsZSA9IGZ1bmN0aW9uIChmZWF0dXJlcywgeiwgeCwgeSwgY3osIGN4LCBjeSkge1xuXG4gICAgdmFyIHN0YWNrID0gW2ZlYXR1cmVzLCB6LCB4LCB5XSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuXG4gICAgLy8gYXZvaWQgcmVjdXJzaW9uIGJ5IHVzaW5nIGEgcHJvY2Vzc2luZyBxdWV1ZVxuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgeSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB4ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHogPSBzdGFjay5wb3AoKTtcbiAgICAgICAgZmVhdHVyZXMgPSBzdGFjay5wb3AoKTtcblxuICAgICAgICB2YXIgejIgPSAxIDw8IHosXG4gICAgICAgICAgICBpZCA9IHRvSUQoeiwgeCwgeSksXG4gICAgICAgICAgICB0aWxlID0gdGhpcy50aWxlc1tpZF07XG5cbiAgICAgICAgaWYgKCF0aWxlKSB7XG4gICAgICAgICAgICBpZiAoZGVidWcgPiAxKSBjb25zb2xlLnRpbWUoJ2NyZWF0aW9uJyk7XG5cbiAgICAgICAgICAgIHRpbGUgPSB0aGlzLnRpbGVzW2lkXSA9IGNyZWF0ZVRpbGUoZmVhdHVyZXMsIHosIHgsIHksIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy50aWxlQ29vcmRzLnB1c2goe3o6IHosIHg6IHgsIHk6IHl9KTtcblxuICAgICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlYnVnID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGlsZSB6JWQtJWQtJWQgKGZlYXR1cmVzOiAlZCwgcG9pbnRzOiAlZCwgc2ltcGxpZmllZDogJWQpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHosIHgsIHksIHRpbGUubnVtRmVhdHVyZXMsIHRpbGUubnVtUG9pbnRzLCB0aWxlLm51bVNpbXBsaWZpZWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ2NyZWF0aW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSAneicgKyB6O1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHNba2V5XSA9ICh0aGlzLnN0YXRzW2tleV0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMudG90YWwrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNhdmUgcmVmZXJlbmNlIHRvIG9yaWdpbmFsIGdlb21ldHJ5IGluIHRpbGUgc28gdGhhdCB3ZSBjYW4gZHJpbGwgZG93biBsYXRlciBpZiB3ZSBzdG9wIG5vd1xuICAgICAgICB0aWxlLnNvdXJjZSA9IGZlYXR1cmVzO1xuXG4gICAgICAgIC8vIGlmIGl0J3MgdGhlIGZpcnN0LXBhc3MgdGlsaW5nXG4gICAgICAgIGlmICghY3opIHtcbiAgICAgICAgICAgIC8vIHN0b3AgdGlsaW5nIGlmIHdlIHJlYWNoZWQgbWF4IHpvb20sIG9yIGlmIHRoZSB0aWxlIGlzIHRvbyBzaW1wbGVcbiAgICAgICAgICAgIGlmICh6ID09PSBvcHRpb25zLmluZGV4TWF4Wm9vbSB8fCB0aWxlLm51bVBvaW50cyA8PSBvcHRpb25zLmluZGV4TWF4UG9pbnRzKSBjb250aW51ZTtcblxuICAgICAgICAvLyBpZiBhIGRyaWxsZG93biB0byBhIHNwZWNpZmljIHRpbGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHN0b3AgdGlsaW5nIGlmIHdlIHJlYWNoZWQgYmFzZSB6b29tIG9yIG91ciB0YXJnZXQgdGlsZSB6b29tXG4gICAgICAgICAgICBpZiAoeiA9PT0gb3B0aW9ucy5tYXhab29tIHx8IHogPT09IGN6KSBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gc3RvcCB0aWxpbmcgaWYgaXQncyBub3QgYW4gYW5jZXN0b3Igb2YgdGhlIHRhcmdldCB0aWxlXG4gICAgICAgICAgICB2YXIgbSA9IDEgPDwgKGN6IC0geik7XG4gICAgICAgICAgICBpZiAoeCAhPT0gTWF0aC5mbG9vcihjeCAvIG0pIHx8IHkgIT09IE1hdGguZmxvb3IoY3kgLyBtKSkgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB3ZSBzbGljZSBmdXJ0aGVyIGRvd24sIG5vIG5lZWQgdG8ga2VlcCBzb3VyY2UgZ2VvbWV0cnlcbiAgICAgICAgdGlsZS5zb3VyY2UgPSBudWxsO1xuXG4gICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUudGltZSgnY2xpcHBpbmcnKTtcblxuICAgICAgICAvLyB2YWx1ZXMgd2UnbGwgdXNlIGZvciBjbGlwcGluZ1xuICAgICAgICB2YXIgazEgPSAwLjUgKiBvcHRpb25zLmJ1ZmZlciAvIG9wdGlvbnMuZXh0ZW50LFxuICAgICAgICAgICAgazIgPSAwLjUgLSBrMSxcbiAgICAgICAgICAgIGszID0gMC41ICsgazEsXG4gICAgICAgICAgICBrNCA9IDEgKyBrMSxcbiAgICAgICAgICAgIHRsLCBibCwgdHIsIGJyLCBsZWZ0LCByaWdodDtcblxuICAgICAgICB0bCA9IGJsID0gdHIgPSBiciA9IG51bGw7XG5cbiAgICAgICAgbGVmdCAgPSBjbGlwKGZlYXR1cmVzLCB6MiwgeCAtIGsxLCB4ICsgazMsIDAsIHRpbGUubWluWCwgdGlsZS5tYXhYLCBvcHRpb25zKTtcbiAgICAgICAgcmlnaHQgPSBjbGlwKGZlYXR1cmVzLCB6MiwgeCArIGsyLCB4ICsgazQsIDAsIHRpbGUubWluWCwgdGlsZS5tYXhYLCBvcHRpb25zKTtcbiAgICAgICAgZmVhdHVyZXMgPSBudWxsO1xuXG4gICAgICAgIGlmIChsZWZ0KSB7XG4gICAgICAgICAgICB0bCA9IGNsaXAobGVmdCwgejIsIHkgLSBrMSwgeSArIGszLCAxLCB0aWxlLm1pblksIHRpbGUubWF4WSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBibCA9IGNsaXAobGVmdCwgejIsIHkgKyBrMiwgeSArIGs0LCAxLCB0aWxlLm1pblksIHRpbGUubWF4WSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBsZWZ0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgICAgdHIgPSBjbGlwKHJpZ2h0LCB6MiwgeSAtIGsxLCB5ICsgazMsIDEsIHRpbGUubWluWSwgdGlsZS5tYXhZLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGJyID0gY2xpcChyaWdodCwgejIsIHkgKyBrMiwgeSArIGs0LCAxLCB0aWxlLm1pblksIHRpbGUubWF4WSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByaWdodCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVidWcgPiAxKSBjb25zb2xlLnRpbWVFbmQoJ2NsaXBwaW5nJyk7XG5cbiAgICAgICAgc3RhY2sucHVzaCh0bCB8fCBbXSwgeiArIDEsIHggKiAyLCAgICAgeSAqIDIpO1xuICAgICAgICBzdGFjay5wdXNoKGJsIHx8IFtdLCB6ICsgMSwgeCAqIDIsICAgICB5ICogMiArIDEpO1xuICAgICAgICBzdGFjay5wdXNoKHRyIHx8IFtdLCB6ICsgMSwgeCAqIDIgKyAxLCB5ICogMik7XG4gICAgICAgIHN0YWNrLnB1c2goYnIgfHwgW10sIHogKyAxLCB4ICogMiArIDEsIHkgKiAyICsgMSk7XG4gICAgfVxufTtcblxuR2VvSlNPTlZULnByb3RvdHlwZS5nZXRUaWxlID0gZnVuY3Rpb24gKHosIHgsIHkpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgZXh0ZW50ID0gb3B0aW9ucy5leHRlbnQsXG4gICAgICAgIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcblxuICAgIGlmICh6IDwgMCB8fCB6ID4gMjQpIHJldHVybiBudWxsO1xuXG4gICAgdmFyIHoyID0gMSA8PCB6O1xuICAgIHggPSAoKHggJSB6MikgKyB6MikgJSB6MjsgLy8gd3JhcCB0aWxlIHggY29vcmRpbmF0ZVxuXG4gICAgdmFyIGlkID0gdG9JRCh6LCB4LCB5KTtcbiAgICBpZiAodGhpcy50aWxlc1tpZF0pIHJldHVybiB0cmFuc2Zvcm0odGhpcy50aWxlc1tpZF0sIGV4dGVudCk7XG5cbiAgICBpZiAoZGVidWcgPiAxKSBjb25zb2xlLmxvZygnZHJpbGxpbmcgZG93biB0byB6JWQtJWQtJWQnLCB6LCB4LCB5KTtcblxuICAgIHZhciB6MCA9IHosXG4gICAgICAgIHgwID0geCxcbiAgICAgICAgeTAgPSB5LFxuICAgICAgICBwYXJlbnQ7XG5cbiAgICB3aGlsZSAoIXBhcmVudCAmJiB6MCA+IDApIHtcbiAgICAgICAgejAtLTtcbiAgICAgICAgeDAgPSBNYXRoLmZsb29yKHgwIC8gMik7XG4gICAgICAgIHkwID0gTWF0aC5mbG9vcih5MCAvIDIpO1xuICAgICAgICBwYXJlbnQgPSB0aGlzLnRpbGVzW3RvSUQoejAsIHgwLCB5MCldO1xuICAgIH1cblxuICAgIGlmICghcGFyZW50IHx8ICFwYXJlbnQuc291cmNlKSByZXR1cm4gbnVsbDtcblxuICAgIC8vIGlmIHdlIGZvdW5kIGEgcGFyZW50IHRpbGUgY29udGFpbmluZyB0aGUgb3JpZ2luYWwgZ2VvbWV0cnksIHdlIGNhbiBkcmlsbCBkb3duIGZyb20gaXRcbiAgICBpZiAoZGVidWcgPiAxKSBjb25zb2xlLmxvZygnZm91bmQgcGFyZW50IHRpbGUgeiVkLSVkLSVkJywgejAsIHgwLCB5MCk7XG5cbiAgICBpZiAoZGVidWcgPiAxKSBjb25zb2xlLnRpbWUoJ2RyaWxsaW5nIGRvd24nKTtcbiAgICB0aGlzLnNwbGl0VGlsZShwYXJlbnQuc291cmNlLCB6MCwgeDAsIHkwLCB6LCB4LCB5KTtcbiAgICBpZiAoZGVidWcgPiAxKSBjb25zb2xlLnRpbWVFbmQoJ2RyaWxsaW5nIGRvd24nKTtcblxuICAgIHJldHVybiB0aGlzLnRpbGVzW2lkXSA/IHRyYW5zZm9ybSh0aGlzLnRpbGVzW2lkXSwgZXh0ZW50KSA6IG51bGw7XG59O1xuXG5mdW5jdGlvbiB0b0lEKHosIHgsIHkpIHtcbiAgICByZXR1cm4gKCgoMSA8PCB6KSAqIHkgKyB4KSAqIDMyKSArIHo7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMpIHtcbiAgICBmb3IgKHZhciBpIGluIHNyYykgZGVzdFtpXSA9IHNyY1tpXTtcbiAgICByZXR1cm4gZGVzdDtcbn1cbiIsbnVsbCxudWxsLCJ2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCR5ID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgY29tbW9uanNHbG9iYWwgPT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBmYWxsYmFja1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0ge307XG5cbnZhciBmYWlscyRpID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbnZhciBmYWlscyRoID0gZmFpbHMkaTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbnZhciBkZXNjcmlwdG9ycyA9ICFmYWlscyRoKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG5cbnZhciBmYWlscyRnID0gZmFpbHMkaTtcblxudmFyIGZ1bmN0aW9uQmluZE5hdGl2ZSA9ICFmYWlscyRnKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuXG52YXIgTkFUSVZFX0JJTkQkMiA9IGZ1bmN0aW9uQmluZE5hdGl2ZTtcblxudmFyIGNhbGwkYSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG52YXIgZnVuY3Rpb25DYWxsID0gTkFUSVZFX0JJTkQkMiA/IGNhbGwkYS5iaW5kKGNhbGwkYSkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsJGEuYXBwbHkoY2FsbCRhLCBhcmd1bWVudHMpO1xufTtcblxudmFyIG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlID0ge307XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5vYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZS5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQ0ID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG5cbnZhciBOQVRJVkVfQklORCQxID0gZnVuY3Rpb25CaW5kTmF0aXZlO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUkMiA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBiaW5kID0gRnVuY3Rpb25Qcm90b3R5cGUkMi5iaW5kO1xudmFyIGNhbGwkOSA9IEZ1bmN0aW9uUHJvdG90eXBlJDIuY2FsbDtcbnZhciB1bmN1cnJ5VGhpcyRrID0gTkFUSVZFX0JJTkQkMSAmJiBiaW5kLmJpbmQoY2FsbCQ5LCBjYWxsJDkpO1xuXG52YXIgZnVuY3Rpb25VbmN1cnJ5VGhpcyA9IE5BVElWRV9CSU5EJDEgPyBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIHVuY3VycnlUaGlzJGsoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsJDkuYXBwbHkoZm4sIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG52YXIgdW5jdXJyeVRoaXMkaiA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG5cbnZhciB0b1N0cmluZyQ5ID0gdW5jdXJyeVRoaXMkaih7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UkNCA9IHVuY3VycnlUaGlzJGooJycuc2xpY2UpO1xuXG52YXIgY2xhc3NvZlJhdyQxID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSQ0KHRvU3RyaW5nJDkoaXQpLCA4LCAtMSk7XG59O1xuXG52YXIgZ2xvYmFsJHggPSBnbG9iYWwkeTtcbnZhciB1bmN1cnJ5VGhpcyRpID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbnZhciBmYWlscyRmID0gZmFpbHMkaTtcbnZhciBjbGFzc29mJDUgPSBjbGFzc29mUmF3JDE7XG5cbnZhciBPYmplY3QkNSA9IGdsb2JhbCR4Lk9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzJGkoJycuc3BsaXQpO1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGluZGV4ZWRPYmplY3QgPSBmYWlscyRmKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QkNSgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YkNShpdCkgPT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogT2JqZWN0JDUoaXQpO1xufSA6IE9iamVjdCQ1O1xuXG52YXIgZ2xvYmFsJHcgPSBnbG9iYWwkeTtcblxudmFyIFR5cGVFcnJvciRhID0gZ2xvYmFsJHcuVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yJGEoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0JDEgPSBpbmRleGVkT2JqZWN0O1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUkNiA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUkNztcblxudmFyIHRvSW5kZXhlZE9iamVjdCQ1ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0JDEocmVxdWlyZU9iamVjdENvZXJjaWJsZSQ2KGl0KSk7XG59O1xuXG4vLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbnZhciBpc0NhbGxhYmxlJGcgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcblxudmFyIGlzQ2FsbGFibGUkZiA9IGlzQ2FsbGFibGUkZztcblxudmFyIGlzT2JqZWN0JDYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZSRmKGl0KTtcbn07XG5cbnZhciBnbG9iYWwkdiA9IGdsb2JhbCR5O1xudmFyIGlzQ2FsbGFibGUkZSA9IGlzQ2FsbGFibGUkZztcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZSRlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxudmFyIGdldEJ1aWx0SW4kNSA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24oZ2xvYmFsJHZbbmFtZXNwYWNlXSkgOiBnbG9iYWwkdltuYW1lc3BhY2VdICYmIGdsb2JhbCR2W25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG5cbnZhciB1bmN1cnJ5VGhpcyRoID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcblxudmFyIG9iamVjdElzUHJvdG90eXBlT2YgPSB1bmN1cnJ5VGhpcyRoKHt9LmlzUHJvdG90eXBlT2YpO1xuXG52YXIgZ2V0QnVpbHRJbiQ0ID0gZ2V0QnVpbHRJbiQ1O1xuXG52YXIgZW5naW5lVXNlckFnZW50ID0gZ2V0QnVpbHRJbiQ0KCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG5cbnZhciBnbG9iYWwkdSA9IGdsb2JhbCR5O1xudmFyIHVzZXJBZ2VudCQxID0gZW5naW5lVXNlckFnZW50O1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbCR1LnByb2Nlc3M7XG52YXIgRGVubyA9IGdsb2JhbCR1LkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCQxKSB7XG4gIG1hdGNoID0gdXNlckFnZW50JDEubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50JDEubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG52YXIgZW5naW5lVjhWZXJzaW9uID0gdmVyc2lvbjtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG5cbnZhciBWOF9WRVJTSU9OID0gZW5naW5lVjhWZXJzaW9uO1xudmFyIGZhaWxzJGUgPSBmYWlscyRpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIG5hdGl2ZVN5bWJvbCA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMkZShmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG5cbnZhciBOQVRJVkVfU1lNQk9MJDEgPSBuYXRpdmVTeW1ib2w7XG5cbnZhciB1c2VTeW1ib2xBc1VpZCA9IE5BVElWRV9TWU1CT0wkMVxuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcblxudmFyIGdsb2JhbCR0ID0gZ2xvYmFsJHk7XG52YXIgZ2V0QnVpbHRJbiQzID0gZ2V0QnVpbHRJbiQ1O1xudmFyIGlzQ2FsbGFibGUkZCA9IGlzQ2FsbGFibGUkZztcbnZhciBpc1Byb3RvdHlwZU9mJDEgPSBvYmplY3RJc1Byb3RvdHlwZU9mO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEJDEgPSB1c2VTeW1ib2xBc1VpZDtcblxudmFyIE9iamVjdCQ0ID0gZ2xvYmFsJHQuT2JqZWN0O1xuXG52YXIgaXNTeW1ib2wkMiA9IFVTRV9TWU1CT0xfQVNfVUlEJDEgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluJDMoJ1N5bWJvbCcpO1xuICByZXR1cm4gaXNDYWxsYWJsZSRkKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YkMSgkU3ltYm9sLnByb3RvdHlwZSwgT2JqZWN0JDQoaXQpKTtcbn07XG5cbnZhciBnbG9iYWwkcyA9IGdsb2JhbCR5O1xuXG52YXIgU3RyaW5nJDQgPSBnbG9iYWwkcy5TdHJpbmc7XG5cbnZhciB0cnlUb1N0cmluZyQyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFN0cmluZyQ0KGFyZ3VtZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cbn07XG5cbnZhciBnbG9iYWwkciA9IGdsb2JhbCR5O1xudmFyIGlzQ2FsbGFibGUkYyA9IGlzQ2FsbGFibGUkZztcbnZhciB0cnlUb1N0cmluZyQxID0gdHJ5VG9TdHJpbmckMjtcblxudmFyIFR5cGVFcnJvciQ5ID0gZ2xvYmFsJHIuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxudmFyIGFDYWxsYWJsZSQxID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NhbGxhYmxlJGMoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvciQ5KHRyeVRvU3RyaW5nJDEoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xufTtcblxudmFyIGFDYWxsYWJsZSA9IGFDYWxsYWJsZSQxO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG52YXIgZ2V0TWV0aG9kJDIgPSBmdW5jdGlvbiAoViwgUCkge1xuICB2YXIgZnVuYyA9IFZbUF07XG4gIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7XG59O1xuXG52YXIgZ2xvYmFsJHEgPSBnbG9iYWwkeTtcbnZhciBjYWxsJDggPSBmdW5jdGlvbkNhbGw7XG52YXIgaXNDYWxsYWJsZSRiID0gaXNDYWxsYWJsZSRnO1xudmFyIGlzT2JqZWN0JDUgPSBpc09iamVjdCQ2O1xuXG52YXIgVHlwZUVycm9yJDggPSBnbG9iYWwkcS5UeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUkMSA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUkYihmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QkNSh2YWwgPSBjYWxsJDgoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlJGIoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QkNSh2YWwgPSBjYWxsJDgoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlJGIoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0JDUodmFsID0gY2FsbCQ4KGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IkOChcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cbnZhciBzaGFyZWQkNCA9IHtleHBvcnRzOiB7fX07XG5cbnZhciBnbG9iYWwkcCA9IGdsb2JhbCR5O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSQzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgc2V0R2xvYmFsJDMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5JDMoZ2xvYmFsJHAsIGtleSwgeyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsJHBba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBnbG9iYWwkbyA9IGdsb2JhbCR5O1xudmFyIHNldEdsb2JhbCQyID0gc2V0R2xvYmFsJDM7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSQzID0gZ2xvYmFsJG9bU0hBUkVEXSB8fCBzZXRHbG9iYWwkMihTSEFSRUQsIHt9KTtcblxudmFyIHNoYXJlZFN0b3JlID0gc3RvcmUkMztcblxudmFyIHN0b3JlJDIgPSBzaGFyZWRTdG9yZTtcblxuKHNoYXJlZCQ0LmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmUkMltrZXldIHx8IChzdG9yZSQyW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIxLjEnLFxuICBtb2RlOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjEuMS9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcblxudmFyIGdsb2JhbCRuID0gZ2xvYmFsJHk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ1ID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ3O1xuXG52YXIgT2JqZWN0JDMgPSBnbG9iYWwkbi5PYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG52YXIgdG9PYmplY3QkMyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0JDMocmVxdWlyZU9iamVjdENvZXJjaWJsZSQ1KGFyZ3VtZW50KSk7XG59O1xuXG52YXIgdW5jdXJyeVRoaXMkZyA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG52YXIgdG9PYmplY3QkMiA9IHRvT2JqZWN0JDM7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzJGcoe30uaGFzT3duUHJvcGVydHkpO1xuXG4vLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eVxudmFyIGhhc093blByb3BlcnR5XzEgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdCQyKGl0KSwga2V5KTtcbn07XG5cbnZhciB1bmN1cnJ5VGhpcyRmID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyQ4ID0gdW5jdXJyeVRoaXMkZigxLjAudG9TdHJpbmcpO1xuXG52YXIgdWlkJDIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmckOCgrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcblxudmFyIGdsb2JhbCRtID0gZ2xvYmFsJHk7XG52YXIgc2hhcmVkJDMgPSBzaGFyZWQkNC5leHBvcnRzO1xudmFyIGhhc093biQ4ID0gaGFzT3duUHJvcGVydHlfMTtcbnZhciB1aWQkMSA9IHVpZCQyO1xudmFyIE5BVElWRV9TWU1CT0wgPSBuYXRpdmVTeW1ib2w7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSB1c2VTeW1ib2xBc1VpZDtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCQzKCd3a3MnKTtcbnZhciBTeW1ib2wkMiA9IGdsb2JhbCRtLlN5bWJvbDtcbnZhciBzeW1ib2xGb3IgPSBTeW1ib2wkMiAmJiBTeW1ib2wkMlsnZm9yJ107XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wkMiA6IFN5bWJvbCQyICYmIFN5bWJvbCQyLndpdGhvdXRTZXR0ZXIgfHwgdWlkJDE7XG5cbnZhciB3ZWxsS25vd25TeW1ib2wkYiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duJDgoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAnU3ltYm9sLicgKyBuYW1lO1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhc093biQ4KFN5bWJvbCQyLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sJDJbbmFtZV07XG4gICAgfSBlbHNlIGlmIChVU0VfU1lNQk9MX0FTX1VJRCAmJiBzeW1ib2xGb3IpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IHN5bWJvbEZvcihkZXNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuXG52YXIgZ2xvYmFsJGwgPSBnbG9iYWwkeTtcbnZhciBjYWxsJDcgPSBmdW5jdGlvbkNhbGw7XG52YXIgaXNPYmplY3QkNCA9IGlzT2JqZWN0JDY7XG52YXIgaXNTeW1ib2wkMSA9IGlzU3ltYm9sJDI7XG52YXIgZ2V0TWV0aG9kJDEgPSBnZXRNZXRob2QkMjtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gb3JkaW5hcnlUb1ByaW1pdGl2ZSQxO1xudmFyIHdlbGxLbm93blN5bWJvbCRhID0gd2VsbEtub3duU3ltYm9sJGI7XG5cbnZhciBUeXBlRXJyb3IkNyA9IGdsb2JhbCRsLlR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2wkYSgndG9QcmltaXRpdmUnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbnZhciB0b1ByaW1pdGl2ZSQxID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIGlmICghaXNPYmplY3QkNChpbnB1dCkgfHwgaXNTeW1ib2wkMShpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZCQxKGlucHV0LCBUT19QUklNSVRJVkUpO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltKSB7XG4gICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICByZXN1bHQgPSBjYWxsJDcoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdCQ0KHJlc3VsdCkgfHwgaXNTeW1ib2wkMShyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHRocm93IFR5cGVFcnJvciQ3KFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcblxudmFyIHRvUHJpbWl0aXZlID0gdG9QcmltaXRpdmUkMTtcbnZhciBpc1N5bWJvbCA9IGlzU3ltYm9sJDI7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxudmFyIHRvUHJvcGVydHlLZXkkMyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG5cbnZhciBnbG9iYWwkayA9IGdsb2JhbCR5O1xudmFyIGlzT2JqZWN0JDMgPSBpc09iamVjdCQ2O1xuXG52YXIgZG9jdW1lbnQkMSA9IGdsb2JhbCRrLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTJDEgPSBpc09iamVjdCQzKGRvY3VtZW50JDEpICYmIGlzT2JqZWN0JDMoZG9jdW1lbnQkMS5jcmVhdGVFbGVtZW50KTtcblxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCQyID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMkMSA/IGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cbnZhciBERVNDUklQVE9SUyQ4ID0gZGVzY3JpcHRvcnM7XG52YXIgZmFpbHMkZCA9IGZhaWxzJGk7XG52YXIgY3JlYXRlRWxlbWVudCA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCQyO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbnZhciBpZThEb21EZWZpbmUgPSAhREVTQ1JJUFRPUlMkOCAmJiAhZmFpbHMkZChmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuXG52YXIgREVTQ1JJUFRPUlMkNyA9IGRlc2NyaXB0b3JzO1xudmFyIGNhbGwkNiA9IGZ1bmN0aW9uQ2FsbDtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSQxID0gb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDMgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNDtcbnZhciB0b0luZGV4ZWRPYmplY3QkNCA9IHRvSW5kZXhlZE9iamVjdCQ1O1xudmFyIHRvUHJvcGVydHlLZXkkMiA9IHRvUHJvcGVydHlLZXkkMztcbnZhciBoYXNPd24kNyA9IGhhc093blByb3BlcnR5XzE7XG52YXIgSUU4X0RPTV9ERUZJTkUkMSA9IGllOERvbURlZmluZTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxub2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmYgPSBERVNDUklQVE9SUyQ3ID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciQxIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdCQ0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleSQyKFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUkMSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciQxKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24kNyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQzKCFjYWxsJDYocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUkMS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuXG52YXIgb2JqZWN0RGVmaW5lUHJvcGVydHkgPSB7fTtcblxudmFyIERFU0NSSVBUT1JTJDYgPSBkZXNjcmlwdG9ycztcbnZhciBmYWlscyRjID0gZmFpbHMkaTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG52YXIgdjhQcm90b3R5cGVEZWZpbmVCdWcgPSBERVNDUklQVE9SUyQ2ICYmIGZhaWxzJGMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9IDQyO1xufSk7XG5cbnZhciBnbG9iYWwkaiA9IGdsb2JhbCR5O1xudmFyIGlzT2JqZWN0JDIgPSBpc09iamVjdCQ2O1xuXG52YXIgU3RyaW5nJDMgPSBnbG9iYWwkai5TdHJpbmc7XG52YXIgVHlwZUVycm9yJDYgPSBnbG9iYWwkai5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IFR5cGUoYXJndW1lbnQpIGlzIE9iamVjdGBcbnZhciBhbk9iamVjdCRhID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc09iamVjdCQyKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IkNihTdHJpbmckMyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbn07XG5cbnZhciBnbG9iYWwkaSA9IGdsb2JhbCR5O1xudmFyIERFU0NSSVBUT1JTJDUgPSBkZXNjcmlwdG9ycztcbnZhciBJRThfRE9NX0RFRklORSA9IGllOERvbURlZmluZTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyQxID0gdjhQcm90b3R5cGVEZWZpbmVCdWc7XG52YXIgYW5PYmplY3QkOSA9IGFuT2JqZWN0JGE7XG52YXIgdG9Qcm9wZXJ0eUtleSQxID0gdG9Qcm9wZXJ0eUtleSQzO1xuXG52YXIgVHlwZUVycm9yJDUgPSBnbG9iYWwkaS5UeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUkMSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxub2JqZWN0RGVmaW5lUHJvcGVydHkuZiA9IERFU0NSSVBUT1JTJDUgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyQxID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdCQ5KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleSQxKFApO1xuICBhbk9iamVjdCQ5KEF0dHJpYnV0ZXMpO1xuICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFJDEgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFJDFdIDogY3VycmVudFtDT05GSUdVUkFCTEUkMV0sXG4gICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG59IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdCQ5KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleSQxKFApO1xuICBhbk9iamVjdCQ5KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IkNSgnQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxudmFyIERFU0NSSVBUT1JTJDQgPSBkZXNjcmlwdG9ycztcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQ0ID0gb2JqZWN0RGVmaW5lUHJvcGVydHk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDIgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNDtcblxudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ2ID0gREVTQ1JJUFRPUlMkNCA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlJDQuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDIoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG52YXIgcmVkZWZpbmUkNSA9IHtleHBvcnRzOiB7fX07XG5cbnZhciB1bmN1cnJ5VGhpcyRlID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbnZhciBpc0NhbGxhYmxlJGEgPSBpc0NhbGxhYmxlJGc7XG52YXIgc3RvcmUkMSA9IHNoYXJlZFN0b3JlO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzJGUoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUkYShzdG9yZSQxLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlJDEuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxudmFyIGluc3BlY3RTb3VyY2UkMyA9IHN0b3JlJDEuaW5zcGVjdFNvdXJjZTtcblxudmFyIGdsb2JhbCRoID0gZ2xvYmFsJHk7XG52YXIgaXNDYWxsYWJsZSQ5ID0gaXNDYWxsYWJsZSRnO1xudmFyIGluc3BlY3RTb3VyY2UkMiA9IGluc3BlY3RTb3VyY2UkMztcblxudmFyIFdlYWtNYXAkMSA9IGdsb2JhbCRoLldlYWtNYXA7XG5cbnZhciBuYXRpdmVXZWFrTWFwID0gaXNDYWxsYWJsZSQ5KFdlYWtNYXAkMSkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UkMihXZWFrTWFwJDEpKTtcblxudmFyIHNoYXJlZCQyID0gc2hhcmVkJDQuZXhwb3J0cztcbnZhciB1aWQgPSB1aWQkMjtcblxudmFyIGtleXMgPSBzaGFyZWQkMigna2V5cycpO1xuXG52YXIgc2hhcmVkS2V5JDMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cbnZhciBoaWRkZW5LZXlzJDQgPSB7fTtcblxudmFyIE5BVElWRV9XRUFLX01BUCA9IG5hdGl2ZVdlYWtNYXA7XG52YXIgZ2xvYmFsJGcgPSBnbG9iYWwkeTtcbnZhciB1bmN1cnJ5VGhpcyRkID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbnZhciBpc09iamVjdCQxID0gaXNPYmplY3QkNjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNSA9IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ2O1xudmFyIGhhc093biQ2ID0gaGFzT3duUHJvcGVydHlfMTtcbnZhciBzaGFyZWQkMSA9IHNoYXJlZFN0b3JlO1xudmFyIHNoYXJlZEtleSQyID0gc2hhcmVkS2V5JDM7XG52YXIgaGlkZGVuS2V5cyQzID0gaGlkZGVuS2V5cyQ0O1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciQ0ID0gZ2xvYmFsJGcuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwkZy5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdCQxKGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IkNCgnSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkJDEuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkJDEuc3RhdGUgfHwgKHNoYXJlZCQxLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHVuY3VycnlUaGlzJGQoc3RvcmUuZ2V0KTtcbiAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMkZChzdG9yZS5oYXMpO1xuICB2YXIgd21zZXQgPSB1bmN1cnJ5VGhpcyRkKHN0b3JlLnNldCk7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvciQ0KE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSQyKCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzJDNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24kNihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yJDQoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ1KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093biQ2KGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093biQ2KGl0LCBTVEFURSk7XG4gIH07XG59XG5cbnZhciBpbnRlcm5hbFN0YXRlID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcblxudmFyIERFU0NSSVBUT1JTJDMgPSBkZXNjcmlwdG9ycztcbnZhciBoYXNPd24kNSA9IGhhc093blByb3BlcnR5XzE7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSQxID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyQzICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24kNShGdW5jdGlvblByb3RvdHlwZSQxLCAnbmFtZScpO1xuLy8gYWRkaXRpb25hbCBwcm90ZWN0aW9uIGZyb20gbWluaWZpZWQgLyBtYW5nbGVkIC8gZHJvcHBlZCBmdW5jdGlvbiBuYW1lc1xudmFyIFBST1BFUiA9IEVYSVNUUyAmJiAoZnVuY3Rpb24gc29tZXRoaW5nKCkgeyAvKiBlbXB0eSAqLyB9KS5uYW1lID09PSAnc29tZXRoaW5nJztcbnZhciBDT05GSUdVUkFCTEUgPSBFWElTVFMgJiYgKCFERVNDUklQVE9SUyQzIHx8IChERVNDUklQVE9SUyQzICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUkMSwgJ25hbWUnKS5jb25maWd1cmFibGUpKTtcblxudmFyIGZ1bmN0aW9uTmFtZSA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcblxudmFyIGdsb2JhbCRmID0gZ2xvYmFsJHk7XG52YXIgaXNDYWxsYWJsZSQ4ID0gaXNDYWxsYWJsZSRnO1xudmFyIGhhc093biQ0ID0gaGFzT3duUHJvcGVydHlfMTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNCA9IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ2O1xudmFyIHNldEdsb2JhbCQxID0gc2V0R2xvYmFsJDM7XG52YXIgaW5zcGVjdFNvdXJjZSQxID0gaW5zcGVjdFNvdXJjZSQzO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUkMSA9IGludGVybmFsU3RhdGU7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUkMSA9IGZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlJDIgPSBJbnRlcm5hbFN0YXRlTW9kdWxlJDEuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZSQxLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihyZWRlZmluZSQ1LmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBuYW1lID0gb3B0aW9ucyAmJiBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgdmFyIHN0YXRlO1xuICBpZiAoaXNDYWxsYWJsZSQ4KHZhbHVlKSkge1xuICAgIGlmIChTdHJpbmcobmFtZSkuc2xpY2UoMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgICAgbmFtZSA9ICdbJyArIFN0cmluZyhuYW1lKS5yZXBsYWNlKC9eU3ltYm9sXFwoKFteKV0qKVxcKS8sICckMScpICsgJ10nO1xuICAgIH1cbiAgICBpZiAoIWhhc093biQ0KHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSQxICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNCh2YWx1ZSwgJ25hbWUnLCBuYW1lKTtcbiAgICB9XG4gICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFzdGF0ZS5zb3VyY2UpIHtcbiAgICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsJGYpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbCQxKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNChPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUkOCh0aGlzKSAmJiBnZXRJbnRlcm5hbFN0YXRlJDIodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UkMSh0aGlzKTtcbn0pO1xuXG52YXIgb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyA9IHt9O1xuXG52YXIgY2VpbCQxID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSQ0ID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gc2FmZVxuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IChudW1iZXIgPiAwID8gZmxvb3IgOiBjZWlsJDEpKG51bWJlcik7XG59O1xuXG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSQzID0gdG9JbnRlZ2VyT3JJbmZpbml0eSQ0O1xuXG52YXIgbWF4JDEgPSBNYXRoLm1heDtcbnZhciBtaW4kMiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG52YXIgdG9BYnNvbHV0ZUluZGV4JDIgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkkMyhpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heCQxKGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluJDIoaW50ZWdlciwgbGVuZ3RoKTtcbn07XG5cbnZhciB0b0ludGVnZXJPckluZmluaXR5JDIgPSB0b0ludGVnZXJPckluZmluaXR5JDQ7XG5cbnZhciBtaW4kMSA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxudmFyIHRvTGVuZ3RoJDMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbiQxKHRvSW50ZWdlck9ySW5maW5pdHkkMihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxudmFyIHRvTGVuZ3RoJDIgPSB0b0xlbmd0aCQzO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxudmFyIGxlbmd0aE9mQXJyYXlMaWtlJDIgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aCQyKG9iai5sZW5ndGgpO1xufTtcblxudmFyIHRvSW5kZXhlZE9iamVjdCQzID0gdG9JbmRleGVkT2JqZWN0JDU7XG52YXIgdG9BYnNvbHV0ZUluZGV4JDEgPSB0b0Fic29sdXRlSW5kZXgkMjtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSQxID0gbGVuZ3RoT2ZBcnJheUxpa2UkMjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QkMyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QkMygkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlJDEoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4JDEoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbnZhciBhcnJheUluY2x1ZGVzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCQzKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZCQzKGZhbHNlKVxufTtcblxudmFyIHVuY3VycnlUaGlzJGMgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xudmFyIGhhc093biQzID0gaGFzT3duUHJvcGVydHlfMTtcbnZhciB0b0luZGV4ZWRPYmplY3QkMiA9IHRvSW5kZXhlZE9iamVjdCQ1O1xudmFyIGluZGV4T2YkMSA9IGFycmF5SW5jbHVkZXMuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzJDIgPSBoaWRkZW5LZXlzJDQ7XG5cbnZhciBwdXNoJDEgPSB1bmN1cnJ5VGhpcyRjKFtdLnB1c2gpO1xuXG52YXIgb2JqZWN0S2V5c0ludGVybmFsID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QkMihvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093biQzKGhpZGRlbktleXMkMiwga2V5KSAmJiBoYXNPd24kMyhPLCBrZXkpICYmIHB1c2gkMShyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24kMyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mJDEocmVzdWx0LCBrZXkpIHx8IHB1c2gkMShyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xudmFyIGVudW1CdWdLZXlzJDMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuXG52YXIgaW50ZXJuYWxPYmplY3RLZXlzJDEgPSBvYmplY3RLZXlzSW50ZXJuYWw7XG52YXIgZW51bUJ1Z0tleXMkMiA9IGVudW1CdWdLZXlzJDM7XG5cbnZhciBoaWRkZW5LZXlzJDEgPSBlbnVtQnVnS2V5cyQyLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbm9iamVjdEdldE93blByb3BlcnR5TmFtZXMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzJDEoTywgaGlkZGVuS2V5cyQxKTtcbn07XG5cbnZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxub2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG52YXIgZ2V0QnVpbHRJbiQyID0gZ2V0QnVpbHRJbiQ1O1xudmFyIHVuY3VycnlUaGlzJGIgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQxID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGFuT2JqZWN0JDggPSBhbk9iamVjdCRhO1xuXG52YXIgY29uY2F0JDEgPSB1bmN1cnJ5VGhpcyRiKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBvd25LZXlzJDEgPSBnZXRCdWlsdEluJDIoJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QkOChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlJDEuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGNvbmNhdCQxKGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG5cbnZhciBoYXNPd24kMiA9IGhhc093blByb3BlcnR5XzE7XG52YXIgb3duS2V5cyA9IG93bktleXMkMTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUkMyA9IG9iamVjdERlZmluZVByb3BlcnR5O1xuXG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyQxID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQzLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXNPd24kMih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093biQyKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgZmFpbHMkYiA9IGZhaWxzJGk7XG52YXIgaXNDYWxsYWJsZSQ3ID0gaXNDYWxsYWJsZSRnO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQkMSA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZSQ3KGRldGVjdGlvbikgPyBmYWlscyRiKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkJDEubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZCQxLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZCQxLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkJDEuUE9MWUZJTEwgPSAnUCc7XG5cbnZhciBpc0ZvcmNlZF8xID0gaXNGb3JjZWQkMTtcblxudmFyIGdsb2JhbCRlID0gZ2xvYmFsJHk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDMgPSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNjtcbnZhciByZWRlZmluZSQ0ID0gcmVkZWZpbmUkNS5leHBvcnRzO1xudmFyIHNldEdsb2JhbCA9IHNldEdsb2JhbCQzO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzJDE7XG52YXIgaXNGb3JjZWQgPSBpc0ZvcmNlZF8xO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xudmFyIF9leHBvcnQgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsJGU7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsJGVbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbCRlW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMyhzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lJDQodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIHdlbGxLbm93blN5bWJvbCQ5ID0gd2VsbEtub3duU3ltYm9sJGI7XG5cbnZhciBUT19TVFJJTkdfVEFHJDMgPSB3ZWxsS25vd25TeW1ib2wkOSgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBRyQzXSA9ICd6JztcblxudmFyIHRvU3RyaW5nVGFnU3VwcG9ydCA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuXG52YXIgZ2xvYmFsJGQgPSBnbG9iYWwkeTtcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSB0b1N0cmluZ1RhZ1N1cHBvcnQ7XG52YXIgaXNDYWxsYWJsZSQ2ID0gaXNDYWxsYWJsZSRnO1xudmFyIGNsYXNzb2ZSYXcgPSBjbGFzc29mUmF3JDE7XG52YXIgd2VsbEtub3duU3ltYm9sJDggPSB3ZWxsS25vd25TeW1ib2wkYjtcblxudmFyIFRPX1NUUklOR19UQUckMiA9IHdlbGxLbm93blN5bWJvbCQ4KCd0b1N0cmluZ1RhZycpO1xudmFyIE9iamVjdCQyID0gZ2xvYmFsJGQuT2JqZWN0O1xuXG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxudmFyIGNsYXNzb2YkNCA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QkMihpdCksIFRPX1NUUklOR19UQUckMikpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZSQ2KE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcblxudmFyIGdsb2JhbCRjID0gZ2xvYmFsJHk7XG52YXIgY2xhc3NvZiQzID0gY2xhc3NvZiQ0O1xuXG52YXIgU3RyaW5nJDIgPSBnbG9iYWwkYy5TdHJpbmc7XG5cbnZhciB0b1N0cmluZyQ3ID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mJDMoYXJndW1lbnQpID09PSAnU3ltYm9sJykgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuICByZXR1cm4gU3RyaW5nJDIoYXJndW1lbnQpO1xufTtcblxudmFyIGFuT2JqZWN0JDcgPSBhbk9iamVjdCRhO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG52YXIgcmVnZXhwRmxhZ3MkMSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCQ3KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBmYWlscyRhID0gZmFpbHMkaTtcbnZhciBnbG9iYWwkYiA9IGdsb2JhbCR5O1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAkMiA9IGdsb2JhbCRiLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kkMiA9IGZhaWxzJGEoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwJDIoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9IG51bGw7XG59KTtcblxuLy8gVUMgQnJvd3NlciBidWdcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMDA4XG52YXIgTUlTU0VEX1NUSUNLWSA9IFVOU1VQUE9SVEVEX1kkMiB8fCBmYWlscyRhKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEkUmVnRXhwJDIoJ2EnLCAneScpLnN0aWNreTtcbn0pO1xuXG52YXIgQlJPS0VOX0NBUkVUID0gVU5TVVBQT1JURURfWSQyIHx8IGZhaWxzJGEoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gJFJlZ0V4cCQyKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuXG52YXIgcmVnZXhwU3RpY2t5SGVscGVycyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1kkMlxufTtcblxudmFyIG9iamVjdERlZmluZVByb3BlcnRpZXMgPSB7fTtcblxudmFyIGludGVybmFsT2JqZWN0S2V5cyA9IG9iamVjdEtleXNJbnRlcm5hbDtcbnZhciBlbnVtQnVnS2V5cyQxID0gZW51bUJ1Z0tleXMkMztcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG52YXIgb2JqZWN0S2V5cyQyID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMkMSk7XG59O1xuXG52YXIgREVTQ1JJUFRPUlMkMiA9IGRlc2NyaXB0b3JzO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gdjhQcm90b3R5cGVEZWZpbmVCdWc7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUkMiA9IG9iamVjdERlZmluZVByb3BlcnR5O1xudmFyIGFuT2JqZWN0JDYgPSBhbk9iamVjdCRhO1xudmFyIHRvSW5kZXhlZE9iamVjdCQxID0gdG9JbmRleGVkT2JqZWN0JDU7XG52YXIgb2JqZWN0S2V5cyQxID0gb2JqZWN0S2V5cyQyO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbm9iamVjdERlZmluZVByb3BlcnRpZXMuZiA9IERFU0NSSVBUT1JTJDIgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QkNihPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0JDEoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyQxKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUkMi5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciBnZXRCdWlsdEluJDEgPSBnZXRCdWlsdEluJDU7XG5cbnZhciBodG1sJDEgPSBnZXRCdWlsdEluJDEoJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuXG4vKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xuXG52YXIgYW5PYmplY3QkNSA9IGFuT2JqZWN0JGE7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IG9iamVjdERlZmluZVByb3BlcnRpZXM7XG52YXIgZW51bUJ1Z0tleXMgPSBlbnVtQnVnS2V5cyQzO1xudmFyIGhpZGRlbktleXMgPSBoaWRkZW5LZXlzJDQ7XG52YXIgaHRtbCA9IGh0bWwkMTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQkMSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCQyO1xudmFyIHNoYXJlZEtleSQxID0gc2hhcmVkS2V5JDM7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyQxID0gc2hhcmVkS2V5JDEoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50JDEoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UTyQxXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdCQ1KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPJDFdID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllc01vZHVsZS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgZmFpbHMkOSA9IGZhaWxzJGk7XG52YXIgZ2xvYmFsJGEgPSBnbG9iYWwkeTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwJDEgPSBnbG9iYWwkYS5SZWdFeHA7XG5cbnZhciByZWdleHBVbnN1cHBvcnRlZERvdEFsbCA9IGZhaWxzJDkoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwJDEoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcblxudmFyIGZhaWxzJDggPSBmYWlscyRpO1xudmFyIGdsb2JhbCQ5ID0gZ2xvYmFsJHk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbCQ5LlJlZ0V4cDtcblxudmFyIHJlZ2V4cFVuc3VwcG9ydGVkTmNnID0gZmFpbHMkOChmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJyg/PGE+YiknLCAnZycpO1xuICByZXR1cm4gcmUuZXhlYygnYicpLmdyb3Vwcy5hICE9PSAnYicgfHxcbiAgICAnYicucmVwbGFjZShyZSwgJyQ8YT5jJykgIT09ICdiYyc7XG59KTtcblxuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwLCByZWdleHAvbm8tbGF6eS1lbmRzIC0tIHRlc3RpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby11c2VsZXNzLXF1YW50aWZpZXIgLS0gdGVzdGluZyAqL1xudmFyIGNhbGwkNSA9IGZ1bmN0aW9uQ2FsbDtcbnZhciB1bmN1cnJ5VGhpcyRhID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbnZhciB0b1N0cmluZyQ2ID0gdG9TdHJpbmckNztcbnZhciByZWdleHBGbGFncyA9IHJlZ2V4cEZsYWdzJDE7XG52YXIgc3RpY2t5SGVscGVycyQxID0gcmVnZXhwU3RpY2t5SGVscGVycztcbnZhciBzaGFyZWQgPSBzaGFyZWQkNC5leHBvcnRzO1xudmFyIGNyZWF0ZSQyID0gb2JqZWN0Q3JlYXRlO1xudmFyIGdldEludGVybmFsU3RhdGUkMSA9IGludGVybmFsU3RhdGUuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZWdleHBVbnN1cHBvcnRlZERvdEFsbDtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZWdleHBVbnN1cHBvcnRlZE5jZztcblxudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG52YXIgY2hhckF0JDIgPSB1bmN1cnJ5VGhpcyRhKCcnLmNoYXJBdCk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzJGEoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSQxID0gdW5jdXJyeVRoaXMkYSgnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSQzID0gdW5jdXJyeVRoaXMkYSgnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwkNShuYXRpdmVFeGVjLCByZTEsICdhJyk7XG4gIGNhbGwkNShuYXRpdmVFeGVjLCByZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSQxID0gc3RpY2t5SGVscGVycyQxLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWSQxIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cmluZykge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSQxKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmckNihzdHJpbmcpO1xuICAgIHZhciByYXcgPSBzdGF0ZS5yYXc7XG4gICAgdmFyIHJlc3VsdCwgcmVDb3B5LCBsYXN0SW5kZXgsIG1hdGNoLCBpLCBvYmplY3QsIGdyb3VwO1xuXG4gICAgaWYgKHJhdykge1xuICAgICAgcmF3Lmxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJlc3VsdCA9IGNhbGwkNShwYXRjaGVkRXhlYywgcmF3LCBzdHIpO1xuICAgICAgcmUubGFzdEluZGV4ID0gcmF3Lmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwcyA9IHN0YXRlLmdyb3VwcztcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSQxICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsJDUocmVnZXhwRmxhZ3MsIHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gcmVwbGFjZSQxKGZsYWdzLCAneScsICcnKTtcbiAgICAgIGlmIChpbmRleE9mKGZsYWdzLCAnZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBzdHJpbmdTbGljZSQzKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdCQyKHN0ciwgcmUubGFzdEluZGV4IC0gMSkgIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IGNhbGwkNShuYXRpdmVFeGVjLCBzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBzdHJpbmdTbGljZSQzKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZSQzKG1hdGNoWzBdLCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwkNShuYXRpdmVSZXBsYWNlLCBtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoICYmIGdyb3Vwcykge1xuICAgICAgbWF0Y2guZ3JvdXBzID0gb2JqZWN0ID0gY3JlYXRlJDIobnVsbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgICAgICBvYmplY3RbZ3JvdXBbMF1dID0gbWF0Y2hbZ3JvdXBbMV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxudmFyIHJlZ2V4cEV4ZWMkMyA9IHBhdGNoZWRFeGVjO1xuXG52YXIgJCQ0ID0gX2V4cG9ydDtcbnZhciBleGVjJDMgPSByZWdleHBFeGVjJDM7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQkNCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjJDMgfSwge1xuICBleGVjOiBleGVjJDNcbn0pO1xuXG52YXIgTkFUSVZFX0JJTkQgPSBmdW5jdGlvbkJpbmROYXRpdmU7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSQxID0gRnVuY3Rpb25Qcm90b3R5cGUuYXBwbHk7XG52YXIgY2FsbCQ0ID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gc2FmZVxudmFyIGZ1bmN0aW9uQXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCA/IGNhbGwkNC5iaW5kKGFwcGx5JDEpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbCQ0LmFwcGx5KGFwcGx5JDEsIGFyZ3VtZW50cyk7XG59KTtcblxuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcblxudmFyIHVuY3VycnlUaGlzJDkgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xudmFyIHJlZGVmaW5lJDMgPSByZWRlZmluZSQ1LmV4cG9ydHM7XG52YXIgcmVnZXhwRXhlYyQyID0gcmVnZXhwRXhlYyQzO1xudmFyIGZhaWxzJDcgPSBmYWlscyRpO1xudmFyIHdlbGxLbm93blN5bWJvbCQ3ID0gd2VsbEtub3duU3ltYm9sJGI7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDIgPSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNjtcblxudmFyIFNQRUNJRVMkMSA9IHdlbGxLbm93blN5bWJvbCQ3KCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlJDEgPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgZml4UmVnZXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbCQ3KEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMkNyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MICYmICFmYWlscyQ3KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTJDFdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgRk9SQ0VEXG4gICkge1xuICAgIHZhciB1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QgPSB1bmN1cnJ5VGhpcyQ5KC8uL1tTWU1CT0xdKTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciB1bmN1cnJpZWROYXRpdmVNZXRob2QgPSB1bmN1cnJ5VGhpcyQ5KG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyQyIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUkMS5leGVjKSB7XG4gICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZU1ldGhvZChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICByZWRlZmluZSQzKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgbWV0aG9kc1swXSk7XG4gICAgcmVkZWZpbmUkMyhSZWdFeHBQcm90b3R5cGUkMSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMihSZWdFeHBQcm90b3R5cGUkMVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcblxudmFyIGlzT2JqZWN0ID0gaXNPYmplY3QkNjtcbnZhciBjbGFzc29mJDIgPSBjbGFzc29mUmF3JDE7XG52YXIgd2VsbEtub3duU3ltYm9sJDYgPSB3ZWxsS25vd25TeW1ib2wkYjtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sJDYoJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG52YXIgaXNSZWdleHAgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZiQyKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuXG52YXIgdW5jdXJyeVRoaXMkOCA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG52YXIgZmFpbHMkNiA9IGZhaWxzJGk7XG52YXIgaXNDYWxsYWJsZSQ1ID0gaXNDYWxsYWJsZSRnO1xudmFyIGNsYXNzb2YkMSA9IGNsYXNzb2YkNDtcbnZhciBnZXRCdWlsdEluID0gZ2V0QnVpbHRJbiQ1O1xudmFyIGluc3BlY3RTb3VyY2UgPSBpbnNwZWN0U291cmNlJDM7XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIGVtcHR5ID0gW107XG52YXIgY29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi87XG52YXIgZXhlYyQyID0gdW5jdXJyeVRoaXMkOChjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUkNShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdHJ1Y3Qobm9vcCwgZW1wdHksIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUkNShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mJDEoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjJDIoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG52YXIgaXNDb25zdHJ1Y3RvciQxID0gIWNvbnN0cnVjdCB8fCBmYWlscyQ2KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcblxudmFyIGdsb2JhbCQ4ID0gZ2xvYmFsJHk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IGlzQ29uc3RydWN0b3IkMTtcbnZhciB0cnlUb1N0cmluZyA9IHRyeVRvU3RyaW5nJDI7XG5cbnZhciBUeXBlRXJyb3IkMyA9IGdsb2JhbCQ4LlR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkgaXMgdHJ1ZWBcbnZhciBhQ29uc3RydWN0b3IkMSA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yJDModHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcblxudmFyIGFuT2JqZWN0JDQgPSBhbk9iamVjdCRhO1xudmFyIGFDb25zdHJ1Y3RvciA9IGFDb25zdHJ1Y3RvciQxO1xudmFyIHdlbGxLbm93blN5bWJvbCQ1ID0gd2VsbEtub3duU3ltYm9sJGI7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sJDUoJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciQxID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0JDQoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QkNChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcblxudmFyIHVuY3VycnlUaGlzJDcgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkkMSA9IHRvSW50ZWdlck9ySW5maW5pdHkkNDtcbnZhciB0b1N0cmluZyQ1ID0gdG9TdHJpbmckNztcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDQgPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDc7XG5cbnZhciBjaGFyQXQkMSA9IHVuY3VycnlUaGlzJDcoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMkNygnJy5jaGFyQ29kZUF0KTtcbnZhciBzdHJpbmdTbGljZSQyID0gdW5jdXJyeVRoaXMkNygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QkMiA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nJDUocmVxdWlyZU9iamVjdENvZXJjaWJsZSQ0KCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eSQxKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IGNoYXJBdCQxKFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UkMihTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbnZhciBzdHJpbmdNdWx0aWJ5dGUgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kJDIoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QkMih0cnVlKVxufTtcblxudmFyIGNoYXJBdCA9IHN0cmluZ011bHRpYnl0ZS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXgkMSA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuXG52YXIgdG9Qcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkkMztcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSQxID0gb2JqZWN0RGVmaW5lUHJvcGVydHk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDEgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IkNDtcblxudmFyIGNyZWF0ZVByb3BlcnR5JDEgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUkMS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQxKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcblxudmFyIGdsb2JhbCQ3ID0gZ2xvYmFsJHk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gdG9BYnNvbHV0ZUluZGV4JDI7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSBsZW5ndGhPZkFycmF5TGlrZSQyO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gY3JlYXRlUHJvcGVydHkkMTtcblxudmFyIEFycmF5JDEgPSBnbG9iYWwkNy5BcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxudmFyIGFycmF5U2xpY2VTaW1wbGUgPSBmdW5jdGlvbiAoTywgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICB2YXIgcmVzdWx0ID0gQXJyYXkkMShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIGdsb2JhbCQ2ID0gZ2xvYmFsJHk7XG52YXIgY2FsbCQzID0gZnVuY3Rpb25DYWxsO1xudmFyIGFuT2JqZWN0JDMgPSBhbk9iamVjdCRhO1xudmFyIGlzQ2FsbGFibGUkNCA9IGlzQ2FsbGFibGUkZztcbnZhciBjbGFzc29mID0gY2xhc3NvZlJhdyQxO1xudmFyIHJlZ2V4cEV4ZWMkMSA9IHJlZ2V4cEV4ZWMkMztcblxudmFyIFR5cGVFcnJvciQyID0gZ2xvYmFsJDYuVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbnZhciByZWdleHBFeGVjQWJzdHJhY3QgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKGlzQ2FsbGFibGUkNChleGVjKSkge1xuICAgIHZhciByZXN1bHQgPSBjYWxsJDMoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QkMyhyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgPT09ICdSZWdFeHAnKSByZXR1cm4gY2FsbCQzKHJlZ2V4cEV4ZWMkMSwgUiwgUyk7XG4gIHRocm93IFR5cGVFcnJvciQyKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG59O1xuXG52YXIgYXBwbHkgPSBmdW5jdGlvbkFwcGx5O1xudmFyIGNhbGwkMiA9IGZ1bmN0aW9uQ2FsbDtcbnZhciB1bmN1cnJ5VGhpcyQ2ID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IGZpeFJlZ2V4cFdlbGxLbm93blN5bWJvbExvZ2ljO1xudmFyIGlzUmVnRXhwID0gaXNSZWdleHA7XG52YXIgYW5PYmplY3QkMiA9IGFuT2JqZWN0JGE7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSQzID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ3O1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHNwZWNpZXNDb25zdHJ1Y3RvciQxO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleCQxO1xudmFyIHRvTGVuZ3RoJDEgPSB0b0xlbmd0aCQzO1xudmFyIHRvU3RyaW5nJDQgPSB0b1N0cmluZyQ3O1xudmFyIGdldE1ldGhvZCA9IGdldE1ldGhvZCQyO1xudmFyIGFycmF5U2xpY2UgPSBhcnJheVNsaWNlU2ltcGxlO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVnZXhwRXhlY0Fic3RyYWN0O1xudmFyIHJlZ2V4cEV4ZWMgPSByZWdleHBFeGVjJDM7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlZ2V4cFN0aWNreUhlbHBlcnM7XG52YXIgZmFpbHMkNSA9IGZhaWxzJGk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciBleGVjJDEgPSB1bmN1cnJ5VGhpcyQ2KC8uLy5leGVjKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMkNigkcHVzaCk7XG52YXIgc3RyaW5nU2xpY2UkMSA9IHVuY3VycnlUaGlzJDYoJycuc2xpY2UpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyQ1KGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nJDQocmVxdWlyZU9iamVjdENvZXJjaWJsZSQzKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBjYWxsJDIobmF0aXZlU3BsaXQsIHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBjYWxsJDIocmVnZXhwRXhlYywgc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBwdXNoKG91dHB1dCwgc3RyaW5nU2xpY2UkMShzdHJpbmcsIGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcHBseSgkcHVzaCwgb3V0cHV0LCBhcnJheVNsaWNlKG1hdGNoLCAxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIWV4ZWMkMShzZXBhcmF0b3JDb3B5LCAnJykpIHB1c2gob3V0cHV0LCAnJyk7XG4gICAgICB9IGVsc2UgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlJDEoc3RyaW5nLCBsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IGFycmF5U2xpY2Uob3V0cHV0LCAwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogY2FsbCQyKG5hdGl2ZVNwbGl0LCB0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQzKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZXBhcmF0b3IsIFNQTElUKTtcbiAgICAgIHJldHVybiBzcGxpdHRlclxuICAgICAgICA/IGNhbGwkMihzcGxpdHRlciwgc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBjYWxsJDIoaW50ZXJuYWxTcGxpdCwgdG9TdHJpbmckNChPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHN0cmluZywgbGltaXQpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0JDIodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nJDQoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcngsIFMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBzdHJpbmdTbGljZSQxKFMsIHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoJDEoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFVOU1VQUE9SVEVEX1kgPyBxIDogMCkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlJDEoUywgcCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgcHVzaChBLCB6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlJDEoUywgcCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQywgVU5TVVBQT1JURURfWSk7XG5cbi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG52YXIgd2hpdGVzcGFjZXMkMiA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuXG52YXIgdW5jdXJyeVRoaXMkNSA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSQyID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSQ3O1xudmFyIHRvU3RyaW5nJDMgPSB0b1N0cmluZyQ3O1xudmFyIHdoaXRlc3BhY2VzJDEgPSB3aGl0ZXNwYWNlcyQyO1xuXG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzJDUoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzJDEgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QkMSA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmckMyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDIoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbnZhciBzdHJpbmdUcmltID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QkMSgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCQxKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kJDEoMylcbn07XG5cbnZhciBnbG9iYWwkNSA9IGdsb2JhbCR5O1xudmFyIGZhaWxzJDQgPSBmYWlscyRpO1xudmFyIHVuY3VycnlUaGlzJDQgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xudmFyIHRvU3RyaW5nJDIgPSB0b1N0cmluZyQ3O1xudmFyIHRyaW0gPSBzdHJpbmdUcmltLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSB3aGl0ZXNwYWNlcyQyO1xuXG52YXIgJHBhcnNlSW50JDEgPSBnbG9iYWwkNS5wYXJzZUludDtcbnZhciBTeW1ib2wkMSA9IGdsb2JhbCQ1LlN5bWJvbDtcbnZhciBJVEVSQVRPUiQzID0gU3ltYm9sJDEgJiYgU3ltYm9sJDEuaXRlcmF0b3I7XG52YXIgaGV4ID0gL15bKy1dPzB4L2k7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzJDQoaGV4LmV4ZWMpO1xudmFyIEZPUkNFRCA9ICRwYXJzZUludCQxKHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50JDEod2hpdGVzcGFjZXMgKyAnMHgxNicpICE9PSAyMlxuICAvLyBNUyBFZGdlIDE4LSBicm9rZW4gd2l0aCBib3hlZCBzeW1ib2xzXG4gIHx8IChJVEVSQVRPUiQzICYmICFmYWlscyQ0KGZ1bmN0aW9uICgpIHsgJHBhcnNlSW50JDEoT2JqZWN0KElURVJBVE9SJDMpKTsgfSkpO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbnZhciBudW1iZXJQYXJzZUludCA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgpIHtcbiAgdmFyIFMgPSB0cmltKHRvU3RyaW5nJDIoc3RyaW5nKSk7XG4gIHJldHVybiAkcGFyc2VJbnQkMShTLCAocmFkaXggPj4+IDApIHx8IChleGVjKGhleCwgUykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50JDE7XG5cbnZhciAkJDMgPSBfZXhwb3J0O1xudmFyICRwYXJzZUludCA9IG51bWJlclBhcnNlSW50O1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbiQkMyh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSAkcGFyc2VJbnQgfSwge1xuICBwYXJzZUludDogJHBhcnNlSW50XG59KTtcblxudmFyIHVuY3VycnlUaGlzJDMgPSBmdW5jdGlvblVuY3VycnlUaGlzO1xudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FJDEgPSBmdW5jdGlvbk5hbWUuUFJPUEVSO1xudmFyIHJlZGVmaW5lJDIgPSByZWRlZmluZSQ1LmV4cG9ydHM7XG52YXIgYW5PYmplY3QkMSA9IGFuT2JqZWN0JGE7XG52YXIgaXNQcm90b3R5cGVPZiA9IG9iamVjdElzUHJvdG90eXBlT2Y7XG52YXIgJHRvU3RyaW5nID0gdG9TdHJpbmckNztcbnZhciBmYWlscyQzID0gZmFpbHMkaTtcbnZhciByZWdFeHBGbGFncyA9IHJlZ2V4cEZsYWdzJDE7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbiRUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xudmFyIGdldEZsYWdzID0gdW5jdXJyeVRoaXMkMyhyZWdFeHBGbGFncyk7XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzJDMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbiRUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSQxICYmIG4kVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIHJlZGVmaW5lJDIoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0JDEodGhpcyk7XG4gICAgdmFyIHAgPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSAkdG9TdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUikgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBnZXRGbGFncyhSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5jb25zdCBGRUFUVVJFX1JPV19JTkRFWCA9IDA7XG5jb25zdCBGRUFUVVJFX0NPTF9JTkRFWCA9IDE7XG5jb25zdCBGRUFUVVJFX0NFTExTX1NUQVJUX0lOREVYID0gMjtcbmNvbnN0IENFTExfTlVNX0lOREVYID0gMDtcbmNvbnN0IENFTExfU1RBUlRfSU5ERVggPSAxO1xuY29uc3QgQ0VMTF9FTkRfSU5ERVggPSAyO1xuY29uc3QgQ0VMTF9WQUxVRVNfU1RBUlRfSU5ERVggPSAzOyAvLyBWYWx1ZXMgZnJvbSB0aGUgNHdpbmdzIEFQSSBpbiBpbnRBcnJheSBmb3JtIGNhbid0IGJlIGZsb2F0cywgc28gdGhleSBhcmUgbXVsdGlwbGllZCBieSBhIGZhY3RvciwgaGVyZSB3ZSBnZXQgYmFjayB0byB0aGUgb3JpZ2luYWwgdmFsdWVcblxuY29uc3QgVkFMVUVfTVVMVElQTElFUiA9IDEwMDtcblxuY29uc3QgZ2V0Q2VsbFZhbHVlcyA9IHJhd1ZhbHVlcyA9PiB7XG4gIC8vIFJhdyB2YWx1ZXMgY29tZSBhcyBhIHNpbmdsZSBzdHJpbmcgKE1WVCBsaW1pdGF0aW9uKSwgdHVybiBpbnRvIGFuIGFycmF5IG9mIGludHMgZmlyc3RcbiAgY29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheShyYXdWYWx1ZXMpID8gcmF3VmFsdWVzIDogcmF3VmFsdWVzLnNsaWNlKDEsIC0xKS5zcGxpdCgnLCcpLm1hcCh2ID0+IHBhcnNlSW50KHYpKTsgLy8gRmlyc3QgdHdvIHZhbHVlcyBmb3IgYSBjZWxsIGFyZSB0aGUgb3ZlcmFsbCBzdGFydCBhbmQgZW5kIHRpbWUgb2Zmc2V0cyBmb3IgYWxsIHRoZSBjZWxsIHZhbHVlcyAoaW4gZGF5cy9ob3Vycy8xMGRheXMgZnJvbSBzdGFydCBvZiB0aW1lKVxuXG4gIGNvbnN0IG1pbkNlbGxPZmZzZXQgPSB2YWx1ZXNbQ0VMTF9TVEFSVF9JTkRFWF07XG4gIGNvbnN0IG1heENlbGxPZmZzZXQgPSB2YWx1ZXNbQ0VMTF9FTkRfSU5ERVhdO1xuICByZXR1cm4ge1xuICAgIHZhbHVlcyxcbiAgICBtaW5DZWxsT2Zmc2V0LFxuICAgIG1heENlbGxPZmZzZXRcbiAgfTtcbn07XG5jb25zdCBnZXRSZWFsVmFsdWUgPSAocmF3VmFsdWUsIG11bHRpcGxpZXIgPSBWQUxVRV9NVUxUSVBMSUVSKSA9PiB7XG4gIHJldHVybiByYXdWYWx1ZSAvIG11bHRpcGxpZXI7XG59O1xuY29uc3QgZ2V0UmVhbFZhbHVlcyA9IChyYXdWYWx1ZXMsIG11bHRpcGxpZXIgPSBWQUxVRV9NVUxUSVBMSUVSKSA9PiB7XG4gIC8vIFJhdyA0dyBBUEkgdmFsdWVzIGNvbWUgd2l0aG91dCBkZWNpbWFscywgbXVsdGlwbGllZCBieSAxMDBcbiAgY29uc3QgcmVhbFZhbHVlcyA9IHJhd1ZhbHVlcy5tYXAoc3VibGF5ZXJWYWx1ZSA9PiBnZXRSZWFsVmFsdWUoc3VibGF5ZXJWYWx1ZSwgbXVsdGlwbGllcikpO1xuICByZXR1cm4gcmVhbFZhbHVlcztcbn07XG5jb25zdCBnZXRDZWxsQXJyYXlJbmRleCA9IChtaW5DZWxsT2Zmc2V0LCBudW1TdWJsYXllcnMsIG9mZnNldCkgPT4ge1xuICByZXR1cm4gQ0VMTF9WQUxVRVNfU1RBUlRfSU5ERVggKyAob2Zmc2V0IC0gbWluQ2VsbE9mZnNldCkgKiBudW1TdWJsYXllcnM7XG59O1xuXG5jb25zdCBnZXRMYXN0RGlnaXQgPSBudW0gPT4gcGFyc2VJbnQobnVtLnRvU3RyaW5nKCkuc2xpY2UoLTEpKTsgLy8gSW4gb3JkZXIgZm9yIHNldEZlYXR1cmVTdGF0ZSB0byB3b3JrIGNvcnJlY3RseSwgZ2VuZXJhdGUgdW5pcXVlIElEcyBhY3Jvc3Mgdmlld3BvcnQtdmlzaWJsZSB0aWxlczpcbi8vIGNvbmNhdGVuYXRlIGxhc3QgeC96IGRpZ2l0cyBhbmQgY2VsbCBpbmNyZW1lbnQgaW5kZXggKGdvYWwgaXMgdG8gZ2V0IG51bWJlcnMgYXMgc21hbGwgYXMgcG9zc2libGUpXG5cblxuY29uc3QgZ2VuZXJhdGVVbmlxdWVJZCA9ICh4LCB5LCBjZWxsSWQpID0+IHBhcnNlSW50KFtnZXRMYXN0RGlnaXQoeCkgKyAxLCBnZXRMYXN0RGlnaXQoeSkgKyAxLCBjZWxsSWRdLmpvaW4oJycpKTtcblxudmFyIEdlb21UeXBlO1xuXG4oZnVuY3Rpb24gKEdlb21UeXBlKSB7XG4gIEdlb21UeXBlW1wicG9pbnRcIl0gPSBcInBvaW50XCI7XG4gIEdlb21UeXBlW1wicmVjdGFuZ2xlXCJdID0gXCJyZWN0YW5nbGVcIjtcbn0pKEdlb21UeXBlIHx8IChHZW9tVHlwZSA9IHt9KSk7XG5cbnZhciBTdWJsYXllckNvbWJpbmF0aW9uTW9kZTtcblxuKGZ1bmN0aW9uIChTdWJsYXllckNvbWJpbmF0aW9uTW9kZSkge1xuICBTdWJsYXllckNvbWJpbmF0aW9uTW9kZVtcIk5vbmVcIl0gPSBcIm5vbmVcIjsgLy8gQWRkIGFsbCBzdWJsYXllciByYXcgdmFsdWVzXG5cbiAgU3VibGF5ZXJDb21iaW5hdGlvbk1vZGVbXCJBZGRcIl0gPSBcImFkZFwiOyAvLyBSZXR1cm5zIGEgYnVja2V0IGluZGV4IGRlcGVuZGluZyBvbiBzdWJsYXllciB3aXRoIGhpZ2hlc3QgdmFsdWUgKyBwb3NpdGlvbiBvbiBzdWJsYXllciBjb2xvciByYW1wXG5cbiAgU3VibGF5ZXJDb21iaW5hdGlvbk1vZGVbXCJNYXhcIl0gPSBcIm1heFwiOyAvLyBSZXR1cm5zIGEgYnVja2V0IGluZGV4IGRlcGVuZGluZyBvbiBkZWx0YSB2YWx1ZSBiZXR3ZWVuIHR3byBzdWJsYXllcnNcblxuICBTdWJsYXllckNvbWJpbmF0aW9uTW9kZVtcIlRpbWVDb21wYXJlXCJdID0gXCJ0aW1lY29tcGFyZVwiOyAvLyBSZXR1cm5zIGEgYnVja2V0IGluZGV4IGRlcGVuZGluZyBvbiBhIDJEIGNvbG9yIHJhbXBcblxuICBTdWJsYXllckNvbWJpbmF0aW9uTW9kZVtcIkJpdmFyaWF0ZVwiXSA9IFwiYml2YXJpYXRlXCI7IC8vIFJldHVybnMgcmF3IHZhbHVlcyB0aGF0IGNhbiBiZSBkZWNvZGVkIHdpdGggSlNPTi5wYXJzZSAobnVtYmVyIG9yIGFycmF5IG9mIG51bWJlcnMpLiBVc2VkIGZvciBpbnRlcmFjdGlvbiBsYXllclxuXG4gIFN1YmxheWVyQ29tYmluYXRpb25Nb2RlW1wiTGl0ZXJhbFwiXSA9IFwibGl0ZXJhbFwiOyAvLyBSZXR1cm5zIHJhdyB2YWx1ZXMgYXMgYSBzdHJpbmcgaW4gdGhlIGZvcm1hdCBBQUFBQkJCQkNDQ0MgKHdoZXJlIEEsIEIsIEMsIDMgc3VibGF5ZXJzKSwgYW5kIHdoZXJlIEJCQkIgaXNcbiAgLy8gc3VibGF5ZXIgMCArIHN1YmxheWVyIDEgYW5kIENDQ0MgaXMgc3VibGF5ZXIgMCArIHN1YmxheWVyIDEgKyBzdWJsYXllciAyLiBVc2VkIGZvciBleHRydWRlZCBsYXllci5cblxuICBTdWJsYXllckNvbWJpbmF0aW9uTW9kZVtcIkN1bXVsYXRpdmVcIl0gPSBcImN1bXVsYXRpdmVcIjtcbn0pKFN1YmxheWVyQ29tYmluYXRpb25Nb2RlIHx8IChTdWJsYXllckNvbWJpbmF0aW9uTW9kZSA9IHt9KSk7XG5cbnZhciBBZ2dyZWdhdGlvbk9wZXJhdGlvbjtcblxuKGZ1bmN0aW9uIChBZ2dyZWdhdGlvbk9wZXJhdGlvbikge1xuICBBZ2dyZWdhdGlvbk9wZXJhdGlvbltcIlN1bVwiXSA9IFwic3VtXCI7XG4gIEFnZ3JlZ2F0aW9uT3BlcmF0aW9uW1wiQXZnXCJdID0gXCJhdmdcIjtcbn0pKEFnZ3JlZ2F0aW9uT3BlcmF0aW9uIHx8IChBZ2dyZWdhdGlvbk9wZXJhdGlvbiA9IHt9KSk7XG5cbnZhciB3ZWxsS25vd25TeW1ib2wkNCA9IHdlbGxLbm93blN5bWJvbCRiO1xudmFyIGNyZWF0ZSQxID0gb2JqZWN0Q3JlYXRlO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gb2JqZWN0RGVmaW5lUHJvcGVydHk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCQ0KCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUkMShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIGFkZFRvVW5zY29wYWJsZXMkMSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcblxudmFyIGl0ZXJhdG9ycyA9IHt9O1xuXG52YXIgZmFpbHMkMiA9IGZhaWxzJGk7XG5cbnZhciBjb3JyZWN0UHJvdG90eXBlR2V0dGVyID0gIWZhaWxzJDIoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuXG52YXIgZ2xvYmFsJDQgPSBnbG9iYWwkeTtcbnZhciBoYXNPd24kMSA9IGhhc093blByb3BlcnR5XzE7XG52YXIgaXNDYWxsYWJsZSQzID0gaXNDYWxsYWJsZSRnO1xudmFyIHRvT2JqZWN0JDEgPSB0b09iamVjdCQzO1xudmFyIHNoYXJlZEtleSA9IHNoYXJlZEtleSQzO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IGNvcnJlY3RQcm90b3R5cGVHZXR0ZXI7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3QkMSA9IGdsb2JhbCQ0Lk9iamVjdDtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QkMS5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbnZhciBvYmplY3RHZXRQcm90b3R5cGVPZiA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdCQxLmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0JDEoTyk7XG4gIGlmIChoYXNPd24kMShvYmplY3QsIElFX1BST1RPKSkgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGlzQ2FsbGFibGUkMyhjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBPYmplY3QkMSA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuXG52YXIgZmFpbHMkMSA9IGZhaWxzJGk7XG52YXIgaXNDYWxsYWJsZSQyID0gaXNDYWxsYWJsZSRnO1xudmFyIGdldFByb3RvdHlwZU9mJDEgPSBvYmplY3RHZXRQcm90b3R5cGVPZjtcbnZhciByZWRlZmluZSQxID0gcmVkZWZpbmUkNS5leHBvcnRzO1xudmFyIHdlbGxLbm93blN5bWJvbCQzID0gd2VsbEtub3duU3ltYm9sJGI7XG5cbnZhciBJVEVSQVRPUiQyID0gd2VsbEtub3duU3ltYm9sJDMoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyQxID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSQyLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMkMSA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mJDEoZ2V0UHJvdG90eXBlT2YkMShhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUkMiA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9IEl0ZXJhdG9yUHJvdG90eXBlJDIgPT0gdW5kZWZpbmVkIHx8IGZhaWxzJDEoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlJDJbSVRFUkFUT1IkMl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUkMiA9IHt9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUkMihJdGVyYXRvclByb3RvdHlwZSQyW0lURVJBVE9SJDJdKSkge1xuICByZWRlZmluZSQxKEl0ZXJhdG9yUHJvdG90eXBlJDIsIElURVJBVE9SJDIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbnZhciBpdGVyYXRvcnNDb3JlID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUkMixcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyQxXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkkMiA9IG9iamVjdERlZmluZVByb3BlcnR5LmY7XG52YXIgaGFzT3duID0gaGFzT3duUHJvcGVydHlfMTtcbnZhciB3ZWxsS25vd25TeW1ib2wkMiA9IHdlbGxLbm93blN5bWJvbCRiO1xuXG52YXIgVE9fU1RSSU5HX1RBRyQxID0gd2VsbEtub3duU3ltYm9sJDIoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBzZXRUb1N0cmluZ1RhZyQyID0gZnVuY3Rpb24gKHRhcmdldCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKHRhcmdldCAmJiAhU1RBVElDKSB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICBpZiAodGFyZ2V0ICYmICFoYXNPd24odGFyZ2V0LCBUT19TVFJJTkdfVEFHJDEpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkkMih0YXJnZXQsIFRPX1NUUklOR19UQUckMSwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSQxID0gaXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSBvYmplY3RDcmVhdGU7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yJDQ7XG52YXIgc2V0VG9TdHJpbmdUYWckMSA9IHNldFRvU3RyaW5nVGFnJDI7XG52YXIgSXRlcmF0b3JzJDIgPSBpdGVyYXRvcnM7XG5cbnZhciByZXR1cm5UaGlzJDEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciQxID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUkMSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyQxKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlKTtcbiAgSXRlcmF0b3JzJDJbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzJDE7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcblxudmFyIGdsb2JhbCQzID0gZ2xvYmFsJHk7XG52YXIgaXNDYWxsYWJsZSQxID0gaXNDYWxsYWJsZSRnO1xuXG52YXIgU3RyaW5nJDEgPSBnbG9iYWwkMy5TdHJpbmc7XG52YXIgVHlwZUVycm9yJDEgPSBnbG9iYWwkMy5UeXBlRXJyb3I7XG5cbnZhciBhUG9zc2libGVQcm90b3R5cGUkMSA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUkMShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yJDEoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmckMShhcmd1bWVudCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG5cbnZhciB1bmN1cnJ5VGhpcyQyID0gZnVuY3Rpb25VbmN1cnJ5VGhpcztcbnZhciBhbk9iamVjdCA9IGFuT2JqZWN0JGE7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gYVBvc3NpYmxlUHJvdG90eXBlJDE7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gdW5jdXJyeVRoaXMkMihPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcblxudmFyICQkMiA9IF9leHBvcnQ7XG52YXIgY2FsbCQxID0gZnVuY3Rpb25DYWxsO1xudmFyIEZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZTtcbnZhciBpc0NhbGxhYmxlID0gaXNDYWxsYWJsZSRnO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yJDE7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBvYmplY3RHZXRQcm90b3R5cGVPZjtcbnZhciBzZXRQcm90b3R5cGVPZiA9IG9iamVjdFNldFByb3RvdHlwZU9mO1xudmFyIHNldFRvU3RyaW5nVGFnID0gc2V0VG9TdHJpbmdUYWckMjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMSA9IGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQ2O1xudmFyIHJlZGVmaW5lID0gcmVkZWZpbmUkNS5leHBvcnRzO1xudmFyIHdlbGxLbm93blN5bWJvbCQxID0gd2VsbEtub3duU3ltYm9sJGI7XG52YXIgSXRlcmF0b3JzJDEgPSBpdGVyYXRvcnM7XG52YXIgSXRlcmF0b3JzQ29yZSA9IGl0ZXJhdG9yc0NvcmU7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SJDEgPSB3ZWxsS25vd25TeW1ib2wkMSgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxudmFyIGRlZmluZUl0ZXJhdG9yJDEgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1IkMV1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUiQxXSkpIHtcbiAgICAgICAgICByZWRlZmluZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SJDEsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmIChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDEoSXRlcmFibGVQcm90b3R5cGUsICduYW1lJywgVkFMVUVTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIGNhbGwkMShuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQkMih7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SJDFdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IkMSwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzJDFbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG52YXIgdG9JbmRleGVkT2JqZWN0ID0gdG9JbmRleGVkT2JqZWN0JDU7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IGFkZFRvVW5zY29wYWJsZXMkMTtcbnZhciBJdGVyYXRvcnMgPSBpdGVyYXRvcnM7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IGludGVybmFsU3RhdGU7XG52YXIgZGVmaW5lUHJvcGVydHkkMSA9IG9iamVjdERlZmluZVByb3BlcnR5LmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSBkZWZpbmVJdGVyYXRvciQxO1xudmFyIERFU0NSSVBUT1JTJDEgPSBkZXNjcmlwdG9ycztcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG52YXIgZXNfYXJyYXlfaXRlcmF0b3IgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoREVTQ1JJUFRPUlMkMSAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7XG4gIGRlZmluZVByb3BlcnR5JDEodmFsdWVzLCAnbmFtZScsIHsgdmFsdWU6ICd2YWx1ZXMnIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4vLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbnZhciBkb21JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuXG4vLyBpbiBvbGQgV2ViS2l0IHZlcnNpb25zLCBgZWxlbWVudC5jbGFzc0xpc3RgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBnbG9iYWwgYERPTVRva2VuTGlzdGBcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQkMjtcblxudmFyIGNsYXNzTGlzdCA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnc3BhbicpLmNsYXNzTGlzdDtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUkMSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxudmFyIGRvbVRva2VuTGlzdFByb3RvdHlwZSA9IERPTVRva2VuTGlzdFByb3RvdHlwZSQxID09PSBPYmplY3QucHJvdG90eXBlID8gdW5kZWZpbmVkIDogRE9NVG9rZW5MaXN0UHJvdG90eXBlJDE7XG5cbnZhciBnbG9iYWwkMiA9IGdsb2JhbCR5O1xudmFyIERPTUl0ZXJhYmxlcyA9IGRvbUl0ZXJhYmxlcztcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSBkb21Ub2tlbkxpc3RQcm90b3R5cGU7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSBlc19hcnJheV9pdGVyYXRvcjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNjtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSB3ZWxsS25vd25TeW1ib2wkYjtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbCQyW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsJDJbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSk7XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUsICdET01Ub2tlbkxpc3QnKTtcblxuY29uc3QgYWdncmVnYXRlQ2VsbCA9ICh7XG4gIHJhd1ZhbHVlcyxcbiAgZnJhbWUsXG4gIGRlbHRhLFxuICBxdWFudGl6ZU9mZnNldCxcbiAgc3VibGF5ZXJDb3VudCxcbiAgYWdncmVnYXRpb25PcGVyYXRpb246IF9hZ2dyZWdhdGlvbk9wZXJhdGlvbiA9IEFnZ3JlZ2F0aW9uT3BlcmF0aW9uLlN1bSxcbiAgc3VibGF5ZXJDb21iaW5hdGlvbk1vZGU6IF9zdWJsYXllckNvbWJpbmF0aW9uTW9kZSA9IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLk1heCxcbiAgbXVsdGlwbGllcjogX211bHRpcGxpZXIgPSBWQUxVRV9NVUxUSVBMSUVSXG59KSA9PiB7XG4gIGlmICghcmF3VmFsdWVzKSByZXR1cm4gbnVsbDtcbiAgY29uc3Qge1xuICAgIHZhbHVlcyxcbiAgICBtaW5DZWxsT2Zmc2V0LFxuICAgIG1heENlbGxPZmZzZXRcbiAgfSA9IGdldENlbGxWYWx1ZXMocmF3VmFsdWVzKTsgLy8gV2hlbiB3ZSBzaG91bGQgc3RhcnQgY291bnRpbmcgaW4gdGVybXMgb2YgZGF5cy9ob3Vycy8xMGRheXMgZnJvbSBzdGFydCBvZiB0aW1lXG5cbiAgY29uc3Qgc3RhcnRPZmZzZXQgPSBxdWFudGl6ZU9mZnNldCArIGZyYW1lO1xuICBjb25zdCBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIGRlbHRhO1xuICBpZiAoc3RhcnRPZmZzZXQgPiBtYXhDZWxsT2Zmc2V0IHx8IGVuZE9mZnNldCA8IG1pbkNlbGxPZmZzZXQpIHJldHVybiBudWxsO1xuICBjb25zdCBjZWxsU3RhcnRPZmZzZXQgPSBNYXRoLm1heChzdGFydE9mZnNldCwgbWluQ2VsbE9mZnNldCk7XG4gIGNvbnN0IGNlbGxFbmRPZmZzZXQgPSBNYXRoLm1pbihlbmRPZmZzZXQsIG1heENlbGxPZmZzZXQpOyAvLyBXaGVyZSB3ZSBzb3VsZCBzdGFydCBsb29raW5nIHVwIGluIHRoZSBhcnJheSAobWluQ2VsbE9mZnNldCwgbWF4Q2VsbE9mZnNldCwgc3VibGF5ZXIwdmFsdWVBdDAsIHN1YmxheWVyMXZhbHVlQXQwLCBzdWJsYXllcjB2YWx1ZUF0MSwgc3VibGF5ZXIxdmFsdWVBdDEsIC4uLilcblxuICBjb25zdCBzdGFydEF0ID0gZ2V0Q2VsbEFycmF5SW5kZXgobWluQ2VsbE9mZnNldCwgc3VibGF5ZXJDb3VudCwgY2VsbFN0YXJ0T2Zmc2V0KTtcbiAgY29uc3QgZW5kQXQgPSBnZXRDZWxsQXJyYXlJbmRleChtaW5DZWxsT2Zmc2V0LCBzdWJsYXllckNvdW50LCBjZWxsRW5kT2Zmc2V0KTtcbiAgY29uc3QgcmF3VmFsdWVzQXJyU2xpY2UgPSB2YWx1ZXMuc2xpY2Uoc3RhcnRBdCwgZW5kQXQpOyAvLyBPbmUgYWdncmVnYXRlZCB2YWx1ZSBwZXIgc3VibGF5ZXJcblxuICBsZXQgYWdncmVnYXRlZFZhbHVlcyA9IG5ldyBBcnJheShzdWJsYXllckNvdW50KS5maWxsKDApO1xuICBsZXQgbnVtVmFsdWVzID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhd1ZhbHVlc0FyclNsaWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3VibGF5ZXJJbmRleCA9IGkgJSBzdWJsYXllckNvdW50O1xuICAgIGNvbnN0IHJhd1ZhbHVlID0gcmF3VmFsdWVzQXJyU2xpY2VbaV07XG5cbiAgICBpZiAocmF3VmFsdWUgIT09IG51bGwgJiYgcmF3VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhaXNOYU4ocmF3VmFsdWUpKSB7XG4gICAgICBhZ2dyZWdhdGVkVmFsdWVzW3N1YmxheWVySW5kZXhdICs9IHJhd1ZhbHVlO1xuICAgICAgaWYgKHN1YmxheWVySW5kZXggPT09IDApIG51bVZhbHVlcysrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfYWdncmVnYXRpb25PcGVyYXRpb24gPT09IEFnZ3JlZ2F0aW9uT3BlcmF0aW9uLkF2ZyAmJiBudW1WYWx1ZXMgPiAwKSB7XG4gICAgYWdncmVnYXRlZFZhbHVlcyA9IGFnZ3JlZ2F0ZWRWYWx1ZXMubWFwKHN1YmxheWVyVmFsdWUgPT4gc3VibGF5ZXJWYWx1ZSAvIG51bVZhbHVlcyk7XG4gIH1cblxuICBjb25zdCByZWFsVmFsdWVzID0gZ2V0UmVhbFZhbHVlcyhhZ2dyZWdhdGVkVmFsdWVzLCBfbXVsdGlwbGllcik7XG5cbiAgaWYgKF9zdWJsYXllckNvbWJpbmF0aW9uTW9kZSA9PT0gU3VibGF5ZXJDb21iaW5hdGlvbk1vZGUuVGltZUNvbXBhcmUpIHtcbiAgICByZXR1cm4gW3JlYWxWYWx1ZXNbMV0gLSByZWFsVmFsdWVzWzBdXTtcbiAgfVxuXG4gIHJldHVybiByZWFsVmFsdWVzO1xufTtcblxudmFyIERFU0NSSVBUT1JTID0gZGVzY3JpcHRvcnM7XG52YXIgdW5jdXJyeVRoaXMkMSA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG52YXIgY2FsbCA9IGZ1bmN0aW9uQ2FsbDtcbnZhciBmYWlscyA9IGZhaWxzJGk7XG52YXIgb2JqZWN0S2V5cyA9IG9iamVjdEtleXMkMjtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciB0b09iamVjdCA9IHRvT2JqZWN0JDM7XG52YXIgSW5kZXhlZE9iamVjdCA9IGluZGV4ZWRPYmplY3Q7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHNhZmVcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyQxKFtdLmNvbmNhdCk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxudmFyIG9iamVjdEFzc2lnbiA9ICEkYXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmICRhc3NpZ24oeyBiOiAxIH0sICRhc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQob2JqZWN0S2V5cyhTKSwgZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwocHJvcGVydHlJc0VudW1lcmFibGUsIFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxudmFyICQkMSA9IF9leHBvcnQ7XG52YXIgYXNzaWduID0gb2JqZWN0QXNzaWduO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kJDEoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcblxudmFyIGdsb2JhbCQxID0gZ2xvYmFsJHk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHRvSW50ZWdlck9ySW5maW5pdHkkNDtcbnZhciB0b1N0cmluZyQxID0gdG9TdHJpbmckNztcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDEgPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDc7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsJDEuUmFuZ2VFcnJvcjtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbnZhciBzdHJpbmdSZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IHRvU3RyaW5nJDEocmVxdWlyZU9iamVjdENvZXJjaWJsZSQxKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlck9ySW5maW5pdHkoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB1bmN1cnJ5VGhpcyA9IGZ1bmN0aW9uVW5jdXJyeVRoaXM7XG52YXIgdG9MZW5ndGggPSB0b0xlbmd0aCQzO1xudmFyIHRvU3RyaW5nID0gdG9TdHJpbmckNztcbnZhciAkcmVwZWF0ID0gc3RyaW5nUmVwZWF0O1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDc7XG5cbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19FTkQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gICAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogdG9TdHJpbmcoZmlsbFN0cmluZyk7XG4gICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcbiAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICAgIHN0cmluZ0ZpbGxlciA9IHJlcGVhdChmaWxsU3RyLCBjZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICAgIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nU2xpY2Uoc3RyaW5nRmlsbGVyLCAwLCBmaWxsTGVuKTtcbiAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG4gIH07XG59O1xuXG52YXIgc3RyaW5nUGFkID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIHVzZXJBZ2VudCA9IGVuZ2luZVVzZXJBZ2VudDtcblxudmFyIHN0cmluZ1BhZFdlYmtpdEJ1ZyA9IC9WZXJzaW9uXFwvMTAoPzpcXC5cXGQrKXsxLDJ9KD86IFtcXHcuL10rKT8oPzogTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG52YXIgJCA9IF9leHBvcnQ7XG52YXIgJHBhZFN0YXJ0ID0gc3RyaW5nUGFkLnN0YXJ0O1xudmFyIFdFQktJVF9CVUcgPSBzdHJpbmdQYWRXZWJraXRCdWc7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkU3RhcnQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5jb25zdCBnZXRDZWxsQ29vcmRzID0gKHRpbGVCQm94LCBjZWxsLCBudW1Db2xzKSA9PiB7XG4gIGNvbnN0IGNvbCA9IGNlbGwgJSBudW1Db2xzO1xuICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGNlbGwgLyBudW1Db2xzKTtcbiAgY29uc3QgW21pblgsIG1pblksIG1heFgsIG1heFldID0gdGlsZUJCb3g7XG4gIGNvbnN0IHdpZHRoID0gbWF4WCAtIG1pblg7XG4gIGNvbnN0IGhlaWdodCA9IG1heFkgLSBtaW5ZO1xuICByZXR1cm4ge1xuICAgIGNvbCxcbiAgICByb3csXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH07XG59O1xuXG5jb25zdCBnZXRQb2ludEZlYXR1cmUgPSAoe1xuICB0aWxlQkJveCxcbiAgY2VsbCxcbiAgbnVtQ29scyxcbiAgbnVtUm93cyxcbiAgYWRkTWV0YVxufSkgPT4ge1xuICBjb25zdCBbbWluWCwgbWluWV0gPSB0aWxlQkJveDtcbiAgY29uc3Qge1xuICAgIGNvbCxcbiAgICByb3csXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH0gPSBnZXRDZWxsQ29vcmRzKHRpbGVCQm94LCBjZWxsLCBudW1Db2xzKTtcbiAgY29uc3QgcG9pbnRNaW5YID0gbWluWCArIGNvbCAvIG51bUNvbHMgKiB3aWR0aDtcbiAgY29uc3QgcG9pbnRNaW5ZID0gbWluWSArIHJvdyAvIG51bVJvd3MgKiBoZWlnaHQ7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBhZGRNZXRhID8ge1xuICAgIF9jb2w6IGNvbCxcbiAgICBfcm93OiByb3dcbiAgfSA6IHt9O1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIGdlb21ldHJ5OiB7XG4gICAgICB0eXBlOiAnUG9pbnQnLFxuICAgICAgY29vcmRpbmF0ZXM6IFtwb2ludE1pblgsIHBvaW50TWluWV1cbiAgICB9XG4gIH07XG59O1xuXG5jb25zdCBnZXRSZWN0YW5nbGVGZWF0dXJlID0gKHtcbiAgdGlsZUJCb3gsXG4gIGNlbGwsXG4gIG51bUNvbHMsXG4gIG51bVJvd3MsXG4gIGFkZE1ldGFcbn0pID0+IHtcbiAgY29uc3QgW21pblgsIG1pblldID0gdGlsZUJCb3g7XG4gIGNvbnN0IHtcbiAgICBjb2wsXG4gICAgcm93LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9ID0gZ2V0Q2VsbENvb3Jkcyh0aWxlQkJveCwgY2VsbCwgbnVtQ29scyk7XG4gIGNvbnN0IHNxdWFyZU1pblggPSBtaW5YICsgY29sIC8gbnVtQ29scyAqIHdpZHRoO1xuICBjb25zdCBzcXVhcmVNaW5ZID0gbWluWSArIHJvdyAvIG51bVJvd3MgKiBoZWlnaHQ7XG4gIGNvbnN0IHNxdWFyZU1heFggPSBtaW5YICsgKGNvbCArIDEpIC8gbnVtQ29scyAqIHdpZHRoO1xuICBjb25zdCBzcXVhcmVNYXhZID0gbWluWSArIChyb3cgKyAxKSAvIG51bVJvd3MgKiBoZWlnaHQ7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBhZGRNZXRhID8ge1xuICAgIF9jb2w6IGNvbCxcbiAgICBfcm93OiByb3dcbiAgfSA6IHt9O1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIGdlb21ldHJ5OiB7XG4gICAgICB0eXBlOiAnUG9seWdvbicsXG4gICAgICBjb29yZGluYXRlczogW1tbc3F1YXJlTWluWCwgc3F1YXJlTWluWV0sIFtzcXVhcmVNYXhYLCBzcXVhcmVNaW5ZXSwgW3NxdWFyZU1heFgsIHNxdWFyZU1heFldLCBbc3F1YXJlTWluWCwgc3F1YXJlTWF4WV0sIFtzcXVhcmVNaW5YLCBzcXVhcmVNaW5ZXV1dXG4gICAgfVxuICB9O1xufTtcblxuY29uc3QgZ2V0RmVhdHVyZSA9IGZlYXR1cmVQYXJhbXMgPT4ge1xuICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZVBhcmFtcy5nZW9tVHlwZSA9PT0gR2VvbVR5cGUucG9pbnQgPyBnZXRQb2ludEZlYXR1cmUoZmVhdHVyZVBhcmFtcykgOiBnZXRSZWN0YW5nbGVGZWF0dXJlKGZlYXR1cmVQYXJhbXMpO1xuICBmZWF0dXJlLmlkID0gZmVhdHVyZVBhcmFtcy5pZDtcbiAgcmV0dXJuIGZlYXR1cmU7XG59O1xuXG5jb25zdCB3cml0ZVZhbHVlVG9GZWF0dXJlID0gKHF1YW50aXplZFRhaWwsIHZhbHVlVG9Xcml0ZSwgZmVhdHVyZSkgPT4ge1xuICBjb25zdCBwcm9wZXJ0aWVzS2V5ID0gcXVhbnRpemVkVGFpbC50b1N0cmluZygpO1xuXG4gIGlmICh2YWx1ZVRvV3JpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFNhdmluZyBOYU4gaW4gZmVhdHVyZSBwcm9wZXJ0eSB2YWx1ZSBjb21wbGljYXRlcyB0aGUgZXhwcmVzc2lvbnMgYSBsb3QsIHNhdmluZyBudWxsIGluc3RlYWRcbiAgICBmZWF0dXJlLnByb3BlcnRpZXNbcHJvcGVydGllc0tleV0gPSBpc05hTih2YWx1ZVRvV3JpdGUpID8gbnVsbCA6IHZhbHVlVG9Xcml0ZTtcbiAgfVxufTsgLy8gR2l2ZW4gYnJlYWtzIFtbMCwgMTAsIDIwLCAzMF0sIFstMTUsIC01LCAwLCA1LCAxNV1dOlxuLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHwgICB8ICAgfCAgIHxcbi8vICBpZiBmaXJzdCBkYXRhc2V0IHNlbGVjdGVkICAgICBbICAgMCwgMTAsIDIwLCAzMCAgXVxuLy8gICAgaW5kZXggcmV0dXJuZWQgaXM6ICAgICAgICAgICAgMCB8IDEgfCAyIHwgMyB8IDQgfFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgfCAgIHwgICB8ICAgfFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyBOb3RlOiBpZiB2YWx1ZSBpcyBFWEFDVExZIDAsIGZlYXR1cmUgaXMgZW50aXJlbHkgb21pdHRlZFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRcbi8vXG4vLyAgaWYgMm5kIGRhdGFzZXQgc2VsZWN0ZWQgICAgICAgWyAtMTUsIC01LCAgMCwgIDUsIDE1XVxuLy8gICAgaW5kZXggcmV0dXJuZWQgaXM6ICAgICAgICAgICAgMCB8IDEgfCAyIHwgMyB8IDQgfCA1XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICB8ICAgfCAgIHwgICB8XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gTm90ZTogaWYgdmFsdWUgaXMgRVhBQ1RMWSAwLCBmZWF0dXJlIGlzIGVudGlyZWx5IG9taXR0ZWRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWRcbi8vXG5cblxuY29uc3QgZ2V0QnVja2V0SW5kZXggPSAoYnJlYWtzLCB2YWx1ZSkgPT4ge1xuICBsZXQgY3VycmVudEJ1Y2tldEluZGV4O1xuICBpZiAoaXNOYU4odmFsdWUpKSByZXR1cm4gMDtcblxuICBmb3IgKGxldCBidWNrZXRJbmRleCA9IDA7IGJ1Y2tldEluZGV4IDwgYnJlYWtzLmxlbmd0aCArIDE7IGJ1Y2tldEluZGV4KyspIHtcbiAgICBjb25zdCBzdG9wVmFsdWUgPSBicmVha3NbYnVja2V0SW5kZXhdICE9PSB1bmRlZmluZWQgPyBicmVha3NbYnVja2V0SW5kZXhdIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gICAgaWYgKHZhbHVlIDw9IHN0b3BWYWx1ZSkge1xuICAgICAgY3VycmVudEJ1Y2tldEluZGV4ID0gYnVja2V0SW5kZXg7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoY3VycmVudEJ1Y2tldEluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICBjdXJyZW50QnVja2V0SW5kZXggPSBicmVha3MubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnRCdWNrZXRJbmRleDtcbn07XG5cbmNvbnN0IGdldFZhbHVlID0gKHJlYWxWYWx1ZXNTdW0sIGJyZWFrcykgPT4ge1xuICBpZiAocmVhbFZhbHVlc1N1bSA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIGJyZWFrcyA/IGdldEJ1Y2tldEluZGV4KGJyZWFrc1swXSwgcmVhbFZhbHVlc1N1bSkgOiByZWFsVmFsdWVzU3VtO1xufTtcblxuY29uc3QgZ2V0Q29tcGFyZVZhbHVlID0gKGRhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZSwgZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlSW5kZXgsIGJyZWFrcykgPT4ge1xuICBpZiAoZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIGlmIChicmVha3MpIHtcbiAgICAvLyBvZmZzZXQgZWFjaCBkYXRhc2V0IGJ5IDEwICsgYWRkIGFjdHVhbCBidWNrZXQgdmFsdWVcbiAgICByZXR1cm4gZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlSW5kZXggKiAxMCArIGdldEJ1Y2tldEluZGV4KGJyZWFrc1tkYXRhc2V0c0hpZ2hlc3RSZWFsVmFsdWVJbmRleF0sIGRhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gb25seSB1c2VmdWwgZm9yIGRlYnVnXG4gICAgcmV0dXJuIGAke2RhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZUluZGV4fTske2RhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZX1gO1xuICB9XG59O1xuXG5jb25zdCBnZXRCaXZhcmlhdGVWYWx1ZSA9IChyZWFsVmFsdWVzLCBicmVha3MpID0+IHtcbiAgaWYgKHJlYWxWYWx1ZXNbMF0gPT09IDAgJiYgcmVhbFZhbHVlc1sxXSA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICBpZiAoYnJlYWtzKSB7XG4gICAgLy8gIHk6IGRhdGFzZXRCXG4gICAgLy9cbiAgICAvLyAgIHwgICAgMCB8IDBcbiAgICAvLyAgIHwgICAtLSh1KS0tKy0tLSstLS0rLS0tK1xuICAgIC8vICAgfCAgICAwIHwgMSB8IDIgfCAzIHwgNCB8XG4gICAgLy8gICB8ICAgICAgKy0tLSstLS0rLS0tKy0tLStcbiAgICAvLyAgIHYgICAgICB8IDUgfCA2IHwgNyB8IDggfFxuICAgIC8vICAgICAgICAgICstLS0rLS0tKy0tLSstLS0rXG4gICAgLy8gICAgICAgICAgfCA5IHwgMTB8IDExfCAxMnxcbiAgICAvLyAgICAgICAgICArLS0tKy0tLSstLS0rLS0tK1xuICAgIC8vICAgICAgICAgIHwgMTN8IDE0fCAxNXwgMTZ8XG4gICAgLy8gICAgICAgICAgKy0tLSstLS0rLS0tKy0tLStcbiAgICAvLyAgICAgICAgICAtLS0tLS0tLS0tLS0tLT4geDogZGF0YXNldEFcbiAgICAvL1xuICAgIGNvbnN0IHZhbHVlQSA9IGdldEJ1Y2tldEluZGV4KGJyZWFrc1swXSwgcmVhbFZhbHVlc1swXSk7XG4gICAgY29uc3QgdmFsdWVCID0gZ2V0QnVja2V0SW5kZXgoYnJlYWtzWzFdLCByZWFsVmFsdWVzWzFdKTsgLy8gfHwgMTogV2UgbmV2ZXIgd2FudCBhIGJ1Y2tldCBvZiAwIC0gdmFsdWVzIGJlbG93IGZpcnN0IGJyZWFrIGFyZSBub3QgdXNlZCBpbiBiaXZhcmlhdGVcblxuICAgIGNvbnN0IGNvbEluZGV4ID0gKHZhbHVlQSB8fCAxKSAtIDE7XG4gICAgY29uc3Qgcm93SW5kZXggPSAodmFsdWVCIHx8IDEpIC0gMTtcbiAgICBjb25zdCBpbmRleCA9IHJvd0luZGV4ICogNCArIGNvbEluZGV4OyAvLyBvZmZzZXQgYnkgb25lIGJlY2F1c2UgdmFsdWVzIHN0YXJ0IGF0IDEgKDAgcmVzZXJ2ZWQgZm9yIHZhbHVlcyA8IG1pbiB2YWx1ZSlcblxuICAgIHJldHVybiBpbmRleCArIDE7XG4gIH0gZWxzZSB7XG4gICAgLy8gb25seSB1c2VmdWwgZm9yIGRlYnVnXG4gICAgcmV0dXJuIGAke3JlYWxWYWx1ZXNbMF19OyR7cmVhbFZhbHVlc1sxXX1gO1xuICB9XG59O1xuXG5jb25zdCBnZXRUaW1lQ29tcGFyZVZhbHVlID0gKHJlYWxWYWx1ZXMsIGJyZWFrcykgPT4ge1xuICBjb25zdCBkZWx0YSA9IHJlYWxWYWx1ZXNbMV0gLSByZWFsVmFsdWVzWzBdO1xuICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgaWYgKGJyZWFrcykge1xuICAgIHJldHVybiBnZXRCdWNrZXRJbmRleChicmVha3NbMF0sIGRlbHRhKTtcbiAgfVxuXG4gIHJldHVybiBkZWx0YTtcbn07XG5cbmNvbnN0IGdldEN1bXVsYXRpdmVWYWx1ZSA9IChyZWFsVmFsdWVzU3VtLCBjdW11bGF0aXZlVmFsdWVzUGFkZGVkU3RyaW5ncykgPT4ge1xuICBpZiAocmVhbFZhbHVlc1N1bSA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIGN1bXVsYXRpdmVWYWx1ZXNQYWRkZWRTdHJpbmdzLmpvaW4oJycpO1xufTtcblxuY29uc3QgZXJyID0gbXNnID0+IHtcbiAgY29uc29sZS5lcnJvcignNHctYWdnOjonLCBtc2cpO1xuICB0aHJvdyBuZXcgRXJyb3IoYDR3LWFnZzo6JHttc2d9YCk7XG59O1xuXG5mdW5jdGlvbiBhZ2dyZWdhdGUoaW50QXJyYXksIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHF1YW50aXplT2Zmc2V0ID0gMCxcbiAgICB0aWxlQkJveCxcbiAgICB4LFxuICAgIHksXG4gICAgZGVsdGEgPSAzMCxcbiAgICBnZW9tVHlwZSA9IEdlb21UeXBlLnJlY3RhbmdsZSxcbiAgICBzaW5nbGVGcmFtZSxcbiAgICBpbnRlcmFjdGl2ZSxcbiAgICBzdWJsYXllckJyZWFrcyxcbiAgICBzdWJsYXllckNvdW50LFxuICAgIHN1YmxheWVyQ29tYmluYXRpb25Nb2RlLFxuICAgIHN1YmxheWVyVmlzaWJpbGl0eSxcbiAgICBhZ2dyZWdhdGlvbk9wZXJhdGlvblxuICB9ID0gb3B0aW9ucztcblxuICBpZiAoc3VibGF5ZXJDb21iaW5hdGlvbk1vZGUgPT09IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLk5vbmUgJiYgc3VibGF5ZXJDb3VudCA+IDEpIHtcbiAgICBlcnIoJ011bHRpcGxlIHN1YmxheWVycyBidXQgbm8gcHJvcGVyIGNvbWJpbmF0aW9uIG1vZGUgc2V0Jyk7XG4gIH1cblxuICBpZiAoc3VibGF5ZXJCcmVha3MgJiYgc3VibGF5ZXJCcmVha3MubGVuZ3RoICE9PSBzdWJsYXllckNvdW50ICYmIChzdWJsYXllckNvbWJpbmF0aW9uTW9kZSA9PT0gU3VibGF5ZXJDb21iaW5hdGlvbk1vZGUuTWF4IHx8IHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5CaXZhcmlhdGUpKSB7XG4gICAgZXJyKCdtdXN0IHByb3ZpZGUgYXMgbWFueSBicmVha3MgYXJyYXlzIGFzIG51bWJlciBvZiBkYXRhc2V0cyB3aGVuIHVzaW5nIGNvbXBhcmUgYW5kIGJpdmFyaWF0ZSBtb2RlcycpO1xuICB9XG5cbiAgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5UaW1lQ29tcGFyZSkge1xuICAgIGlmIChzdWJsYXllckNvdW50ICE9PSAyKSBlcnIoJ2RlbHRhIGNvbWJpbmF0aW9uTW9kZSByZXF1aXJlcyBzdWJsYXllciBjb3VudCA9PT0gMicpO1xuXG4gICAgaWYgKHN1YmxheWVyQnJlYWtzKSB7XG4gICAgICBpZiAoc3VibGF5ZXJCcmVha3MubGVuZ3RoICE9PSAxKSBlcnIoJ2RlbHRhIGNvbWJpbmF0aW9uTW9kZSByZXF1aXJlcyBleGFjdGx5IG9uZSBicmVha3MgYXJyYXkgdG8gZ2VuZXJhdGUgYSBkaXZlcmdpbmcgc2NhbGUnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3VibGF5ZXJCcmVha3MgJiYgc3VibGF5ZXJCcmVha3MubGVuZ3RoICE9PSAxICYmIHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5BZGQpIHtcbiAgICBlcnIoJ2FkZCBjb21iaW5hdGlvbk1vZGUgcmVxdWlyZXMgb25lIGFuZCBvbmx5IG9uZSBicmVha3MgYXJyYXknKTtcbiAgfVxuXG4gIGlmIChzdWJsYXllckNvbWJpbmF0aW9uTW9kZSA9PT0gU3VibGF5ZXJDb21iaW5hdGlvbk1vZGUuQml2YXJpYXRlKSB7XG4gICAgaWYgKHN1YmxheWVyQ291bnQgIT09IDIpIGVycignYml2YXJpYXRlIGNvbWJpbmF0aW9uTW9kZSByZXF1aXJlcyBleGFjdGx5IHR3byBkYXRhc2V0cycpO1xuXG4gICAgaWYgKHN1YmxheWVyQnJlYWtzKSB7XG4gICAgICBpZiAoc3VibGF5ZXJCcmVha3MubGVuZ3RoICE9PSAyKSBlcnIoJ2JpdmFyaWF0ZSBjb21iaW5hdGlvbk1vZGUgcmVxdWlyZXMgZXhhY3RseSB0d28gYnJlYWtzIGFycmF5Jyk7XG4gICAgICBpZiAoc3VibGF5ZXJCcmVha3NbMF0ubGVuZ3RoICE9PSBzdWJsYXllckJyZWFrc1sxXS5sZW5ndGgpIGVycignYml2YXJpYXRlIGJyZWFrcyBhcnJheXMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aCcpOyAvLyBUT0RPIFRoaXMgbWlnaHQgY2hhbmdlIGlmIHdlIHdhbnQgYml2YXJpYXRlIHdpdGggbW9yZSBvciBsZXNzIHRoYW4gMTYgY2xhc3Nlc1xuXG4gICAgICBpZiAoc3VibGF5ZXJCcmVha3NbMF0ubGVuZ3RoICE9PSA0IHx8IHN1YmxheWVyQnJlYWtzWzFdLmxlbmd0aCAhPT0gNCkgZXJyKCdlYWNoIGJpdmFyaWF0ZSBicmVha3MgYXJyYXkgcmVxdWlyZSBleGFjdGx5IDQgdmFsdWVzJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmVhdHVyZXMgPSBbXTtcbiAgY29uc3QgZmVhdHVyZXNJbnRlcmFjdGl2ZSA9IFtdO1xuICBsZXQgYWdncmVnYXRpbmcgPSBBcnJheShzdWJsYXllckNvdW50KS5maWxsKFtdKTtcbiAgbGV0IGN1cnJlbnRBZ2dyZWdhdGVkVmFsdWVzID0gQXJyYXkoc3VibGF5ZXJDb3VudCkuZmlsbCgwKTtcbiAgbGV0IGN1cnJlbnRBZ2dyZWdhdGVkVmFsdWVzTGVuZ3RoID0gMDtcbiAgbGV0IGN1cnJlbnRGZWF0dXJlO1xuICBsZXQgY3VycmVudEZlYXR1cmVJbnRlcmFjdGl2ZTtcbiAgbGV0IGN1cnJlbnRGZWF0dXJlQ2VsbDtcbiAgbGV0IGN1cnJlbnRGZWF0dXJlTWluVGltZXN0YW1wO1xuICBsZXQgZmVhdHVyZUJ1ZmZlclZhbHVlc1BvcyA9IDA7XG4gIGxldCBoZWFkO1xuICBsZXQgdGFpbDtcbiAgbGV0IGRhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgbGV0IGRhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZUluZGV4O1xuICBsZXQgcmVhbFZhbHVlc1N1bSA9IDA7XG4gIGxldCBsaXRlcmFsVmFsdWVzU3RyID0gJ1snO1xuICBsZXQgY3VtdWxhdGl2ZVZhbHVlc1BhZGRlZFN0cmluZ3MgPSBbXTtcbiAgY29uc3QgbnVtUm93cyA9IGludEFycmF5W0ZFQVRVUkVfUk9XX0lOREVYXTtcbiAgY29uc3QgbnVtQ29scyA9IGludEFycmF5W0ZFQVRVUkVfQ09MX0lOREVYXTtcbiAgY29uc3QgZmVhdHVyZUludEFycmF5cyA9IFtdO1xuICBsZXQgc3RhcnRGcmFtZSA9IDA7XG4gIGxldCBlbmRGcmFtZSA9IDA7XG4gIGxldCBzdGFydEluZGV4ID0gMDtcbiAgbGV0IGVuZEluZGV4ID0gMDtcbiAgbGV0IGluZGV4SW5DZWxsID0gMDsgLy8gV2UgbmVlZCB0byBwYWQgd2l0aCBuIHZhbHVlcyAobiA9PT0gZGVsdGEpIHRvIGdlbmVyYXRlIFwib3ZlcmZsb3dcIiBmcmFtZXNcbiAgLy8gaW4gdGhlIGNhc2Ugb2YgYSBzdW0sIGFkZCB6ZXJvZXMgd2hpY2ggd2lsbCBnZXQgYWRkZWQgdG8gdGhlIHJ1bm5pbmcgc3VubSB3aXRoIG5vIGVmZmVjdFxuICAvLyBpbiB0aGUgY2FzZSBvZiBhdmcsIHVzIE5hTiBhcyBhIGZsYWcgdG8gbm90IHRha2UgdGhlIHZhbHVlIGludG8gYWNjb3VudFxuXG4gIGNvbnN0IHBhZFZhbHVlID0gYWdncmVnYXRpb25PcGVyYXRpb24gPT09IEFnZ3JlZ2F0aW9uT3BlcmF0aW9uLkF2ZyA/IE5hTiA6IDA7XG5cbiAgZm9yIChsZXQgaSA9IEZFQVRVUkVfQ0VMTFNfU1RBUlRfSU5ERVg7IGkgPCBpbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gaW50QXJyYXlbaV07XG5cbiAgICBpZiAoaW5kZXhJbkNlbGwgPT09IENFTExfTlVNX0lOREVYKSB7XG4gICAgICBzdGFydEluZGV4ID0gaTtcbiAgICB9IGVsc2UgaWYgKGluZGV4SW5DZWxsID09PSBDRUxMX1NUQVJUX0lOREVYKSB7XG4gICAgICBzdGFydEZyYW1lID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmIChpbmRleEluQ2VsbCA9PT0gQ0VMTF9FTkRfSU5ERVgpIHtcbiAgICAgIGVuZEZyYW1lID0gdmFsdWU7XG4gICAgICBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBDRUxMX1ZBTFVFU19TVEFSVF9JTkRFWCArIChlbmRGcmFtZSAtIHN0YXJ0RnJhbWUgKyAxKSAqIHN1YmxheWVyQ291bnQ7XG4gICAgfVxuXG4gICAgaW5kZXhJbkNlbGwrKztcblxuICAgIGlmIChpID09PSBlbmRJbmRleCAtIDEpIHtcbiAgICAgIGluZGV4SW5DZWxsID0gMDtcbiAgICAgIGNvbnN0IG9yaWdpbmFsID0gaW50QXJyYXkuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgY29uc3QgcGFkZGVkID0gbmV3IEFycmF5KGRlbHRhICogc3VibGF5ZXJDb3VudCkuZmlsbChwYWRWYWx1ZSk7IC8vIFRPRE8gQXJlIHdlIHN1cmUgd2Ugd2FudCB0byB1c2UgRkVBVFVSRV9DRUxMU19TVEFSVF9JTkRFWCwgbm90IENFTExfU1RBUlRfSU5ERVg/P1xuXG4gICAgICBvcmlnaW5hbFtGRUFUVVJFX0NFTExTX1NUQVJUX0lOREVYXSA9IGVuZEZyYW1lICsgZGVsdGE7XG4gICAgICBjb25zdCBtZXJnZWQgPSBvcmlnaW5hbC5jb25jYXQocGFkZGVkKTtcbiAgICAgIGZlYXR1cmVJbnRBcnJheXMucHVzaChtZXJnZWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzaW5nbGVGcmFtZSkge1xuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgaW50QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW50QXJyYXlbaV07XG5cbiAgICAgIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgICBjdXJyZW50RmVhdHVyZUNlbGwgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHVuaXF1ZUlkID0gZ2VuZXJhdGVVbmlxdWVJZCh4LCB5LCBjdXJyZW50RmVhdHVyZUNlbGwpO1xuICAgICAgICBjb25zdCBmZWF0dXJlUGFyYW1zID0ge1xuICAgICAgICAgIGdlb21UeXBlLFxuICAgICAgICAgIHRpbGVCQm94LFxuICAgICAgICAgIGNlbGw6IGN1cnJlbnRGZWF0dXJlQ2VsbCxcbiAgICAgICAgICBudW1Db2xzLFxuICAgICAgICAgIG51bVJvd3MsXG4gICAgICAgICAgaWQ6IHVuaXF1ZUlkXG4gICAgICAgIH07XG4gICAgICAgIGN1cnJlbnRGZWF0dXJlID0gZ2V0RmVhdHVyZShmZWF0dXJlUGFyYW1zKTtcbiAgICAgICAgY3VycmVudEZlYXR1cmUucHJvcGVydGllcy52YWx1ZSA9IHZhbHVlIC8gVkFMVUVfTVVMVElQTElFUjtcbiAgICAgICAgZmVhdHVyZXMucHVzaChjdXJyZW50RmVhdHVyZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGYgPSAwOyBmIDwgZmVhdHVyZUludEFycmF5cy5sZW5ndGg7IGYrKykge1xuICAgICAgY29uc3QgZmVhdHVyZUludEFycmF5ID0gZmVhdHVyZUludEFycmF5c1tmXTtcbiAgICAgIGN1cnJlbnRGZWF0dXJlQ2VsbCA9IGZlYXR1cmVJbnRBcnJheVtDRUxMX05VTV9JTkRFWF07XG4gICAgICBjdXJyZW50RmVhdHVyZU1pblRpbWVzdGFtcCA9IGZlYXR1cmVJbnRBcnJheVtDRUxMX1NUQVJUX0lOREVYXTtcbiAgICAgIGhlYWQgPSBjdXJyZW50RmVhdHVyZU1pblRpbWVzdGFtcDtcbiAgICAgIGNvbnN0IHVuaXF1ZUlkID0gZ2VuZXJhdGVVbmlxdWVJZCh4LCB5LCBjdXJyZW50RmVhdHVyZUNlbGwpO1xuICAgICAgY29uc3QgZmVhdHVyZVBhcmFtcyA9IHtcbiAgICAgICAgZ2VvbVR5cGUsXG4gICAgICAgIHRpbGVCQm94LFxuICAgICAgICBjZWxsOiBjdXJyZW50RmVhdHVyZUNlbGwsXG4gICAgICAgIG51bUNvbHMsXG4gICAgICAgIG51bVJvd3MsXG4gICAgICAgIGlkOiB1bmlxdWVJZCxcbiAgICAgICAgYWRkTWV0YTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIGN1cnJlbnRGZWF0dXJlID0gZ2V0RmVhdHVyZShmZWF0dXJlUGFyYW1zKTtcblxuICAgICAgaWYgKGludGVyYWN0aXZlKSB7XG4gICAgICAgIGN1cnJlbnRGZWF0dXJlSW50ZXJhY3RpdmUgPSBnZXRGZWF0dXJlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZmVhdHVyZVBhcmFtcyksIHtcbiAgICAgICAgICBhZGRNZXRhOiB0cnVlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IENFTExfVkFMVUVTX1NUQVJUX0lOREVYOyBpIDwgZmVhdHVyZUludEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZmVhdHVyZUludEFycmF5W2ldOyAvLyB3aGVuIHdlIGFyZSBsb29raW5nIGF0IHRzIDAgYW5kIGRlbHRhIGlzIDEwLCB3ZSBhcmUgaW4gZmFjdCBsb29raW5nIGF0IHRoZSBhZ2dyZWdhdGlvbiBvZiBkYXkgLTlcblxuICAgICAgICB0YWlsID0gaGVhZCAtIGRlbHRhICsgMTsgLy8gZ2V0cyBpbmRleCBvZiBkYXRhc2V0LCBrbm93aW5nIHRoYXQgYWZ0ZXIgaGVhZGVycyB2YWx1ZXMgZ29cbiAgICAgICAgLy8gZGF0YXNldDEsIGRhdGFzZXQyLCBkYXRhc2V0MSwgZGF0YXNldDIsIC4uLlxuXG4gICAgICAgIGNvbnN0IGRhdGFzZXRJbmRleCA9IGZlYXR1cmVCdWZmZXJWYWx1ZXNQb3MgJSBzdWJsYXllckNvdW50OyAvLyBjb2xsZWN0IHZhbHVlIGZvciB0aGlzIGRhdGFzZXRcblxuICAgICAgICBhZ2dyZWdhdGluZ1tkYXRhc2V0SW5kZXhdLnB1c2godmFsdWUpO1xuICAgICAgICBsZXQgdGFpbFZhbHVlID0gMDtcblxuICAgICAgICBpZiAodGFpbCA+IGN1cnJlbnRGZWF0dXJlTWluVGltZXN0YW1wKSB7XG4gICAgICAgICAgdGFpbFZhbHVlID0gYWdncmVnYXRpbmdbZGF0YXNldEluZGV4XS5zaGlmdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRBZ2dyZWdhdGVkVmFsdWVzTGVuZ3RoKys7XG4gICAgICAgIH0gLy8gY29sbGVjdCBcIndvcmtpbmdcIiB2YWx1ZSwgaWUgdmFsdWUgYXQgaGVhZCBieSBzdWJzdHJhY3RpbmcgdGFpbCB2YWx1ZVxuXG5cbiAgICAgICAgbGV0IHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0ID0gMDtcbiAgICAgICAgbGV0IHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0V29ya2luZ1ZhbHVlID0gMDtcblxuICAgICAgICBpZiAoc3VibGF5ZXJWaXNpYmlsaXR5W2RhdGFzZXRJbmRleF0pIHtcbiAgICAgICAgICBpZiAoYWdncmVnYXRpb25PcGVyYXRpb24gPT09IEFnZ3JlZ2F0aW9uT3BlcmF0aW9uLkF2Zykge1xuICAgICAgICAgICAgLy8gaWYgaXNOYU4sIHZhbHVlIGlzIGp1c3QgZm9yIHBhZGRpbmcgLSBzdG9wIGluY3JlbWVudGluZyBydW5uaW5nIHN1bSAoanVzdCByZW1vdmUgdGFpbClcbiAgICAgICAgICAgIC8vIGFuZCB0YWtlIGludG8gYWNjb3VudCBvbmUgbGVzcyBmcmFtZSB0byBjb21wdXRlIHRlaCBhdmdcbiAgICAgICAgICAgIHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0V29ya2luZ1ZhbHVlID0gaXNOYU4odmFsdWUpID8gY3VycmVudEFnZ3JlZ2F0ZWRWYWx1ZXNbZGF0YXNldEluZGV4XSAtIHRhaWxWYWx1ZSA6IGN1cnJlbnRBZ2dyZWdhdGVkVmFsdWVzW2RhdGFzZXRJbmRleF0gKyB2YWx1ZSAtIHRhaWxWYWx1ZTtcbiAgICAgICAgICAgIGlmIChpc05hTih2YWx1ZSkpIGN1cnJlbnRBZ2dyZWdhdGVkVmFsdWVzTGVuZ3RoLS07XG4gICAgICAgICAgICByZWFsVmFsdWVBdEZyYW1lRm9yRGF0YXNldCA9IHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0V29ya2luZ1ZhbHVlIC8gY3VycmVudEFnZ3JlZ2F0ZWRWYWx1ZXNMZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0ID0gcmVhbFZhbHVlQXRGcmFtZUZvckRhdGFzZXRXb3JraW5nVmFsdWUgPSBjdXJyZW50QWdncmVnYXRlZFZhbHVlc1tkYXRhc2V0SW5kZXhdICsgdmFsdWUgLSB0YWlsVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEFnZ3JlZ2F0ZWRWYWx1ZXNbZGF0YXNldEluZGV4XSA9IHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0V29ya2luZ1ZhbHVlOyAvLyBDb21wdXRlIG1vZGUtc3BlY2lmaWMgdmFsdWVzXG5cbiAgICAgICAgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5NYXgpIHtcbiAgICAgICAgICBpZiAocmVhbFZhbHVlQXRGcmFtZUZvckRhdGFzZXQgPiBkYXRhc2V0c0hpZ2hlc3RSZWFsVmFsdWUpIHtcbiAgICAgICAgICAgIGRhdGFzZXRzSGlnaGVzdFJlYWxWYWx1ZSA9IHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0O1xuICAgICAgICAgICAgZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlSW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5BZGQgfHwgc3VibGF5ZXJDb21iaW5hdGlvbk1vZGUgPT09IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLkN1bXVsYXRpdmUpIHtcbiAgICAgICAgICByZWFsVmFsdWVzU3VtICs9IHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5DdW11bGF0aXZlKSB7XG4gICAgICAgICAgY29uc3QgY3VtdWxhdGl2ZVZhbHVlUGFkZGVkU3RyaW5nID0gTWF0aC5yb3VuZChyZWFsVmFsdWVzU3VtKS50b1N0cmluZygpLnBhZFN0YXJ0KDYsICcwJyk7XG4gICAgICAgICAgY3VtdWxhdGl2ZVZhbHVlc1BhZGRlZFN0cmluZ3MucHVzaChjdW11bGF0aXZlVmFsdWVQYWRkZWRTdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5MaXRlcmFsKSB7XG4gICAgICAgICAgLy8gbGl0ZXJhbFZhbHVlc1N0ciArPSBNYXRoLmZsb29yKHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0ICogMTAwKSAvIDEwMFxuICAgICAgICAgIC8vIEp1c3Qgcm91bmRpbmcgaXMgZmFzdGVyIC0gcmV2aXNlIGlmIGRlY2ltYWxzIGFyZSBuZWVkZWRcbiAgICAgICAgICAvLyBVc2UgY2VpbCB0byBhdm9pZCB2YWx1ZXMgYmVpbmcgJ211dGUnIHdoZW4gdmVyeSBjbG9zZSB0byB6ZXJvXG4gICAgICAgICAgLy8gVXBkYXRlOiB1c2UgLnJvdW5kIHRvIGF2b2lkIGRpc2NyZXBhbmNpZXMgYmV0d2VuIGludGVyYWN0aW9uIGFuZCB0b3RhbCBhbW1vdW50XG4gICAgICAgICAgbGl0ZXJhbFZhbHVlc1N0ciArPSBNYXRoLnJvdW5kKHJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0KTtcblxuICAgICAgICAgIGlmIChkYXRhc2V0SW5kZXggPCBzdWJsYXllckNvdW50IC0gMSkge1xuICAgICAgICAgICAgbGl0ZXJhbFZhbHVlc1N0ciArPSAnLCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcXVhbnRpemVkVGFpbCA9IHRhaWwgLSBxdWFudGl6ZU9mZnNldDtcblxuICAgICAgICBpZiAocXVhbnRpemVkVGFpbCA+PSAwICYmIGRhdGFzZXRJbmRleCA9PT0gc3VibGF5ZXJDb3VudCAtIDEpIHtcbiAgICAgICAgICBsZXQgZmluYWxWYWx1ZTtcblxuICAgICAgICAgIGlmIChzdWJsYXllckNvbWJpbmF0aW9uTW9kZSA9PT0gU3VibGF5ZXJDb21iaW5hdGlvbk1vZGUuTGl0ZXJhbCkge1xuICAgICAgICAgICAgbGl0ZXJhbFZhbHVlc1N0ciArPSAnXSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5Ob25lKSB7XG4gICAgICAgICAgICBmaW5hbFZhbHVlID0gZ2V0VmFsdWUocmVhbFZhbHVlQXRGcmFtZUZvckRhdGFzZXQsIHN1YmxheWVyQnJlYWtzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5NYXgpIHtcbiAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBnZXRDb21wYXJlVmFsdWUoZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlLCBkYXRhc2V0c0hpZ2hlc3RSZWFsVmFsdWVJbmRleCwgc3VibGF5ZXJCcmVha3MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3VibGF5ZXJDb21iaW5hdGlvbk1vZGUgPT09IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLkFkZCkge1xuICAgICAgICAgICAgZmluYWxWYWx1ZSA9IGdldFZhbHVlKHJlYWxWYWx1ZXNTdW0sIHN1YmxheWVyQnJlYWtzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN1YmxheWVyQ29tYmluYXRpb25Nb2RlID09PSBTdWJsYXllckNvbWJpbmF0aW9uTW9kZS5CaXZhcmlhdGUpIHtcbiAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBnZXRCaXZhcmlhdGVWYWx1ZShjdXJyZW50QWdncmVnYXRlZFZhbHVlcywgc3VibGF5ZXJCcmVha3MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3VibGF5ZXJDb21iaW5hdGlvbk1vZGUgPT09IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLlRpbWVDb21wYXJlKSB7XG4gICAgICAgICAgICBmaW5hbFZhbHVlID0gZ2V0VGltZUNvbXBhcmVWYWx1ZShjdXJyZW50QWdncmVnYXRlZFZhbHVlcywgc3VibGF5ZXJCcmVha3MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3VibGF5ZXJDb21iaW5hdGlvbk1vZGUgPT09IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLkxpdGVyYWwpIHtcbiAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBsaXRlcmFsVmFsdWVzU3RyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3VibGF5ZXJDb21iaW5hdGlvbk1vZGUgPT09IFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLkN1bXVsYXRpdmUpIHtcbiAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBnZXRDdW11bGF0aXZlVmFsdWUocmVhbFZhbHVlc1N1bSwgY3VtdWxhdGl2ZVZhbHVlc1BhZGRlZFN0cmluZ3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdyaXRlVmFsdWVUb0ZlYXR1cmUocXVhbnRpemVkVGFpbCwgZmluYWxWYWx1ZSwgY3VycmVudEZlYXR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gc3VibGF5ZXJDb3VudCAtIDEpIHtcbiAgICAgICAgICAvLyBXaGVuIGFsbCBkYXRhc2V0IHZhbHVlcyBoYXZlIGJlZW4gY29sbGVjdGVkIGZvciB0aGlzIGZyYW1lLCB3ZSBjYW4gbW92ZSB0byBuZXh0IGZyYW1lXG4gICAgICAgICAgaGVhZCsrOyAvLyBSZXNldCBtb2RlLXNwZWNpZmljIHZhbHVlcyB3aGVuIGxhc3QgZGF0YXNldFxuXG4gICAgICAgICAgZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICAgIHJlYWxWYWx1ZXNTdW0gPSAwO1xuICAgICAgICAgIGN1bXVsYXRpdmVWYWx1ZXNQYWRkZWRTdHJpbmdzID0gW107XG4gICAgICAgICAgbGl0ZXJhbFZhbHVlc1N0ciA9ICdbJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZlYXR1cmVCdWZmZXJWYWx1ZXNQb3MrKztcbiAgICAgIH1cblxuICAgICAgZmVhdHVyZXMucHVzaChjdXJyZW50RmVhdHVyZSk7XG5cbiAgICAgIGlmIChpbnRlcmFjdGl2ZSkge1xuICAgICAgICBjdXJyZW50RmVhdHVyZUludGVyYWN0aXZlLnByb3BlcnRpZXMucmF3VmFsdWVzID0gZmVhdHVyZUludEFycmF5O1xuICAgICAgICBmZWF0dXJlc0ludGVyYWN0aXZlLnB1c2goY3VycmVudEZlYXR1cmVJbnRlcmFjdGl2ZSk7XG4gICAgICB9XG5cbiAgICAgIGZlYXR1cmVCdWZmZXJWYWx1ZXNQb3MgPSAwO1xuICAgICAgZGF0YXNldHNIaWdoZXN0UmVhbFZhbHVlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgcmVhbFZhbHVlc1N1bSA9IDA7XG4gICAgICBjdW11bGF0aXZlVmFsdWVzUGFkZGVkU3RyaW5ncyA9IFtdO1xuICAgICAgYWdncmVnYXRpbmcgPSBBcnJheShzdWJsYXllckNvdW50KS5maWxsKFtdKTtcbiAgICAgIGN1cnJlbnRBZ2dyZWdhdGVkVmFsdWVzID0gQXJyYXkoc3VibGF5ZXJDb3VudCkuZmlsbCgwKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGdlb0pTT05zID0ge1xuICAgIG1haW46IHtcbiAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICBmZWF0dXJlc1xuICAgIH1cbiAgfTtcblxuICBpZiAoaW50ZXJhY3RpdmUpIHtcbiAgICBnZW9KU09Ocy5pbnRlcmFjdGl2ZSA9IHtcbiAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICBmZWF0dXJlczogZmVhdHVyZXNJbnRlcmFjdGl2ZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2VvSlNPTnM7XG59XG5cbmNvbnN0IGdldFRpbWVTZXJpZXMgPSAoZmVhdHVyZXMsIG51bVN1YmxheWVycywgcXVhbnRpemVPZmZzZXQgPSAwLCBhZ2dyZWdhdGlvbk9wZXJhdGlvbiA9IEFnZ3JlZ2F0aW9uT3BlcmF0aW9uLlN1bSkgPT4ge1xuICBsZXQgbWluRnJhbWUgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIGxldCBtYXhGcmFtZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblxuICBpZiAoIWZlYXR1cmVzIHx8ICFmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWVzOiBbXSxcbiAgICAgIG1pbkZyYW1lLFxuICAgICAgbWF4RnJhbWVcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgdmFsdWVzQnlGcmFtZSA9IFtdO1xuICBmZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT4ge1xuICAgIGNvbnN0IHJhd1ZhbHVlcyA9IGZlYXR1cmUucHJvcGVydGllcy5yYXdWYWx1ZXM7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWVzLFxuICAgICAgbWluQ2VsbE9mZnNldFxuICAgIH0gPSBnZXRDZWxsVmFsdWVzKHJhd1ZhbHVlcyk7XG4gICAgaWYgKG1pbkNlbGxPZmZzZXQgPCBtaW5GcmFtZSkgbWluRnJhbWUgPSBtaW5DZWxsT2Zmc2V0O1xuICAgIGxldCBjdXJyZW50RnJhbWVJbmRleCA9IG1pbkNlbGxPZmZzZXQ7XG4gICAgbGV0IG9mZnNldGVkQ3VycmVudEZyYW1lSW5kZXggPSBtaW5DZWxsT2Zmc2V0IC0gcXVhbnRpemVPZmZzZXQ7XG5cbiAgICBmb3IgKGxldCBpID0gQ0VMTF9WQUxVRVNfU1RBUlRfSU5ERVg7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN1YmxheWVySW5kZXggPSAoaSAtIENFTExfVkFMVUVTX1NUQVJUX0lOREVYKSAlIG51bVN1YmxheWVycztcbiAgICAgIGNvbnN0IHJhd1ZhbHVlID0gdmFsdWVzW2ldO1xuXG4gICAgICBpZiAocmF3VmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHJhd1ZhbHVlKSkge1xuICAgICAgICBpZiAoY3VycmVudEZyYW1lSW5kZXggPiBtYXhGcmFtZSkgbWF4RnJhbWUgPSBjdXJyZW50RnJhbWVJbmRleDtcblxuICAgICAgICBpZiAoIXZhbHVlc0J5RnJhbWVbb2Zmc2V0ZWRDdXJyZW50RnJhbWVJbmRleF0pIHtcbiAgICAgICAgICB2YWx1ZXNCeUZyYW1lW29mZnNldGVkQ3VycmVudEZyYW1lSW5kZXhdID0ge1xuICAgICAgICAgICAgc3VibGF5ZXJzVmFsdWVzOiBuZXcgQXJyYXkobnVtU3VibGF5ZXJzKS5maWxsKDApLFxuICAgICAgICAgICAgbnVtVmFsdWVzOiAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlc0J5RnJhbWVbb2Zmc2V0ZWRDdXJyZW50RnJhbWVJbmRleF0uc3VibGF5ZXJzVmFsdWVzW3N1YmxheWVySW5kZXhdICs9IHJhd1ZhbHVlO1xuXG4gICAgICAgIGlmIChzdWJsYXllckluZGV4ID09PSBudW1TdWJsYXllcnMgLSAxKSB7XG4gICAgICAgICAgLy8gYXNzdW1pbmcgdGhhdCBpZiBsYXN0IHN1YmxheWVyIHZhbHVlICFpc05hTiwgb3RoZXIgc3VibGF5ZXIgdmFsdWVzIHRvb1xuICAgICAgICAgIHZhbHVlc0J5RnJhbWVbb2Zmc2V0ZWRDdXJyZW50RnJhbWVJbmRleF0ubnVtVmFsdWVzKys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1YmxheWVySW5kZXggPT09IG51bVN1YmxheWVycyAtIDEpIHtcbiAgICAgICAgb2Zmc2V0ZWRDdXJyZW50RnJhbWVJbmRleCsrO1xuICAgICAgICBjdXJyZW50RnJhbWVJbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IG51bVZhbHVlcyA9IG1heEZyYW1lIC0gbWluRnJhbWU7XG4gIGNvbnN0IGZpbmFsVmFsdWVzID0gbmV3IEFycmF5KG51bVZhbHVlcyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbnVtVmFsdWVzOyBpKyspIHtcbiAgICBjb25zdCBmcmFtZSA9IG1pbkZyYW1lICsgaTtcbiAgICBjb25zdCBmcmFtZVZhbHVlcyA9IHZhbHVlc0J5RnJhbWVbZnJhbWUgLSBxdWFudGl6ZU9mZnNldF07XG4gICAgbGV0IHN1YmxheWVyc1ZhbHVlcztcblxuICAgIGlmIChmcmFtZVZhbHVlcykge1xuICAgICAgc3VibGF5ZXJzVmFsdWVzID0gZnJhbWVWYWx1ZXMuc3VibGF5ZXJzVmFsdWVzO1xuXG4gICAgICBpZiAoYWdncmVnYXRpb25PcGVyYXRpb24gPT09IEFnZ3JlZ2F0aW9uT3BlcmF0aW9uLkF2Zykge1xuICAgICAgICBzdWJsYXllcnNWYWx1ZXMgPSBzdWJsYXllcnNWYWx1ZXMubWFwKHN1YmxheWVyVmFsdWUgPT4gc3VibGF5ZXJWYWx1ZSAvIGZyYW1lVmFsdWVzLm51bVZhbHVlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxWYWx1ZXNbaV0gPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGZyYW1lXG4gICAgfSwgc3VibGF5ZXJzVmFsdWVzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWVzOiBmaW5hbFZhbHVlcyxcbiAgICBtaW5GcmFtZSxcbiAgICBtYXhGcmFtZVxuICB9O1xufTtcblxuZXhwb3J0IHsgQWdncmVnYXRpb25PcGVyYXRpb24sIENFTExfRU5EX0lOREVYLCBDRUxMX05VTV9JTkRFWCwgQ0VMTF9TVEFSVF9JTkRFWCwgQ0VMTF9WQUxVRVNfU1RBUlRfSU5ERVgsIEZFQVRVUkVfQ0VMTFNfU1RBUlRfSU5ERVgsIEZFQVRVUkVfQ09MX0lOREVYLCBGRUFUVVJFX1JPV19JTkRFWCwgR2VvbVR5cGUsIFN1YmxheWVyQ29tYmluYXRpb25Nb2RlLCBWQUxVRV9NVUxUSVBMSUVSLCBhZ2dyZWdhdGUsIGFnZ3JlZ2F0ZUNlbGwsIGdlbmVyYXRlVW5pcXVlSWQsIGdldENlbGxBcnJheUluZGV4LCBnZXRDZWxsVmFsdWVzLCBnZXRSZWFsVmFsdWUsIGdldFJlYWxWYWx1ZXMsIGdldFRpbWVTZXJpZXMgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGQyciA9IE1hdGguUEkgLyAxODAsXG4gICAgcjJkID0gMTgwIC8gTWF0aC5QSTtcblxuLyoqXG4gKiBHZXQgdGhlIGJib3ggb2YgYSB0aWxlXG4gKlxuICogQG5hbWUgdGlsZVRvQkJPWFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aWxlXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gYmJveFxuICogQGV4YW1wbGVcbiAqIHZhciBiYm94ID0gdGlsZVRvQkJPWChbNSwgMTAsIDEwXSlcbiAqIC8vPWJib3hcbiAqL1xuZnVuY3Rpb24gdGlsZVRvQkJPWCh0aWxlKSB7XG4gICAgdmFyIGUgPSB0aWxlMmxvbih0aWxlWzBdICsgMSwgdGlsZVsyXSk7XG4gICAgdmFyIHcgPSB0aWxlMmxvbih0aWxlWzBdLCB0aWxlWzJdKTtcbiAgICB2YXIgcyA9IHRpbGUybGF0KHRpbGVbMV0gKyAxLCB0aWxlWzJdKTtcbiAgICB2YXIgbiA9IHRpbGUybGF0KHRpbGVbMV0sIHRpbGVbMl0pO1xuICAgIHJldHVybiBbdywgcywgZSwgbl07XG59XG5cbi8qKlxuICogR2V0IGEgZ2VvanNvbiByZXByZXNlbnRhdGlvbiBvZiBhIHRpbGVcbiAqXG4gKiBAbmFtZSB0aWxlVG9HZW9KU09OXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbGVcbiAqIEByZXR1cm5zIHtGZWF0dXJlPFBvbHlnb24+fVxuICogQGV4YW1wbGVcbiAqIHZhciBwb2x5ID0gdGlsZVRvR2VvSlNPTihbNSwgMTAsIDEwXSlcbiAqIC8vPXBvbHlcbiAqL1xuZnVuY3Rpb24gdGlsZVRvR2VvSlNPTih0aWxlKSB7XG4gICAgdmFyIGJib3ggPSB0aWxlVG9CQk9YKHRpbGUpO1xuICAgIHZhciBwb2x5ID0ge1xuICAgICAgICB0eXBlOiAnUG9seWdvbicsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbW1xuICAgICAgICAgICAgW2Jib3hbMF0sIGJib3hbM11dLFxuICAgICAgICAgICAgW2Jib3hbMF0sIGJib3hbMV1dLFxuICAgICAgICAgICAgW2Jib3hbMl0sIGJib3hbMV1dLFxuICAgICAgICAgICAgW2Jib3hbMl0sIGJib3hbM11dLFxuICAgICAgICAgICAgW2Jib3hbMF0sIGJib3hbM11dXG4gICAgICAgIF1dXG4gICAgfTtcbiAgICByZXR1cm4gcG9seTtcbn1cblxuZnVuY3Rpb24gdGlsZTJsb24oeCwgeikge1xuICAgIHJldHVybiB4IC8gTWF0aC5wb3coMiwgeikgKiAzNjAgLSAxODA7XG59XG5cbmZ1bmN0aW9uIHRpbGUybGF0KHksIHopIHtcbiAgICB2YXIgbiA9IE1hdGguUEkgLSAyICogTWF0aC5QSSAqIHkgLyBNYXRoLnBvdygyLCB6KTtcbiAgICByZXR1cm4gcjJkICogTWF0aC5hdGFuKDAuNSAqIChNYXRoLmV4cChuKSAtIE1hdGguZXhwKC1uKSkpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdGlsZSBmb3IgYSBwb2ludCBhdCBhIHNwZWNpZmllZCB6b29tIGxldmVsXG4gKlxuICogQG5hbWUgcG9pbnRUb1RpbGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBsYXRcbiAqIEBwYXJhbSB7bnVtYmVyfSB6XG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gdGlsZVxuICogQGV4YW1wbGVcbiAqIHZhciB0aWxlID0gcG9pbnRUb1RpbGUoMSwgMSwgMjApXG4gKiAvLz10aWxlXG4gKi9cbmZ1bmN0aW9uIHBvaW50VG9UaWxlKGxvbiwgbGF0LCB6KSB7XG4gICAgdmFyIHRpbGUgPSBwb2ludFRvVGlsZUZyYWN0aW9uKGxvbiwgbGF0LCB6KTtcbiAgICB0aWxlWzBdID0gTWF0aC5mbG9vcih0aWxlWzBdKTtcbiAgICB0aWxlWzFdID0gTWF0aC5mbG9vcih0aWxlWzFdKTtcbiAgICByZXR1cm4gdGlsZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIDQgdGlsZXMgb25lIHpvb20gbGV2ZWwgaGlnaGVyXG4gKlxuICogQG5hbWUgZ2V0Q2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdGlsZVxuICogQHJldHVybnMge0FycmF5PEFycmF5PG51bWJlcj4+fSB0aWxlc1xuICogQGV4YW1wbGVcbiAqIHZhciB0aWxlcyA9IGdldENoaWxkcmVuKFs1LCAxMCwgMTBdKVxuICogLy89dGlsZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4odGlsZSkge1xuICAgIHJldHVybiBbXG4gICAgICAgIFt0aWxlWzBdICogMiwgdGlsZVsxXSAqIDIsIHRpbGVbMl0gKyAxXSxcbiAgICAgICAgW3RpbGVbMF0gKiAyICsgMSwgdGlsZVsxXSAqIDIsIHRpbGVbMiBdICsgMV0sXG4gICAgICAgIFt0aWxlWzBdICogMiArIDEsIHRpbGVbMV0gKiAyICsgMSwgdGlsZVsyXSArIDFdLFxuICAgICAgICBbdGlsZVswXSAqIDIsIHRpbGVbMV0gKiAyICsgMSwgdGlsZVsyXSArIDFdXG4gICAgXTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHRpbGUgb25lIHpvb20gbGV2ZWwgbG93ZXJcbiAqXG4gKiBAbmFtZSBnZXRQYXJlbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdGlsZVxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IHRpbGVcbiAqIEBleGFtcGxlXG4gKiB2YXIgdGlsZSA9IGdldFBhcmVudChbNSwgMTAsIDEwXSlcbiAqIC8vPXRpbGVcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50KHRpbGUpIHtcbiAgICByZXR1cm4gW3RpbGVbMF0gPj4gMSwgdGlsZVsxXSA+PiAxLCB0aWxlWzJdIC0gMV07XG59XG5cbmZ1bmN0aW9uIGdldFNpYmxpbmdzKHRpbGUpIHtcbiAgICByZXR1cm4gZ2V0Q2hpbGRyZW4oZ2V0UGFyZW50KHRpbGUpKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIDMgc2libGluZyB0aWxlcyBmb3IgYSB0aWxlXG4gKlxuICogQG5hbWUgZ2V0U2libGluZ3NcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdGlsZVxuICogQHJldHVybnMge0FycmF5PEFycmF5PG51bWJlcj4+fSB0aWxlc1xuICogQGV4YW1wbGVcbiAqIHZhciB0aWxlcyA9IGdldFNpYmxpbmdzKFs1LCAxMCwgMTBdKVxuICogLy89dGlsZXNcbiAqL1xuZnVuY3Rpb24gaGFzU2libGluZ3ModGlsZSwgdGlsZXMpIHtcbiAgICB2YXIgc2libGluZ3MgPSBnZXRTaWJsaW5ncyh0aWxlKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaGFzVGlsZSh0aWxlcywgc2libGluZ3NbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBhbiBhcnJheSBvZiB0aWxlcyBjb250YWlucyBhIHBhcnRpY3VsYXIgdGlsZVxuICpcbiAqIEBuYW1lIGhhc1RpbGVcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHRpbGVzXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQGV4YW1wbGVcbiAqIHZhciB0aWxlcyA9IFtcbiAqICAgICBbMCwgMCwgNV0sXG4gKiAgICAgWzAsIDEsIDVdLFxuICogICAgIFsxLCAxLCA1XSxcbiAqICAgICBbMSwgMCwgNV1cbiAqIF1cbiAqIGhhc1RpbGUodGlsZXMsIFswLCAwLCA1XSlcbiAqIC8vPWJvb2xlYW5cbiAqL1xuZnVuY3Rpb24gaGFzVGlsZSh0aWxlcywgdGlsZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRpbGVzRXF1YWwodGlsZXNbaV0sIHRpbGUpKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiB0d28gdGlsZXMgYXJlIHRoZSBzYW1lXG4gKlxuICogQG5hbWUgdGlsZXNFcXVhbFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aWxlMVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aWxlMlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAZXhhbXBsZVxuICogdGlsZXNFcXVhbChbMCwgMSwgNV0sIFswLCAwLCA1XSlcbiAqIC8vPWJvb2xlYW5cbiAqL1xuZnVuY3Rpb24gdGlsZXNFcXVhbCh0aWxlMSwgdGlsZTIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICB0aWxlMVswXSA9PT0gdGlsZTJbMF0gJiZcbiAgICAgICAgdGlsZTFbMV0gPT09IHRpbGUyWzFdICYmXG4gICAgICAgIHRpbGUxWzJdID09PSB0aWxlMlsyXVxuICAgICk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBxdWFka2V5IGZvciBhIHRpbGVcbiAqXG4gKiBAbmFtZSB0aWxlVG9RdWFka2V5XG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHF1YWRrZXlcbiAqIEBleGFtcGxlXG4gKiB2YXIgcXVhZGtleSA9IHRpbGVUb1F1YWRrZXkoWzAsIDEsIDVdKVxuICogLy89cXVhZGtleVxuICovXG5mdW5jdGlvbiB0aWxlVG9RdWFka2V5KHRpbGUpIHtcbiAgICB2YXIgaW5kZXggPSAnJztcbiAgICBmb3IgKHZhciB6ID0gdGlsZVsyXTsgeiA+IDA7IHotLSkge1xuICAgICAgICB2YXIgYiA9IDA7XG4gICAgICAgIHZhciBtYXNrID0gMSA8PCAoeiAtIDEpO1xuICAgICAgICBpZiAoKHRpbGVbMF0gJiBtYXNrKSAhPT0gMCkgYisrO1xuICAgICAgICBpZiAoKHRpbGVbMV0gJiBtYXNrKSAhPT0gMCkgYiArPSAyO1xuICAgICAgICBpbmRleCArPSBiLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHRpbGUgZm9yIGEgcXVhZGtleVxuICpcbiAqIEBuYW1lIHF1YWRrZXlUb1RpbGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWFka2V5XG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gdGlsZVxuICogQGV4YW1wbGVcbiAqIHZhciB0aWxlID0gcXVhZGtleVRvVGlsZSgnMDAwMDEwMzMnKVxuICogLy89dGlsZVxuICovXG5mdW5jdGlvbiBxdWFka2V5VG9UaWxlKHF1YWRrZXkpIHtcbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHkgPSAwO1xuICAgIHZhciB6ID0gcXVhZGtleS5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gejsgaSA+IDA7IGktLSkge1xuICAgICAgICB2YXIgbWFzayA9IDEgPDwgKGkgLSAxKTtcbiAgICAgICAgdmFyIHEgPSArcXVhZGtleVt6IC0gaV07XG4gICAgICAgIGlmIChxID09PSAxKSB4IHw9IG1hc2s7XG4gICAgICAgIGlmIChxID09PSAyKSB5IHw9IG1hc2s7XG4gICAgICAgIGlmIChxID09PSAzKSB7XG4gICAgICAgICAgICB4IHw9IG1hc2s7XG4gICAgICAgICAgICB5IHw9IG1hc2s7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFt4LCB5LCB6XTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNtYWxsZXN0IHRpbGUgdG8gY292ZXIgYSBiYm94XG4gKlxuICogQG5hbWUgYmJveFRvVGlsZVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBiYm94XG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gdGlsZVxuICogQGV4YW1wbGVcbiAqIHZhciB0aWxlID0gYmJveFRvVGlsZShbIC0xNzgsIDg0LCAtMTc3LCA4NSBdKVxuICogLy89dGlsZVxuICovXG5mdW5jdGlvbiBiYm94VG9UaWxlKGJib3hDb29yZHMpIHtcbiAgICB2YXIgbWluID0gcG9pbnRUb1RpbGUoYmJveENvb3Jkc1swXSwgYmJveENvb3Jkc1sxXSwgMzIpO1xuICAgIHZhciBtYXggPSBwb2ludFRvVGlsZShiYm94Q29vcmRzWzJdLCBiYm94Q29vcmRzWzNdLCAzMik7XG4gICAgdmFyIGJib3ggPSBbbWluWzBdLCBtaW5bMV0sIG1heFswXSwgbWF4WzFdXTtcblxuICAgIHZhciB6ID0gZ2V0QmJveFpvb20oYmJveCk7XG4gICAgaWYgKHogPT09IDApIHJldHVybiBbMCwgMCwgMF07XG4gICAgdmFyIHggPSBiYm94WzBdID4+PiAoMzIgLSB6KTtcbiAgICB2YXIgeSA9IGJib3hbMV0gPj4+ICgzMiAtIHopO1xuICAgIHJldHVybiBbeCwgeSwgel07XG59XG5cbmZ1bmN0aW9uIGdldEJib3hab29tKGJib3gpIHtcbiAgICB2YXIgTUFYX1pPT00gPSAyODtcbiAgICBmb3IgKHZhciB6ID0gMDsgeiA8IE1BWF9aT09NOyB6KyspIHtcbiAgICAgICAgdmFyIG1hc2sgPSAxIDw8ICgzMiAtICh6ICsgMSkpO1xuICAgICAgICBpZiAoKChiYm94WzBdICYgbWFzaykgIT09IChiYm94WzJdICYgbWFzaykpIHx8XG4gICAgICAgICAgICAoKGJib3hbMV0gJiBtYXNrKSAhPT0gKGJib3hbM10gJiBtYXNrKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB6O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE1BWF9aT09NO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlY2lzZSBmcmFjdGlvbmFsIHRpbGUgbG9jYXRpb24gZm9yIGEgcG9pbnQgYXQgYSB6b29tIGxldmVsXG4gKlxuICogQG5hbWUgcG9pbnRUb1RpbGVGcmFjdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGxvblxuICogQHBhcmFtIHtudW1iZXJ9IGxhdFxuICogQHBhcmFtIHtudW1iZXJ9IHpcbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSB0aWxlIGZyYWN0aW9uXG4gKiB2YXIgdGlsZSA9IHBvaW50VG9UaWxlRnJhY3Rpb24oMzAuNSwgNTAuNSwgMTUpXG4gKiAvLz10aWxlXG4gKi9cbmZ1bmN0aW9uIHBvaW50VG9UaWxlRnJhY3Rpb24obG9uLCBsYXQsIHopIHtcbiAgICB2YXIgc2luID0gTWF0aC5zaW4obGF0ICogZDJyKSxcbiAgICAgICAgejIgPSBNYXRoLnBvdygyLCB6KSxcbiAgICAgICAgeCA9IHoyICogKGxvbiAvIDM2MCArIDAuNSksXG4gICAgICAgIHkgPSB6MiAqICgwLjUgLSAwLjI1ICogTWF0aC5sb2coKDEgKyBzaW4pIC8gKDEgLSBzaW4pKSAvIE1hdGguUEkpO1xuXG4gICAgLy8gV3JhcCBUaWxlIFhcbiAgICB4ID0geCAlIHoyO1xuICAgIGlmICh4IDwgMCkgeCA9IHggKyB6MjtcbiAgICByZXR1cm4gW3gsIHksIHpdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0aWxlVG9HZW9KU09OOiB0aWxlVG9HZW9KU09OLFxuICAgIHRpbGVUb0JCT1g6IHRpbGVUb0JCT1gsXG4gICAgZ2V0Q2hpbGRyZW46IGdldENoaWxkcmVuLFxuICAgIGdldFBhcmVudDogZ2V0UGFyZW50LFxuICAgIGdldFNpYmxpbmdzOiBnZXRTaWJsaW5ncyxcbiAgICBoYXNUaWxlOiBoYXNUaWxlLFxuICAgIGhhc1NpYmxpbmdzOiBoYXNTaWJsaW5ncyxcbiAgICB0aWxlc0VxdWFsOiB0aWxlc0VxdWFsLFxuICAgIHRpbGVUb1F1YWRrZXk6IHRpbGVUb1F1YWRrZXksXG4gICAgcXVhZGtleVRvVGlsZTogcXVhZGtleVRvVGlsZSxcbiAgICBwb2ludFRvVGlsZTogcG9pbnRUb1RpbGUsXG4gICAgYmJveFRvVGlsZTogYmJveFRvVGlsZSxcbiAgICBwb2ludFRvVGlsZUZyYWN0aW9uOiBwb2ludFRvVGlsZUZyYWN0aW9uXG59O1xuIixudWxsLG51bGwsIlxubW9kdWxlLmV4cG9ydHMgPSByZXdpbmQ7XG5cbmZ1bmN0aW9uIHJld2luZChnaiwgb3V0ZXIpIHtcbiAgICB2YXIgdHlwZSA9IGdqICYmIGdqLnR5cGUsIGk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2ouZmVhdHVyZXMubGVuZ3RoOyBpKyspIHJld2luZChnai5mZWF0dXJlc1tpXSwgb3V0ZXIpO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2ouZ2VvbWV0cmllcy5sZW5ndGg7IGkrKykgcmV3aW5kKGdqLmdlb21ldHJpZXNbaV0sIG91dGVyKTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ0ZlYXR1cmUnKSB7XG4gICAgICAgIHJld2luZChnai5nZW9tZXRyeSwgb3V0ZXIpO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgcmV3aW5kUmluZ3MoZ2ouY29vcmRpbmF0ZXMsIG91dGVyKTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGdqLmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSByZXdpbmRSaW5ncyhnai5jb29yZGluYXRlc1tpXSwgb3V0ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBnajtcbn1cblxuZnVuY3Rpb24gcmV3aW5kUmluZ3MocmluZ3MsIG91dGVyKSB7XG4gICAgaWYgKHJpbmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgcmV3aW5kUmluZyhyaW5nc1swXSwgb3V0ZXIpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmV3aW5kUmluZyhyaW5nc1tpXSwgIW91dGVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJld2luZFJpbmcocmluZywgZGlyKSB7XG4gICAgdmFyIGFyZWEgPSAwLCBlcnIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByaW5nLmxlbmd0aCwgaiA9IGxlbiAtIDE7IGkgPCBsZW47IGogPSBpKyspIHtcbiAgICAgICAgdmFyIGsgPSAocmluZ1tpXVswXSAtIHJpbmdbal1bMF0pICogKHJpbmdbal1bMV0gKyByaW5nW2ldWzFdKTtcbiAgICAgICAgdmFyIG0gPSBhcmVhICsgaztcbiAgICAgICAgZXJyICs9IE1hdGguYWJzKGFyZWEpID49IE1hdGguYWJzKGspID8gYXJlYSAtIG0gKyBrIDogayAtIG0gKyBhcmVhO1xuICAgICAgICBhcmVhID0gbTtcbiAgICB9XG4gICAgaWYgKGFyZWEgKyBlcnIgPj0gMCAhPT0gISFkaXIpIHJpbmcucmV2ZXJzZSgpO1xufVxuIiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb3J0S0QoaWRzLCBjb29yZHMsIG5vZGVTaXplLCBsZWZ0LCByaWdodCwgZGVwdGgpIHtcbiAgICBpZiAocmlnaHQgLSBsZWZ0IDw9IG5vZGVTaXplKSByZXR1cm47XG5cbiAgICBjb25zdCBtID0gKGxlZnQgKyByaWdodCkgPj4gMTtcblxuICAgIHNlbGVjdChpZHMsIGNvb3JkcywgbSwgbGVmdCwgcmlnaHQsIGRlcHRoICUgMik7XG5cbiAgICBzb3J0S0QoaWRzLCBjb29yZHMsIG5vZGVTaXplLCBsZWZ0LCBtIC0gMSwgZGVwdGggKyAxKTtcbiAgICBzb3J0S0QoaWRzLCBjb29yZHMsIG5vZGVTaXplLCBtICsgMSwgcmlnaHQsIGRlcHRoICsgMSk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdChpZHMsIGNvb3JkcywgaywgbGVmdCwgcmlnaHQsIGluYykge1xuXG4gICAgd2hpbGUgKHJpZ2h0ID4gbGVmdCkge1xuICAgICAgICBpZiAocmlnaHQgLSBsZWZ0ID4gNjAwKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gcmlnaHQgLSBsZWZ0ICsgMTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICAgICAgICBjb25zdCB6ID0gTWF0aC5sb2cobik7XG4gICAgICAgICAgICBjb25zdCBzID0gMC41ICogTWF0aC5leHAoMiAqIHogLyAzKTtcbiAgICAgICAgICAgIGNvbnN0IHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pICogKG0gLSBuIC8gMiA8IDAgPyAtMSA6IDEpO1xuICAgICAgICAgICAgY29uc3QgbmV3TGVmdCA9IE1hdGgubWF4KGxlZnQsIE1hdGguZmxvb3IoayAtIG0gKiBzIC8gbiArIHNkKSk7XG4gICAgICAgICAgICBjb25zdCBuZXdSaWdodCA9IE1hdGgubWluKHJpZ2h0LCBNYXRoLmZsb29yKGsgKyAobiAtIG0pICogcyAvIG4gKyBzZCkpO1xuICAgICAgICAgICAgc2VsZWN0KGlkcywgY29vcmRzLCBrLCBuZXdMZWZ0LCBuZXdSaWdodCwgaW5jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHQgPSBjb29yZHNbMiAqIGsgKyBpbmNdO1xuICAgICAgICBsZXQgaSA9IGxlZnQ7XG4gICAgICAgIGxldCBqID0gcmlnaHQ7XG5cbiAgICAgICAgc3dhcEl0ZW0oaWRzLCBjb29yZHMsIGxlZnQsIGspO1xuICAgICAgICBpZiAoY29vcmRzWzIgKiByaWdodCArIGluY10gPiB0KSBzd2FwSXRlbShpZHMsIGNvb3JkcywgbGVmdCwgcmlnaHQpO1xuXG4gICAgICAgIHdoaWxlIChpIDwgaikge1xuICAgICAgICAgICAgc3dhcEl0ZW0oaWRzLCBjb29yZHMsIGksIGopO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgd2hpbGUgKGNvb3Jkc1syICogaSArIGluY10gPCB0KSBpKys7XG4gICAgICAgICAgICB3aGlsZSAoY29vcmRzWzIgKiBqICsgaW5jXSA+IHQpIGotLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb29yZHNbMiAqIGxlZnQgKyBpbmNdID09PSB0KSBzd2FwSXRlbShpZHMsIGNvb3JkcywgbGVmdCwgaik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgc3dhcEl0ZW0oaWRzLCBjb29yZHMsIGosIHJpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqIDw9IGspIGxlZnQgPSBqICsgMTtcbiAgICAgICAgaWYgKGsgPD0gaikgcmlnaHQgPSBqIC0gMTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN3YXBJdGVtKGlkcywgY29vcmRzLCBpLCBqKSB7XG4gICAgc3dhcChpZHMsIGksIGopO1xuICAgIHN3YXAoY29vcmRzLCAyICogaSwgMiAqIGopO1xuICAgIHN3YXAoY29vcmRzLCAyICogaSArIDEsIDIgKiBqICsgMSk7XG59XG5cbmZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgY29uc3QgdG1wID0gYXJyW2ldO1xuICAgIGFycltpXSA9IGFycltqXTtcbiAgICBhcnJbal0gPSB0bXA7XG59XG4iLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhpbihpZHMsIGNvb3JkcywgcXgsIHF5LCByLCBub2RlU2l6ZSkge1xuICAgIGNvbnN0IHN0YWNrID0gWzAsIGlkcy5sZW5ndGggLSAxLCAwXTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCByMiA9IHIgKiByO1xuXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBheGlzID0gc3RhY2sucG9wKCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBzdGFjay5wb3AoKTtcblxuICAgICAgICBpZiAocmlnaHQgLSBsZWZ0IDw9IG5vZGVTaXplKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gbGVmdDsgaSA8PSByaWdodDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNxRGlzdChjb29yZHNbMiAqIGldLCBjb29yZHNbMiAqIGkgKyAxXSwgcXgsIHF5KSA8PSByMikgcmVzdWx0LnB1c2goaWRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbSA9IE1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKTtcblxuICAgICAgICBjb25zdCB4ID0gY29vcmRzWzIgKiBtXTtcbiAgICAgICAgY29uc3QgeSA9IGNvb3Jkc1syICogbSArIDFdO1xuXG4gICAgICAgIGlmIChzcURpc3QoeCwgeSwgcXgsIHF5KSA8PSByMikgcmVzdWx0LnB1c2goaWRzW21dKTtcblxuICAgICAgICBjb25zdCBuZXh0QXhpcyA9IChheGlzICsgMSkgJSAyO1xuXG4gICAgICAgIGlmIChheGlzID09PSAwID8gcXggLSByIDw9IHggOiBxeSAtIHIgPD0geSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChsZWZ0KTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobSAtIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0QXhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF4aXMgPT09IDAgPyBxeCArIHIgPj0geCA6IHF5ICsgciA+PSB5KSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKG0gKyAxKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gocmlnaHQpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0QXhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzcURpc3QoYXgsIGF5LCBieCwgYnkpIHtcbiAgICBjb25zdCBkeCA9IGF4IC0gYng7XG4gICAgY29uc3QgZHkgPSBheSAtIGJ5O1xuICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cbiIsIlxuaW1wb3J0IHNvcnQgZnJvbSAnLi9zb3J0JztcbmltcG9ydCByYW5nZSBmcm9tICcuL3JhbmdlJztcbmltcG9ydCB3aXRoaW4gZnJvbSAnLi93aXRoaW4nO1xuXG5jb25zdCBkZWZhdWx0R2V0WCA9IHAgPT4gcFswXTtcbmNvbnN0IGRlZmF1bHRHZXRZID0gcCA9PiBwWzFdO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLREJ1c2gge1xuICAgIGNvbnN0cnVjdG9yKHBvaW50cywgZ2V0WCA9IGRlZmF1bHRHZXRYLCBnZXRZID0gZGVmYXVsdEdldFksIG5vZGVTaXplID0gNjQsIEFycmF5VHlwZSA9IEZsb2F0NjRBcnJheSkge1xuICAgICAgICB0aGlzLm5vZGVTaXplID0gbm9kZVNpemU7XG4gICAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXG4gICAgICAgIGNvbnN0IEluZGV4QXJyYXlUeXBlID0gcG9pbnRzLmxlbmd0aCA8IDY1NTM2ID8gVWludDE2QXJyYXkgOiBVaW50MzJBcnJheTtcblxuICAgICAgICBjb25zdCBpZHMgPSB0aGlzLmlkcyA9IG5ldyBJbmRleEFycmF5VHlwZShwb2ludHMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5jb29yZHMgPSBuZXcgQXJyYXlUeXBlKHBvaW50cy5sZW5ndGggKiAyKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWRzW2ldID0gaTtcbiAgICAgICAgICAgIGNvb3Jkc1syICogaV0gPSBnZXRYKHBvaW50c1tpXSk7XG4gICAgICAgICAgICBjb29yZHNbMiAqIGkgKyAxXSA9IGdldFkocG9pbnRzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNvcnQoaWRzLCBjb29yZHMsIG5vZGVTaXplLCAwLCBpZHMubGVuZ3RoIC0gMSwgMCk7XG4gICAgfVxuXG4gICAgcmFuZ2UobWluWCwgbWluWSwgbWF4WCwgbWF4WSkge1xuICAgICAgICByZXR1cm4gcmFuZ2UodGhpcy5pZHMsIHRoaXMuY29vcmRzLCBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB0aGlzLm5vZGVTaXplKTtcbiAgICB9XG5cbiAgICB3aXRoaW4oeCwgeSwgcikge1xuICAgICAgICByZXR1cm4gd2l0aGluKHRoaXMuaWRzLCB0aGlzLmNvb3JkcywgeCwgeSwgciwgdGhpcy5ub2RlU2l6ZSk7XG4gICAgfVxufVxuIiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5nZShpZHMsIGNvb3JkcywgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgbm9kZVNpemUpIHtcbiAgICBjb25zdCBzdGFjayA9IFswLCBpZHMubGVuZ3RoIC0gMSwgMF07XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IHgsIHk7XG5cbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgY29uc3QgbGVmdCA9IHN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGlmIChyaWdodCAtIGxlZnQgPD0gbm9kZVNpemUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBsZWZ0OyBpIDw9IHJpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgICAgICB4ID0gY29vcmRzWzIgKiBpXTtcbiAgICAgICAgICAgICAgICB5ID0gY29vcmRzWzIgKiBpICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKHggPj0gbWluWCAmJiB4IDw9IG1heFggJiYgeSA+PSBtaW5ZICYmIHkgPD0gbWF4WSkgcmVzdWx0LnB1c2goaWRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbSA9IE1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKTtcblxuICAgICAgICB4ID0gY29vcmRzWzIgKiBtXTtcbiAgICAgICAgeSA9IGNvb3Jkc1syICogbSArIDFdO1xuXG4gICAgICAgIGlmICh4ID49IG1pblggJiYgeCA8PSBtYXhYICYmIHkgPj0gbWluWSAmJiB5IDw9IG1heFkpIHJlc3VsdC5wdXNoKGlkc1ttXSk7XG5cbiAgICAgICAgY29uc3QgbmV4dEF4aXMgPSAoYXhpcyArIDEpICUgMjtcblxuICAgICAgICBpZiAoYXhpcyA9PT0gMCA/IG1pblggPD0geCA6IG1pblkgPD0geSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChsZWZ0KTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobSAtIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0QXhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF4aXMgPT09IDAgPyBtYXhYID49IHggOiBtYXhZID49IHkpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobSArIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChyaWdodCk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5leHRBeGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJcbmltcG9ydCBLREJ1c2ggZnJvbSAna2RidXNoJztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbWluWm9vbTogMCwgICAvLyBtaW4gem9vbSB0byBnZW5lcmF0ZSBjbHVzdGVycyBvblxuICAgIG1heFpvb206IDE2LCAgLy8gbWF4IHpvb20gbGV2ZWwgdG8gY2x1c3RlciB0aGUgcG9pbnRzIG9uXG4gICAgbWluUG9pbnRzOiAyLCAvLyBtaW5pbXVtIHBvaW50cyB0byBmb3JtIGEgY2x1c3RlclxuICAgIHJhZGl1czogNDAsICAgLy8gY2x1c3RlciByYWRpdXMgaW4gcGl4ZWxzXG4gICAgZXh0ZW50OiA1MTIsICAvLyB0aWxlIGV4dGVudCAocmFkaXVzIGlzIGNhbGN1bGF0ZWQgcmVsYXRpdmUgdG8gaXQpXG4gICAgbm9kZVNpemU6IDY0LCAvLyBzaXplIG9mIHRoZSBLRC10cmVlIGxlYWYgbm9kZSwgYWZmZWN0cyBwZXJmb3JtYW5jZVxuICAgIGxvZzogZmFsc2UsICAgLy8gd2hldGhlciB0byBsb2cgdGltaW5nIGluZm9cblxuICAgIC8vIHdoZXRoZXIgdG8gZ2VuZXJhdGUgbnVtZXJpYyBpZHMgZm9yIGlucHV0IGZlYXR1cmVzIChpbiB2ZWN0b3IgdGlsZXMpXG4gICAgZ2VuZXJhdGVJZDogZmFsc2UsXG5cbiAgICAvLyBhIHJlZHVjZSBmdW5jdGlvbiBmb3IgY2FsY3VsYXRpbmcgY3VzdG9tIGNsdXN0ZXIgcHJvcGVydGllc1xuICAgIHJlZHVjZTogbnVsbCwgLy8gKGFjY3VtdWxhdGVkLCBwcm9wcykgPT4geyBhY2N1bXVsYXRlZC5zdW0gKz0gcHJvcHMuc3VtOyB9XG5cbiAgICAvLyBwcm9wZXJ0aWVzIHRvIHVzZSBmb3IgaW5kaXZpZHVhbCBwb2ludHMgd2hlbiBydW5uaW5nIHRoZSByZWR1Y2VyXG4gICAgbWFwOiBwcm9wcyA9PiBwcm9wcyAvLyBwcm9wcyA9PiAoe3N1bTogcHJvcHMubXlfdmFsdWV9KVxufTtcblxuY29uc3QgZnJvdW5kID0gTWF0aC5mcm91bmQgfHwgKHRtcCA9PiAoKHgpID0+IHsgdG1wWzBdID0gK3g7IHJldHVybiB0bXBbMF07IH0pKShuZXcgRmxvYXQzMkFycmF5KDEpKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VwZXJjbHVzdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZChPYmplY3QuY3JlYXRlKGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMudHJlZXMgPSBuZXcgQXJyYXkodGhpcy5vcHRpb25zLm1heFpvb20gKyAxKTtcbiAgICB9XG5cbiAgICBsb2FkKHBvaW50cykge1xuICAgICAgICBjb25zdCB7bG9nLCBtaW5ab29tLCBtYXhab29tLCBub2RlU2l6ZX0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKGxvZykgY29uc29sZS50aW1lKCd0b3RhbCB0aW1lJyk7XG5cbiAgICAgICAgY29uc3QgdGltZXJJZCA9IGBwcmVwYXJlICR7ICBwb2ludHMubGVuZ3RoICB9IHBvaW50c2A7XG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUudGltZSh0aW1lcklkKTtcblxuICAgICAgICB0aGlzLnBvaW50cyA9IHBvaW50cztcblxuICAgICAgICAvLyBnZW5lcmF0ZSBhIGNsdXN0ZXIgb2JqZWN0IGZvciBlYWNoIHBvaW50IGFuZCBpbmRleCBpbnB1dCBwb2ludHMgaW50byBhIEtELXRyZWVcbiAgICAgICAgbGV0IGNsdXN0ZXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXBvaW50c1tpXS5nZW9tZXRyeSkgY29udGludWU7XG4gICAgICAgICAgICBjbHVzdGVycy5wdXNoKGNyZWF0ZVBvaW50Q2x1c3Rlcihwb2ludHNbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyZWVzW21heFpvb20gKyAxXSA9IG5ldyBLREJ1c2goY2x1c3RlcnMsIGdldFgsIGdldFksIG5vZGVTaXplLCBGbG9hdDMyQXJyYXkpO1xuXG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUudGltZUVuZCh0aW1lcklkKTtcblxuICAgICAgICAvLyBjbHVzdGVyIHBvaW50cyBvbiBtYXggem9vbSwgdGhlbiBjbHVzdGVyIHRoZSByZXN1bHRzIG9uIHByZXZpb3VzIHpvb20sIGV0Yy47XG4gICAgICAgIC8vIHJlc3VsdHMgaW4gYSBjbHVzdGVyIGhpZXJhcmNoeSBhY3Jvc3Mgem9vbSBsZXZlbHNcbiAgICAgICAgZm9yIChsZXQgeiA9IG1heFpvb207IHogPj0gbWluWm9vbTsgei0tKSB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSArRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHNldCBvZiBjbHVzdGVycyBmb3IgdGhlIHpvb20gYW5kIGluZGV4IHRoZW0gd2l0aCBhIEtELXRyZWVcbiAgICAgICAgICAgIGNsdXN0ZXJzID0gdGhpcy5fY2x1c3RlcihjbHVzdGVycywgeik7XG4gICAgICAgICAgICB0aGlzLnRyZWVzW3pdID0gbmV3IEtEQnVzaChjbHVzdGVycywgZ2V0WCwgZ2V0WSwgbm9kZVNpemUsIEZsb2F0MzJBcnJheSk7XG5cbiAgICAgICAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKCd6JWQ6ICVkIGNsdXN0ZXJzIGluICVkbXMnLCB6LCBjbHVzdGVycy5sZW5ndGgsICtEYXRlLm5vdygpIC0gbm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUudGltZUVuZCgndG90YWwgdGltZScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldENsdXN0ZXJzKGJib3gsIHpvb20pIHtcbiAgICAgICAgbGV0IG1pbkxuZyA9ICgoYmJveFswXSArIDE4MCkgJSAzNjAgKyAzNjApICUgMzYwIC0gMTgwO1xuICAgICAgICBjb25zdCBtaW5MYXQgPSBNYXRoLm1heCgtOTAsIE1hdGgubWluKDkwLCBiYm94WzFdKSk7XG4gICAgICAgIGxldCBtYXhMbmcgPSBiYm94WzJdID09PSAxODAgPyAxODAgOiAoKGJib3hbMl0gKyAxODApICUgMzYwICsgMzYwKSAlIDM2MCAtIDE4MDtcbiAgICAgICAgY29uc3QgbWF4TGF0ID0gTWF0aC5tYXgoLTkwLCBNYXRoLm1pbig5MCwgYmJveFszXSkpO1xuXG4gICAgICAgIGlmIChiYm94WzJdIC0gYmJveFswXSA+PSAzNjApIHtcbiAgICAgICAgICAgIG1pbkxuZyA9IC0xODA7XG4gICAgICAgICAgICBtYXhMbmcgPSAxODA7XG4gICAgICAgIH0gZWxzZSBpZiAobWluTG5nID4gbWF4TG5nKSB7XG4gICAgICAgICAgICBjb25zdCBlYXN0ZXJuSGVtID0gdGhpcy5nZXRDbHVzdGVycyhbbWluTG5nLCBtaW5MYXQsIDE4MCwgbWF4TGF0XSwgem9vbSk7XG4gICAgICAgICAgICBjb25zdCB3ZXN0ZXJuSGVtID0gdGhpcy5nZXRDbHVzdGVycyhbLTE4MCwgbWluTGF0LCBtYXhMbmcsIG1heExhdF0sIHpvb20pO1xuICAgICAgICAgICAgcmV0dXJuIGVhc3Rlcm5IZW0uY29uY2F0KHdlc3Rlcm5IZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJlZSA9IHRoaXMudHJlZXNbdGhpcy5fbGltaXRab29tKHpvb20pXTtcbiAgICAgICAgY29uc3QgaWRzID0gdHJlZS5yYW5nZShsbmdYKG1pbkxuZyksIGxhdFkobWF4TGF0KSwgbG5nWChtYXhMbmcpLCBsYXRZKG1pbkxhdCkpO1xuICAgICAgICBjb25zdCBjbHVzdGVycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgY29uc3QgYyA9IHRyZWUucG9pbnRzW2lkXTtcbiAgICAgICAgICAgIGNsdXN0ZXJzLnB1c2goYy5udW1Qb2ludHMgPyBnZXRDbHVzdGVySlNPTihjKSA6IHRoaXMucG9pbnRzW2MuaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2x1c3RlcnM7XG4gICAgfVxuXG4gICAgZ2V0Q2hpbGRyZW4oY2x1c3RlcklkKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbklkID0gdGhpcy5fZ2V0T3JpZ2luSWQoY2x1c3RlcklkKTtcbiAgICAgICAgY29uc3Qgb3JpZ2luWm9vbSA9IHRoaXMuX2dldE9yaWdpblpvb20oY2x1c3RlcklkKTtcbiAgICAgICAgY29uc3QgZXJyb3JNc2cgPSAnTm8gY2x1c3RlciB3aXRoIHRoZSBzcGVjaWZpZWQgaWQuJztcblxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMudHJlZXNbb3JpZ2luWm9vbV07XG4gICAgICAgIGlmICghaW5kZXgpIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG5cbiAgICAgICAgY29uc3Qgb3JpZ2luID0gaW5kZXgucG9pbnRzW29yaWdpbklkXTtcbiAgICAgICAgaWYgKCFvcmlnaW4pIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG5cbiAgICAgICAgY29uc3QgciA9IHRoaXMub3B0aW9ucy5yYWRpdXMgLyAodGhpcy5vcHRpb25zLmV4dGVudCAqIE1hdGgucG93KDIsIG9yaWdpblpvb20gLSAxKSk7XG4gICAgICAgIGNvbnN0IGlkcyA9IGluZGV4LndpdGhpbihvcmlnaW4ueCwgb3JpZ2luLnksIHIpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgY29uc3QgYyA9IGluZGV4LnBvaW50c1tpZF07XG4gICAgICAgICAgICBpZiAoYy5wYXJlbnRJZCA9PT0gY2x1c3RlcklkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjLm51bVBvaW50cyA/IGdldENsdXN0ZXJKU09OKGMpIDogdGhpcy5wb2ludHNbYy5pbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKTtcblxuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuXG4gICAgZ2V0TGVhdmVzKGNsdXN0ZXJJZCwgbGltaXQsIG9mZnNldCkge1xuICAgICAgICBsaW1pdCA9IGxpbWl0IHx8IDEwO1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgICAgICBjb25zdCBsZWF2ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fYXBwZW5kTGVhdmVzKGxlYXZlcywgY2x1c3RlcklkLCBsaW1pdCwgb2Zmc2V0LCAwKTtcblxuICAgICAgICByZXR1cm4gbGVhdmVzO1xuICAgIH1cblxuICAgIGdldFRpbGUoeiwgeCwgeSkge1xuICAgICAgICBjb25zdCB0cmVlID0gdGhpcy50cmVlc1t0aGlzLl9saW1pdFpvb20oeildO1xuICAgICAgICBjb25zdCB6MiA9IE1hdGgucG93KDIsIHopO1xuICAgICAgICBjb25zdCB7ZXh0ZW50LCByYWRpdXN9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBwID0gcmFkaXVzIC8gZXh0ZW50O1xuICAgICAgICBjb25zdCB0b3AgPSAoeSAtIHApIC8gejI7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9ICh5ICsgMSArIHApIC8gejI7XG5cbiAgICAgICAgY29uc3QgdGlsZSA9IHtcbiAgICAgICAgICAgIGZlYXR1cmVzOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2FkZFRpbGVGZWF0dXJlcyhcbiAgICAgICAgICAgIHRyZWUucmFuZ2UoKHggLSBwKSAvIHoyLCB0b3AsICh4ICsgMSArIHApIC8gejIsIGJvdHRvbSksXG4gICAgICAgICAgICB0cmVlLnBvaW50cywgeCwgeSwgejIsIHRpbGUpO1xuXG4gICAgICAgIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRUaWxlRmVhdHVyZXMoXG4gICAgICAgICAgICAgICAgdHJlZS5yYW5nZSgxIC0gcCAvIHoyLCB0b3AsIDEsIGJvdHRvbSksXG4gICAgICAgICAgICAgICAgdHJlZS5wb2ludHMsIHoyLCB5LCB6MiwgdGlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPT09IHoyIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkVGlsZUZlYXR1cmVzKFxuICAgICAgICAgICAgICAgIHRyZWUucmFuZ2UoMCwgdG9wLCBwIC8gejIsIGJvdHRvbSksXG4gICAgICAgICAgICAgICAgdHJlZS5wb2ludHMsIC0xLCB5LCB6MiwgdGlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGlsZS5mZWF0dXJlcy5sZW5ndGggPyB0aWxlIDogbnVsbDtcbiAgICB9XG5cbiAgICBnZXRDbHVzdGVyRXhwYW5zaW9uWm9vbShjbHVzdGVySWQpIHtcbiAgICAgICAgbGV0IGV4cGFuc2lvblpvb20gPSB0aGlzLl9nZXRPcmlnaW5ab29tKGNsdXN0ZXJJZCkgLSAxO1xuICAgICAgICB3aGlsZSAoZXhwYW5zaW9uWm9vbSA8PSB0aGlzLm9wdGlvbnMubWF4Wm9vbSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKGNsdXN0ZXJJZCk7XG4gICAgICAgICAgICBleHBhbnNpb25ab29tKys7XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoICE9PSAxKSBicmVhaztcbiAgICAgICAgICAgIGNsdXN0ZXJJZCA9IGNoaWxkcmVuWzBdLnByb3BlcnRpZXMuY2x1c3Rlcl9pZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwYW5zaW9uWm9vbTtcbiAgICB9XG5cbiAgICBfYXBwZW5kTGVhdmVzKHJlc3VsdCwgY2x1c3RlcklkLCBsaW1pdCwgb2Zmc2V0LCBza2lwcGVkKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbihjbHVzdGVySWQpO1xuXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gY2hpbGQucHJvcGVydGllcztcblxuICAgICAgICAgICAgaWYgKHByb3BzICYmIHByb3BzLmNsdXN0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZCArIHByb3BzLnBvaW50X2NvdW50IDw9IG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIHRoZSB3aG9sZSBjbHVzdGVyXG4gICAgICAgICAgICAgICAgICAgIHNraXBwZWQgKz0gcHJvcHMucG9pbnRfY291bnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW50ZXIgdGhlIGNsdXN0ZXJcbiAgICAgICAgICAgICAgICAgICAgc2tpcHBlZCA9IHRoaXMuX2FwcGVuZExlYXZlcyhyZXN1bHQsIHByb3BzLmNsdXN0ZXJfaWQsIGxpbWl0LCBvZmZzZXQsIHNraXBwZWQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBleGl0IHRoZSBjbHVzdGVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChza2lwcGVkIDwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBhIHNpbmdsZSBwb2ludFxuICAgICAgICAgICAgICAgIHNraXBwZWQrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIGEgc2luZ2xlIHBvaW50XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IGxpbWl0KSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBza2lwcGVkO1xuICAgIH1cblxuICAgIF9hZGRUaWxlRmVhdHVyZXMoaWRzLCBwb2ludHMsIHgsIHksIHoyLCB0aWxlKSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBpZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBpc0NsdXN0ZXIgPSBjLm51bVBvaW50cztcblxuICAgICAgICAgICAgbGV0IHRhZ3MsIHB4LCBweTtcbiAgICAgICAgICAgIGlmIChpc0NsdXN0ZXIpIHtcbiAgICAgICAgICAgICAgICB0YWdzID0gZ2V0Q2x1c3RlclByb3BlcnRpZXMoYyk7XG4gICAgICAgICAgICAgICAgcHggPSBjLng7XG4gICAgICAgICAgICAgICAgcHkgPSBjLnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLnBvaW50c1tjLmluZGV4XTtcbiAgICAgICAgICAgICAgICB0YWdzID0gcC5wcm9wZXJ0aWVzO1xuICAgICAgICAgICAgICAgIHB4ID0gbG5nWChwLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKTtcbiAgICAgICAgICAgICAgICBweSA9IGxhdFkocC5nZW9tZXRyeS5jb29yZGluYXRlc1sxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGYgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogMSxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeTogW1tcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLm9wdGlvbnMuZXh0ZW50ICogKHB4ICogejIgLSB4KSksXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQodGhpcy5vcHRpb25zLmV4dGVudCAqIChweSAqIHoyIC0geSkpXG4gICAgICAgICAgICAgICAgXV0sXG4gICAgICAgICAgICAgICAgdGFnc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gYXNzaWduIGlkXG4gICAgICAgICAgICBsZXQgaWQ7XG4gICAgICAgICAgICBpZiAoaXNDbHVzdGVyKSB7XG4gICAgICAgICAgICAgICAgaWQgPSBjLmlkO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ2VuZXJhdGVJZCkge1xuICAgICAgICAgICAgICAgIC8vIG9wdGlvbmFsbHkgZ2VuZXJhdGUgaWRcbiAgICAgICAgICAgICAgICBpZCA9IGMuaW5kZXg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucG9pbnRzW2MuaW5kZXhdLmlkKSB7XG4gICAgICAgICAgICAgICAgLy8ga2VlcCBpZCBpZiBhbHJlYWR5IGFzc2lnbmVkXG4gICAgICAgICAgICAgICAgaWQgPSB0aGlzLnBvaW50c1tjLmluZGV4XS5pZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIGYuaWQgPSBpZDtcblxuICAgICAgICAgICAgdGlsZS5mZWF0dXJlcy5wdXNoKGYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2xpbWl0Wm9vbSh6KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLm9wdGlvbnMubWluWm9vbSwgTWF0aC5taW4oK3osIHRoaXMub3B0aW9ucy5tYXhab29tICsgMSkpO1xuICAgIH1cblxuICAgIF9jbHVzdGVyKHBvaW50cywgem9vbSkge1xuICAgICAgICBjb25zdCBjbHVzdGVycyA9IFtdO1xuICAgICAgICBjb25zdCB7cmFkaXVzLCBleHRlbnQsIHJlZHVjZSwgbWluUG9pbnRzfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgciA9IHJhZGl1cyAvIChleHRlbnQgKiBNYXRoLnBvdygyLCB6b29tKSk7XG5cbiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGVhY2ggcG9pbnRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAvLyBpZiB3ZSd2ZSBhbHJlYWR5IHZpc2l0ZWQgdGhlIHBvaW50IGF0IHRoaXMgem9vbSBsZXZlbCwgc2tpcCBpdFxuICAgICAgICAgICAgaWYgKHAuem9vbSA8PSB6b29tKSBjb250aW51ZTtcbiAgICAgICAgICAgIHAuem9vbSA9IHpvb207XG5cbiAgICAgICAgICAgIC8vIGZpbmQgYWxsIG5lYXJieSBwb2ludHNcbiAgICAgICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLnRyZWVzW3pvb20gKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ySWRzID0gdHJlZS53aXRoaW4ocC54LCBwLnksIHIpO1xuXG4gICAgICAgICAgICBjb25zdCBudW1Qb2ludHNPcmlnaW4gPSBwLm51bVBvaW50cyB8fCAxO1xuICAgICAgICAgICAgbGV0IG51bVBvaW50cyA9IG51bVBvaW50c09yaWdpbjtcblxuICAgICAgICAgICAgLy8gY291bnQgdGhlIG51bWJlciBvZiBwb2ludHMgaW4gYSBwb3RlbnRpYWwgY2x1c3RlclxuICAgICAgICAgICAgZm9yIChjb25zdCBuZWlnaGJvcklkIG9mIG5laWdoYm9ySWRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYiA9IHRyZWUucG9pbnRzW25laWdoYm9ySWRdO1xuICAgICAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgbmVpZ2hib3JzIHRoYXQgYXJlIGFscmVhZHkgcHJvY2Vzc2VkXG4gICAgICAgICAgICAgICAgaWYgKGIuem9vbSA+IHpvb20pIG51bVBvaW50cyArPSBiLm51bVBvaW50cyB8fCAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSB3ZXJlIG5laWdoYm9ycyB0byBtZXJnZSwgYW5kIHRoZXJlIGFyZSBlbm91Z2ggcG9pbnRzIHRvIGZvcm0gYSBjbHVzdGVyXG4gICAgICAgICAgICBpZiAobnVtUG9pbnRzID4gbnVtUG9pbnRzT3JpZ2luICYmIG51bVBvaW50cyA+PSBtaW5Qb2ludHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgd3ggPSBwLnggKiBudW1Qb2ludHNPcmlnaW47XG4gICAgICAgICAgICAgICAgbGV0IHd5ID0gcC55ICogbnVtUG9pbnRzT3JpZ2luO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNsdXN0ZXJQcm9wZXJ0aWVzID0gcmVkdWNlICYmIG51bVBvaW50c09yaWdpbiA+IDEgPyB0aGlzLl9tYXAocCwgdHJ1ZSkgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gZW5jb2RlIGJvdGggem9vbSBhbmQgcG9pbnQgaW5kZXggb24gd2hpY2ggdGhlIGNsdXN0ZXIgb3JpZ2luYXRlZCAtLSBvZmZzZXQgYnkgdG90YWwgbGVuZ3RoIG9mIGZlYXR1cmVzXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSAoaSA8PCA1KSArICh6b29tICsgMSkgKyB0aGlzLnBvaW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5laWdoYm9ySWQgb2YgbmVpZ2hib3JJZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IHRyZWUucG9pbnRzW25laWdoYm9ySWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiLnpvb20gPD0gem9vbSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGIuem9vbSA9IHpvb207IC8vIHNhdmUgdGhlIHpvb20gKHNvIGl0IGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCB0d2ljZSlcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1Qb2ludHMyID0gYi5udW1Qb2ludHMgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgd3ggKz0gYi54ICogbnVtUG9pbnRzMjsgLy8gYWNjdW11bGF0ZSBjb29yZGluYXRlcyBmb3IgY2FsY3VsYXRpbmcgd2VpZ2h0ZWQgY2VudGVyXG4gICAgICAgICAgICAgICAgICAgIHd5ICs9IGIueSAqIG51bVBvaW50czI7XG5cbiAgICAgICAgICAgICAgICAgICAgYi5wYXJlbnRJZCA9IGlkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWR1Y2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2x1c3RlclByb3BlcnRpZXMpIGNsdXN0ZXJQcm9wZXJ0aWVzID0gdGhpcy5fbWFwKHAsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVkdWNlKGNsdXN0ZXJQcm9wZXJ0aWVzLCB0aGlzLl9tYXAoYikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcC5wYXJlbnRJZCA9IGlkO1xuICAgICAgICAgICAgICAgIGNsdXN0ZXJzLnB1c2goY3JlYXRlQ2x1c3Rlcih3eCAvIG51bVBvaW50cywgd3kgLyBudW1Qb2ludHMsIGlkLCBudW1Qb2ludHMsIGNsdXN0ZXJQcm9wZXJ0aWVzKSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgcG9pbnRzIGFzIHVuY2x1c3RlcmVkXG4gICAgICAgICAgICAgICAgY2x1c3RlcnMucHVzaChwKTtcblxuICAgICAgICAgICAgICAgIGlmIChudW1Qb2ludHMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmVpZ2hib3JJZCBvZiBuZWlnaGJvcklkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IHRyZWUucG9pbnRzW25laWdoYm9ySWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGIuem9vbSA8PSB6b29tKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuem9vbSA9IHpvb207XG4gICAgICAgICAgICAgICAgICAgICAgICBjbHVzdGVycy5wdXNoKGIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsdXN0ZXJzO1xuICAgIH1cblxuICAgIC8vIGdldCBpbmRleCBvZiB0aGUgcG9pbnQgZnJvbSB3aGljaCB0aGUgY2x1c3RlciBvcmlnaW5hdGVkXG4gICAgX2dldE9yaWdpbklkKGNsdXN0ZXJJZCkge1xuICAgICAgICByZXR1cm4gKGNsdXN0ZXJJZCAtIHRoaXMucG9pbnRzLmxlbmd0aCkgPj4gNTtcbiAgICB9XG5cbiAgICAvLyBnZXQgem9vbSBvZiB0aGUgcG9pbnQgZnJvbSB3aGljaCB0aGUgY2x1c3RlciBvcmlnaW5hdGVkXG4gICAgX2dldE9yaWdpblpvb20oY2x1c3RlcklkKSB7XG4gICAgICAgIHJldHVybiAoY2x1c3RlcklkIC0gdGhpcy5wb2ludHMubGVuZ3RoKSAlIDMyO1xuICAgIH1cblxuICAgIF9tYXAocG9pbnQsIGNsb25lKSB7XG4gICAgICAgIGlmIChwb2ludC5udW1Qb2ludHMpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZSA/IGV4dGVuZCh7fSwgcG9pbnQucHJvcGVydGllcykgOiBwb2ludC5wcm9wZXJ0aWVzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gdGhpcy5wb2ludHNbcG9pbnQuaW5kZXhdLnByb3BlcnRpZXM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMub3B0aW9ucy5tYXAob3JpZ2luYWwpO1xuICAgICAgICByZXR1cm4gY2xvbmUgJiYgcmVzdWx0ID09PSBvcmlnaW5hbCA/IGV4dGVuZCh7fSwgcmVzdWx0KSA6IHJlc3VsdDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNsdXN0ZXIoeCwgeSwgaWQsIG51bVBvaW50cywgcHJvcGVydGllcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGZyb3VuZCh4KSwgLy8gd2VpZ2h0ZWQgY2x1c3RlciBjZW50ZXI7IHJvdW5kIGZvciBjb25zaXN0ZW5jeSB3aXRoIEZsb2F0MzJBcnJheSBpbmRleFxuICAgICAgICB5OiBmcm91bmQoeSksXG4gICAgICAgIHpvb206IEluZmluaXR5LCAvLyB0aGUgbGFzdCB6b29tIHRoZSBjbHVzdGVyIHdhcyBwcm9jZXNzZWQgYXRcbiAgICAgICAgaWQsIC8vIGVuY29kZXMgaW5kZXggb2YgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBjbHVzdGVyIGFuZCBpdHMgem9vbSBsZXZlbFxuICAgICAgICBwYXJlbnRJZDogLTEsIC8vIHBhcmVudCBjbHVzdGVyIGlkXG4gICAgICAgIG51bVBvaW50cyxcbiAgICAgICAgcHJvcGVydGllc1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50Q2x1c3RlcihwLCBpZCkge1xuICAgIGNvbnN0IFt4LCB5XSA9IHAuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogZnJvdW5kKGxuZ1goeCkpLCAvLyBwcm9qZWN0ZWQgcG9pbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgeTogZnJvdW5kKGxhdFkoeSkpLFxuICAgICAgICB6b29tOiBJbmZpbml0eSwgLy8gdGhlIGxhc3Qgem9vbSB0aGUgcG9pbnQgd2FzIHByb2Nlc3NlZCBhdFxuICAgICAgICBpbmRleDogaWQsIC8vIGluZGV4IG9mIHRoZSBzb3VyY2UgZmVhdHVyZSBpbiB0aGUgb3JpZ2luYWwgaW5wdXQgYXJyYXksXG4gICAgICAgIHBhcmVudElkOiAtMSAvLyBwYXJlbnQgY2x1c3RlciBpZFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldENsdXN0ZXJKU09OKGNsdXN0ZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIGlkOiBjbHVzdGVyLmlkLFxuICAgICAgICBwcm9wZXJ0aWVzOiBnZXRDbHVzdGVyUHJvcGVydGllcyhjbHVzdGVyKSxcbiAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgICBjb29yZGluYXRlczogW3hMbmcoY2x1c3Rlci54KSwgeUxhdChjbHVzdGVyLnkpXVxuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2x1c3RlclByb3BlcnRpZXMoY2x1c3Rlcikge1xuICAgIGNvbnN0IGNvdW50ID0gY2x1c3Rlci5udW1Qb2ludHM7XG4gICAgY29uc3QgYWJicmV2ID1cbiAgICAgICAgY291bnQgPj0gMTAwMDAgPyBgJHtNYXRoLnJvdW5kKGNvdW50IC8gMTAwMCkgIH1rYCA6XG4gICAgICAgIGNvdW50ID49IDEwMDAgPyBgJHtNYXRoLnJvdW5kKGNvdW50IC8gMTAwKSAvIDEwICB9a2AgOiBjb3VudDtcbiAgICByZXR1cm4gZXh0ZW5kKGV4dGVuZCh7fSwgY2x1c3Rlci5wcm9wZXJ0aWVzKSwge1xuICAgICAgICBjbHVzdGVyOiB0cnVlLFxuICAgICAgICBjbHVzdGVyX2lkOiBjbHVzdGVyLmlkLFxuICAgICAgICBwb2ludF9jb3VudDogY291bnQsXG4gICAgICAgIHBvaW50X2NvdW50X2FiYnJldmlhdGVkOiBhYmJyZXZcbiAgICB9KTtcbn1cblxuLy8gbG9uZ2l0dWRlL2xhdGl0dWRlIHRvIHNwaGVyaWNhbCBtZXJjYXRvciBpbiBbMC4uMV0gcmFuZ2VcbmZ1bmN0aW9uIGxuZ1gobG5nKSB7XG4gICAgcmV0dXJuIGxuZyAvIDM2MCArIDAuNTtcbn1cbmZ1bmN0aW9uIGxhdFkobGF0KSB7XG4gICAgY29uc3Qgc2luID0gTWF0aC5zaW4obGF0ICogTWF0aC5QSSAvIDE4MCk7XG4gICAgY29uc3QgeSA9ICgwLjUgLSAwLjI1ICogTWF0aC5sb2coKDEgKyBzaW4pIC8gKDEgLSBzaW4pKSAvIE1hdGguUEkpO1xuICAgIHJldHVybiB5IDwgMCA/IDAgOiB5ID4gMSA/IDEgOiB5O1xufVxuXG4vLyBzcGhlcmljYWwgbWVyY2F0b3IgdG8gbG9uZ2l0dWRlL2xhdGl0dWRlXG5mdW5jdGlvbiB4TG5nKHgpIHtcbiAgICByZXR1cm4gKHggLSAwLjUpICogMzYwO1xufVxuZnVuY3Rpb24geUxhdCh5KSB7XG4gICAgY29uc3QgeTIgPSAoMTgwIC0geSAqIDM2MCkgKiBNYXRoLlBJIC8gMTgwO1xuICAgIHJldHVybiAzNjAgKiBNYXRoLmF0YW4oTWF0aC5leHAoeTIpKSAvIE1hdGguUEkgLSA5MDtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYykge1xuICAgIGZvciAoY29uc3QgaWQgaW4gc3JjKSBkZXN0W2lkXSA9IHNyY1tpZF07XG4gICAgcmV0dXJuIGRlc3Q7XG59XG5cbmZ1bmN0aW9uIGdldFgocCkge1xuICAgIHJldHVybiBwLng7XG59XG5mdW5jdGlvbiBnZXRZKHApIHtcbiAgICByZXR1cm4gcC55O1xufVxuIixudWxsLG51bGxdLCJuYW1lcyI6WyJsb2FkVmVjdG9yVGlsZSIsInBhcmFtcyIsImNhbGxiYWNrIiwicmVxdWVzdCIsImdldEFycmF5QnVmZmVyIiwiZXJyIiwiZGF0YSIsImNhY2hlQ29udHJvbCIsImV4cGlyZXMiLCJ2ZWN0b3JUaWxlIiwidnQiLCJWZWN0b3JUaWxlIiwiUHJvdG9idWYiLCJyYXdEYXRhIiwiY2FuY2VsIiwiVmVjdG9yVGlsZVdvcmtlclNvdXJjZSIsImNvbnN0cnVjdG9yIiwiYWN0b3IiLCJsYXllckluZGV4IiwiYXZhaWxhYmxlSW1hZ2VzIiwibG9hZFZlY3RvckRhdGEiLCJ0aGlzIiwibG9hZGluZyIsImxvYWRlZCIsImxvYWRUaWxlIiwidWlkIiwicGVyZiIsImNvbGxlY3RSZXNvdXJjZVRpbWluZyIsIlJlcXVlc3RQZXJmb3JtYW5jZSIsIndvcmtlclRpbGUiLCJXb3JrZXJUaWxlIiwiYWJvcnQiLCJyZXNwb25zZSIsInN0YXR1cyIsInJhd1RpbGVEYXRhIiwicmVzb3VyY2VUaW1pbmciLCJyZXNvdXJjZVRpbWluZ0RhdGEiLCJmaW5pc2giLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJleHRlbmQiLCJzbGljZSIsInJlbG9hZFRpbGUiLCJ2dFNvdXJjZSIsInNob3dDb2xsaXNpb25Cb3hlcyIsImRvbmUiLCJyZWxvYWRDYWxsYmFjayIsImFib3J0VGlsZSIsInJlbW92ZVRpbGUiLCJQb2ludCIsInJlcXVpcmUiLCJWZWN0b3JUaWxlRmVhdHVyZSIsIm1vZHVsZSIsIkdlb0pTT05XcmFwcGVyIiwiZmVhdHVyZXMiLCJvcHRpb25zIiwibGVuZ3RoIiwiRmVhdHVyZVdyYXBwZXIiLCJmZWF0dXJlIiwiZXh0ZW50IiwiaWQiLCJ1bmRlZmluZWQiLCJ0eXBlIiwicmF3R2VvbWV0cnkiLCJnZW9tZXRyeSIsInByb3BlcnRpZXMiLCJ0YWdzIiwicHJvdG90eXBlIiwiaSIsImxvYWRHZW9tZXRyeSIsInJpbmdzIiwicmluZyIsIm5ld1JpbmciLCJqIiwicHVzaCIsImJib3giLCJ4MSIsIkluZmluaXR5IiwieDIiLCJ5MSIsInkyIiwiY29vcmQiLCJNYXRoIiwibWluIiwieCIsIm1heCIsInkiLCJ0b0dlb0pTT04iLCJQYmYiLCJmcm9tVmVjdG9yVGlsZUpzIiwidGlsZSIsIm91dCIsInBiZiIsImtleSIsImxheWVycyIsIndyaXRlTWVzc2FnZSIsIndyaXRlTGF5ZXIiLCJ3cml0ZVRpbGUiLCJsYXllciIsIndyaXRlVmFyaW50RmllbGQiLCJ2ZXJzaW9uIiwid3JpdGVTdHJpbmdGaWVsZCIsIm5hbWUiLCJjb250ZXh0Iiwia2V5cyIsInZhbHVlcyIsImtleWNhY2hlIiwidmFsdWVjYWNoZSIsIndyaXRlRmVhdHVyZSIsIndyaXRlVmFsdWUiLCJ3cml0ZVByb3BlcnRpZXMiLCJ3cml0ZUdlb21ldHJ5IiwidmFsdWUiLCJrZXlJbmRleCIsIndyaXRlVmFyaW50IiwidmFsdWVLZXkiLCJ2YWx1ZUluZGV4IiwiY29tbWFuZCIsImNtZCIsInppZ3phZyIsIm51bSIsInIiLCJjb3VudCIsImxpbmVDb3VudCIsImR4IiwiZHkiLCJ3cml0ZUJvb2xlYW5GaWVsZCIsIndyaXRlRG91YmxlRmllbGQiLCJ3cml0ZVNWYXJpbnRGaWVsZCIsImwiLCJrIiwic2ltcGxpZnkiLCJjb29yZHMiLCJmaXJzdCIsImxhc3QiLCJzcVRvbGVyYW5jZSIsImluZGV4IiwibWF4U3FEaXN0IiwibWlkIiwibWluUG9zVG9NaWQiLCJheCIsImF5IiwiYngiLCJieSIsImQiLCJnZXRTcVNlZ0Rpc3QiLCJwb3NUb01pZCIsImFicyIsInB4IiwicHkiLCJ0IiwiY3JlYXRlRmVhdHVyZSIsImdlb20iLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwiY2FsY0xpbmVCQm94IiwiY2FsY0JCb3giLCJjb252ZXJ0RmVhdHVyZSIsImdlb2pzb24iLCJjb29yZGluYXRlcyIsInRvbGVyYW5jZSIsInBvdyIsIm1heFpvb20iLCJwcm9tb3RlSWQiLCJnZW5lcmF0ZUlkIiwiY29udmVydFBvaW50IiwiY29udmVydExpbmUiLCJsaW5lTWV0cmljcyIsImNvbnZlcnRMaW5lcyIsImdlb21ldHJpZXMiLCJFcnJvciIsInBvbHlnb24iLCJwcm9qZWN0WCIsInByb2plY3RZIiwiaXNQb2x5Z29uIiwieDAiLCJ5MCIsInNpemUiLCJzcXJ0Iiwic3RhcnQiLCJlbmQiLCJzaW4iLCJQSSIsImxvZyIsImNsaXAiLCJzY2FsZSIsImsxIiwiazIiLCJheGlzIiwibWluQWxsIiwibWF4QWxsIiwiY2xpcHBlZCIsIm5ld0dlb21ldHJ5IiwiY2xpcFBvaW50cyIsImNsaXBMaW5lIiwiY2xpcExpbmVzIiwibmV3R2VvbSIsImEiLCJ0cmFja01ldHJpY3MiLCJzZWdMZW4iLCJuZXdTbGljZSIsImludGVyc2VjdCIsImludGVyc2VjdFgiLCJpbnRlcnNlY3RZIiwibGVuIiwiYXoiLCJiIiwiZXhpdGVkIiwiYWRkUG9pbnQiLCJsaW5lIiwieiIsInNoaWZ0RmVhdHVyZUNvb3JkcyIsIm9mZnNldCIsIm5ld0ZlYXR1cmVzIiwic2hpZnRDb29yZHMiLCJuZXdQb2x5Z29uIiwicG9pbnRzIiwibmV3UG9pbnRzIiwidHJhbnNmb3JtVGlsZSIsInRyYW5zZm9ybWVkIiwiejIiLCJ0eCIsInR5IiwidHJhbnNmb3JtUG9pbnQiLCJyb3VuZCIsImNyZWF0ZVRpbGUiLCJudW1Qb2ludHMiLCJudW1TaW1wbGlmaWVkIiwibnVtRmVhdHVyZXMiLCJzb3VyY2UiLCJhZGRGZWF0dXJlIiwic2ltcGxpZmllZCIsImFkZExpbmUiLCJ0aWxlRmVhdHVyZSIsImlzT3V0ZXIiLCJjbG9ja3dpc2UiLCJhcmVhIiwicmV3aW5kIiwiZ2VvanNvbnZ0IiwiR2VvSlNPTlZUIiwiZGVidWciLCJkZXN0Iiwic3JjIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc29sZSIsInRpbWUiLCJjb252ZXJ0IiwidGlsZXMiLCJ0aWxlQ29vcmRzIiwidGltZUVuZCIsImluZGV4TWF4Wm9vbSIsImluZGV4TWF4UG9pbnRzIiwic3RhdHMiLCJ0b3RhbCIsImJ1ZmZlciIsIm1lcmdlZCIsImxlZnQiLCJyaWdodCIsImNvbmNhdCIsIndyYXAiLCJzcGxpdFRpbGUiLCJ0b0lEIiwiY3oiLCJjeCIsImN5Iiwic3RhY2siLCJwb3AiLCJtIiwiZmxvb3IiLCJ0bCIsImJsIiwidHIiLCJiciIsImszIiwiazQiLCJnZXRUaWxlIiwidHJhbnNmb3JtIiwicGFyZW50IiwiejAiLCJtdnQiLCJFWFRFTlQiLCJfZmVhdHVyZSIsImlzTmFOIiwicGFyc2VJbnQiLCJwb2ludCIsImNhbGwiLCJfZmVhdHVyZXMiLCJNdWx0aVNvdXJjZUxheWVyR2VvSlNPTldyYXBwZXIiLCJzb3VyY2VMYXllcnMiLCJmb3JFYWNoIiwic291cmNlTGF5ZXJOYW1lIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImNoZWNrIiwiaXQiLCJnbG9iYWwkeSIsIkZ1bmN0aW9uIiwib2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZmFpbHMkaSIsImV4ZWMiLCJlcnJvciIsImRlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJmdW5jdGlvbkJpbmROYXRpdmUiLCJ0ZXN0IiwiYmluZCIsImhhc093blByb3BlcnR5IiwiY2FsbCRhIiwiZnVuY3Rpb25DYWxsIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJOQVNIT1JOX0JVRyIsImYiLCJWIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJtYXRjaCIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQ0IiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJOQVRJVkVfQklORCQxIiwiRnVuY3Rpb25Qcm90b3R5cGUkMiIsImNhbGwkOSIsInVuY3VycnlUaGlzJGsiLCJmdW5jdGlvblVuY3VycnlUaGlzIiwiZm4iLCJ1bmN1cnJ5VGhpcyRqIiwidG9TdHJpbmckOSIsInRvU3RyaW5nIiwic3RyaW5nU2xpY2UkNCIsImNsYXNzb2ZSYXckMSIsImZhaWxzJGYiLCJjbGFzc29mJDUiLCJPYmplY3QkNSIsInNwbGl0IiwiaW5kZXhlZE9iamVjdCIsIlR5cGVFcnJvciRhIiwiVHlwZUVycm9yIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSQ3IiwiSW5kZXhlZE9iamVjdCQxIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSQ2IiwidG9JbmRleGVkT2JqZWN0JDUiLCJpc0NhbGxhYmxlJGciLCJhcmd1bWVudCIsImlzQ2FsbGFibGUkZiIsImlzT2JqZWN0JDYiLCJnbG9iYWwkdiIsImlzQ2FsbGFibGUkZSIsImFGdW5jdGlvbiIsImdldEJ1aWx0SW4kNSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsIm9iamVjdElzUHJvdG90eXBlT2YiLCJpc1Byb3RvdHlwZU9mIiwiZW5naW5lVXNlckFnZW50IiwidXNlckFnZW50JDEiLCJwcm9jZXNzIiwiRGVubyIsInZlcnNpb25zIiwidjgiLCJWOF9WRVJTSU9OIiwibmF0aXZlU3ltYm9sIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiU3ltYm9sIiwiU3RyaW5nIiwic2hhbSIsInVzZVN5bWJvbEFzVWlkIiwiaXRlcmF0b3IiLCJnZXRCdWlsdEluJDMiLCJpc0NhbGxhYmxlJGQiLCJpc1Byb3RvdHlwZU9mJDEiLCJPYmplY3QkNCIsImlzU3ltYm9sJDIiLCIkU3ltYm9sIiwiU3RyaW5nJDQiLCJ0cnlUb1N0cmluZyQyIiwiaXNDYWxsYWJsZSRjIiwidHJ5VG9TdHJpbmckMSIsIlR5cGVFcnJvciQ5IiwiZ2V0TWV0aG9kJDIiLCJQIiwiZnVuYyIsImFDYWxsYWJsZSIsImNhbGwkOCIsImlzQ2FsbGFibGUkYiIsImlzT2JqZWN0JDUiLCJUeXBlRXJyb3IkOCIsInNoYXJlZCQ0IiwiZXhwb3J0cyIsImdsb2JhbCRwIiwiZGVmaW5lUHJvcGVydHkkMyIsInNldEdsb2JhbCQzIiwiU0hBUkVEIiwic2hhcmVkU3RvcmUiLCJzdG9yZSQyIiwibW9kZSIsImNvcHlyaWdodCIsImxpY2Vuc2UiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDUiLCJPYmplY3QkMyIsInRvT2JqZWN0JDMiLCJ0b09iamVjdCQyIiwiaGFzT3duUHJvcGVydHlfMSIsImhhc093biIsInVuY3VycnlUaGlzJGYiLCJwb3N0Zml4IiwicmFuZG9tIiwidG9TdHJpbmckOCIsInVpZCQyIiwiZ2xvYmFsJG0iLCJoYXNPd24kOCIsInVpZCQxIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwic2hhcmVkJDMiLCJTeW1ib2wkMiIsInN5bWJvbEZvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJ3ZWxsS25vd25TeW1ib2wkYiIsImRlc2NyaXB0aW9uIiwiY2FsbCQ3IiwiaXNPYmplY3QkNCIsImlzU3ltYm9sJDEiLCJnZXRNZXRob2QkMSIsIlR5cGVFcnJvciQ3IiwiVE9fUFJJTUlUSVZFIiwiaXNTeW1ib2wiLCJ0b1Byb3BlcnR5S2V5JDMiLCJpbnB1dCIsInByZWYiLCJleG90aWNUb1ByaW0iLCJ2YWwiLCJ2YWx1ZU9mIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiaXNPYmplY3QkMyIsImRvY3VtZW50JDEiLCJkb2N1bWVudCIsIkVYSVNUUyQxIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCQyIiwiaWU4RG9tRGVmaW5lIiwiY2FsbCQ2IiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUkMSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQzIiwidG9JbmRleGVkT2JqZWN0JDQiLCJ0b1Byb3BlcnR5S2V5JDIiLCJoYXNPd24kNyIsIklFOF9ET01fREVGSU5FJDEiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEiLCJPIiwib2JqZWN0RGVmaW5lUHJvcGVydHkiLCJ2OFByb3RvdHlwZURlZmluZUJ1ZyIsImlzT2JqZWN0JDIiLCJTdHJpbmckMyIsIlR5cGVFcnJvciQ2IiwiYW5PYmplY3QkYSIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QkOSIsInRvUHJvcGVydHlLZXkkMSIsIlR5cGVFcnJvciQ1IiwiJGRlZmluZVByb3BlcnR5IiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkF0dHJpYnV0ZXMiLCJjdXJyZW50IiwiZGVmaW5lUHJvcGVydHlNb2R1bGUkNCIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQyIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDYiLCJvYmplY3QiLCJyZWRlZmluZSQ1IiwiaXNDYWxsYWJsZSRhIiwic3RvcmUkMSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwic2V0IiwiaGFzIiwiaW5zcGVjdFNvdXJjZSQzIiwiaW5zcGVjdFNvdXJjZSQyIiwiV2Vha01hcCQxIiwiV2Vha01hcCIsIm5hdGl2ZVdlYWtNYXAiLCJzaGFyZWQkMiIsInNoYXJlZEtleSQzIiwiaGlkZGVuS2V5cyQ0IiwidW5jdXJyeVRoaXMkZCIsImlzT2JqZWN0JDEiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkNSIsImhhc093biQ2Iiwic2hhcmVkS2V5JDIiLCJoaWRkZW5LZXlzJDMiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIlR5cGVFcnJvciQ0Iiwic3RhdGUiLCJzdG9yZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJpbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJERVNDUklQVE9SUyQzIiwiRnVuY3Rpb25Qcm90b3R5cGUkMSIsImdldERlc2NyaXB0b3IiLCJFWElTVFMiLCJmdW5jdGlvbk5hbWUiLCJQUk9QRVIiLCJDT05GSUdVUkFCTEUiLCJnbG9iYWwkZiIsImlzQ2FsbGFibGUkOCIsImhhc093biQ0IiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDQiLCJzZXRHbG9iYWwkMSIsImluc3BlY3RTb3VyY2UkMSIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FJDEiLCJnZXRJbnRlcm5hbFN0YXRlJDIiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwibm9UYXJnZXRHZXQiLCJyZXBsYWNlIiwiam9pbiIsIm9iamVjdEdldE93blByb3BlcnR5TmFtZXMiLCJjZWlsJDEiLCJjZWlsIiwidG9JbnRlZ2VyT3JJbmZpbml0eSQ0IiwibnVtYmVyIiwidG9JbnRlZ2VyT3JJbmZpbml0eSQzIiwibWF4JDEiLCJtaW4kMiIsInRvQWJzb2x1dGVJbmRleCQyIiwiaW50ZWdlciIsInRvSW50ZWdlck9ySW5maW5pdHkkMiIsIm1pbiQxIiwidG9MZW5ndGgkMyIsInRvTGVuZ3RoJDIiLCJsZW5ndGhPZkFycmF5TGlrZSQyIiwib2JqIiwidG9JbmRleGVkT2JqZWN0JDMiLCJ0b0Fic29sdXRlSW5kZXgkMSIsImxlbmd0aE9mQXJyYXlMaWtlJDEiLCJjcmVhdGVNZXRob2QkMyIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImFycmF5SW5jbHVkZXMiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJoYXNPd24kMyIsInRvSW5kZXhlZE9iamVjdCQyIiwiaW5kZXhPZiQxIiwiaGlkZGVuS2V5cyQyIiwicHVzaCQxIiwib2JqZWN0S2V5c0ludGVybmFsIiwibmFtZXMiLCJlbnVtQnVnS2V5cyQzIiwiaW50ZXJuYWxPYmplY3RLZXlzJDEiLCJoaWRkZW5LZXlzJDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0QnVpbHRJbiQyIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSQxIiwiYW5PYmplY3QkOCIsImNvbmNhdCQxIiwib3duS2V5cyQxIiwiaGFzT3duJDIiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUkMyIsImZhaWxzJGIiLCJpc0NhbGxhYmxlJDciLCJyZXBsYWNlbWVudCIsImlzRm9yY2VkJDEiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInRvTG93ZXJDYXNlIiwiZ2xvYmFsJGUiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkkMyIsInJlZGVmaW5lJDQiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0IiwiZXhjZXB0aW9ucyIsImlzRm9yY2VkIiwiX2V4cG9ydCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0IiwiZm9yY2VkIiwiZ2xvYmFsJGQiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJpc0NhbGxhYmxlJDYiLCJjbGFzc29mUmF3IiwiVE9fU1RSSU5HX1RBRyQyIiwiT2JqZWN0JDIiLCJDT1JSRUNUX0FSR1VNRU5UUyIsImNsYXNzb2YkNCIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsImNsYXNzb2YkMyIsIlN0cmluZyQyIiwidG9TdHJpbmckNyIsImFuT2JqZWN0JDciLCJyZWdleHBGbGFncyQxIiwidGhhdCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJkb3RBbGwiLCJ1bmljb2RlIiwic3RpY2t5IiwiZmFpbHMkYSIsIiRSZWdFeHAkMiIsIlJlZ0V4cCIsIlVOU1VQUE9SVEVEX1kkMiIsInJlIiwibGFzdEluZGV4IiwiTUlTU0VEX1NUSUNLWSIsInJlZ2V4cFN0aWNreUhlbHBlcnMiLCJCUk9LRU5fQ0FSRVQiLCJVTlNVUFBPUlRFRF9ZIiwib2JqZWN0RGVmaW5lUHJvcGVydGllcyIsImludGVybmFsT2JqZWN0S2V5cyIsImVudW1CdWdLZXlzJDEiLCJvYmplY3RLZXlzJDIiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSQyIiwiYW5PYmplY3QkNiIsInRvSW5kZXhlZE9iamVjdCQxIiwib2JqZWN0S2V5cyQxIiwiZGVmaW5lUHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJwcm9wcyIsImFjdGl2ZVhEb2N1bWVudCIsImh0bWwkMSIsImFuT2JqZWN0JDUiLCJkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlIiwiZW51bUJ1Z0tleXMiLCJoaWRkZW5LZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCQxIiwiSUVfUFJPVE8kMSIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJkb21haW4iLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsInJlMSIsInJlMiIsIm9iamVjdENyZWF0ZSIsIiRSZWdFeHAkMSIsInJlZ2V4cFVuc3VwcG9ydGVkRG90QWxsIiwiZmxhZ3MiLCIkUmVnRXhwIiwicmVnZXhwVW5zdXBwb3J0ZWROY2ciLCJncm91cHMiLCJjYWxsJDUiLCJ1bmN1cnJ5VGhpcyRhIiwidG9TdHJpbmckNiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyQxIiwiY3JlYXRlJDIiLCJnZXRJbnRlcm5hbFN0YXRlJDEiLCJVTlNVUFBPUlRFRF9ET1RfQUxMIiwiVU5TVVBQT1JURURfTkNHIiwibmF0aXZlUmVwbGFjZSIsInNoYXJlZCIsIm5hdGl2ZUV4ZWMiLCJwYXRjaGVkRXhlYyIsImNoYXJBdCQyIiwiY2hhckF0IiwicmVwbGFjZSQxIiwic3RyaW5nU2xpY2UkMyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIlVOU1VQUE9SVEVEX1kkMSIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJncm91cCIsInN0ciIsInJhdyIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwicmVnZXhwRXhlYyQzIiwicHJvdG8iLCJGdW5jdGlvblByb3RvdHlwZSIsImFwcGx5JDEiLCJjYWxsJDQiLCJmdW5jdGlvbkFwcGx5IiwiUmVmbGVjdCIsInVuY3VycnlUaGlzJDkiLCJyZWRlZmluZSQzIiwicmVnZXhwRXhlYyQyIiwiZmFpbHMkNyIsIndlbGxLbm93blN5bWJvbCQ3IiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5JDIiLCJTUEVDSUVTJDEiLCJSZWdFeHBQcm90b3R5cGUkMSIsImlzT2JqZWN0IiwiY2xhc3NvZiQyIiwiTUFUQ0giLCJ1bmN1cnJ5VGhpcyQ4IiwiZmFpbHMkNiIsImlzQ2FsbGFibGUkNSIsImNsYXNzb2YkMSIsIm5vb3AiLCJlbXB0eSIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yUmVnRXhwIiwiZXhlYyQyIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwiaXNDb25zdHJ1Y3RvciIsImNhbGxlZCIsInRyeVRvU3RyaW5nIiwiVHlwZUVycm9yJDMiLCJhbk9iamVjdCQ0IiwiU1BFQ0lFUyIsInVuY3VycnlUaGlzJDciLCJ0b0ludGVnZXJPckluZmluaXR5JDEiLCJ0b1N0cmluZyQ1IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSQ0IiwiY2hhckF0JDEiLCJjaGFyQ29kZUF0Iiwic3RyaW5nU2xpY2UkMiIsImNyZWF0ZU1ldGhvZCQyIiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJzZWNvbmQiLCJTIiwicG9zaXRpb24iLCJ0b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHlNb2R1bGUkMSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciQxIiwidG9BYnNvbHV0ZUluZGV4IiwibGVuZ3RoT2ZBcnJheUxpa2UiLCJBcnJheSQxIiwiQXJyYXkiLCJjYWxsJDMiLCJhbk9iamVjdCQzIiwiaXNDYWxsYWJsZSQ0IiwiY2xhc3NvZiIsInJlZ2V4cEV4ZWMkMSIsIlR5cGVFcnJvciQyIiwiY2FsbCQyIiwidW5jdXJyeVRoaXMkNiIsImFuT2JqZWN0JDIiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJ0b0xlbmd0aCQxIiwidG9TdHJpbmckNCIsImdldE1ldGhvZCIsImFycmF5U2xpY2UiLCJmaW4iLCJuIiwicHJvcGVydHlLZXkiLCJjYWxsUmVnRXhwRXhlYyIsIlIiLCJyZWdleHBFeGVjIiwiZmFpbHMkNSIsIk1BWF9VSU5UMzIiLCIkcHVzaCIsImV4ZWMkMSIsInN0cmluZ1NsaWNlJDEiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJLRVkiLCJGT1JDRUQiLCJTSEFNIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsIm1heWJlQ2FsbE5hdGl2ZSIsImludGVybmFsU3BsaXQiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwidW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kIiwibWV0aG9kcyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInVuY3VycmllZE5hdGl2ZU1ldGhvZCIsIiRleGVjIiwic2VwYXJhdG9yIiwibGltaXQiLCJpc1JlZ0V4cCIsImxpbSIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwicngiLCJyZXMiLCJDIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiYUNvbnN0cnVjdG9yIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidW5pY29kZU1hdGNoaW5nIiwicCIsInEiLCJBIiwiZSIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSQyIiwidG9TdHJpbmckMyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwiY3JlYXRlTWV0aG9kJDEiLCJzdHJpbmdUcmltIiwidHJpbSIsImZhaWxzJDQiLCJ0b1N0cmluZyQyIiwid2hpdGVzcGFjZXMiLCIkcGFyc2VJbnQkMSIsIlN5bWJvbCQxIiwiSVRFUkFUT1IkMyIsImhleCIsIm51bWJlclBhcnNlSW50IiwicmFkaXgiLCJQUk9QRVJfRlVOQ1RJT05fTkFNRSQxIiwicmVkZWZpbmUkMiIsImFuT2JqZWN0JDEiLCIkdG9TdHJpbmciLCJmYWlscyQzIiwiVE9fU1RSSU5HIiwiUmVnRXhwUHJvdG90eXBlIiwibiRUb1N0cmluZyIsImdldEZsYWdzIiwicmYiLCJnZXRMYXN0RGlnaXQiLCJnZW5lcmF0ZVVuaXF1ZUlkIiwiY2VsbElkIiwiR2VvbVR5cGUiLCJTdWJsYXllckNvbWJpbmF0aW9uTW9kZSIsIkFnZ3JlZ2F0aW9uT3BlcmF0aW9uIiwiY3JlYXRlJDEiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSQyIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIml0ZXJhdG9ycyIsImNvcnJlY3RQcm90b3R5cGVHZXR0ZXIiLCJnZXRQcm90b3R5cGVPZiIsImdsb2JhbCQ0IiwiaGFzT3duJDEiLCJpc0NhbGxhYmxlJDMiLCJ0b09iamVjdCQxIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiSUVfUFJPVE8iLCJPYmplY3QkMSIsIk9iamVjdFByb3RvdHlwZSIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwiZmFpbHMkMSIsImlzQ2FsbGFibGUkMiIsImdldFByb3RvdHlwZU9mJDEiLCJyZWRlZmluZSQxIiwiSVRFUkFUT1IkMiIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMkMSIsIk5FV19JVEVSQVRPUl9QUk9UT1RZUEUiLCJpdGVyYXRvcnNDb3JlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiZGVmaW5lUHJvcGVydHkkMiIsIlRPX1NUUklOR19UQUckMSIsInNldFRvU3RyaW5nVGFnJDIiLCJUQUciLCJJdGVyYXRvclByb3RvdHlwZSQxIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0VG9TdHJpbmdUYWckMSIsIkl0ZXJhdG9ycyQyIiwicmV0dXJuVGhpcyQxIiwiaXNDYWxsYWJsZSQxIiwiU3RyaW5nJDEiLCJUeXBlRXJyb3IkMSIsInVuY3VycnlUaGlzJDIiLCJhbk9iamVjdCIsIm9iamVjdFNldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJzZXR0ZXIiLCJDT1JSRUNUX1NFVFRFUiIsImFQb3NzaWJsZVByb3RvdHlwZSIsIl9fcHJvdG9fXyIsIiQkMiIsImNhbGwkMSIsImlzQ2FsbGFibGUiLCJzZXRUb1N0cmluZ1RhZyIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSQxIiwicmVkZWZpbmUiLCJJdGVyYXRvcnMkMSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJJVEVSQVRPUiQxIiwiS0VZUyIsIlZBTFVFUyIsIkVOVFJJRVMiLCJyZXR1cm5UaGlzIiwidG9JbmRleGVkT2JqZWN0IiwiYWRkVG9VbnNjb3BhYmxlcyIsIkl0ZXJhdG9ycyIsImRlZmluZVByb3BlcnR5JDEiLCJERVNDUklQVE9SUyQxIiwiQVJSQVlfSVRFUkFUT1IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVzX2FycmF5X2l0ZXJhdG9yIiwiSXRlcmFibGUiLCJOQU1FIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIm5leHQiLCJERUZBVUxUIiwiSVNfU0VUIiwiRU5VTUVSQUJMRV9ORVhUIiwiVE9fU1RSSU5HX1RBRyIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJraW5kIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJkZWZpbmVJdGVyYXRvciIsIml0ZXJhdGVkIiwiQXJndW1lbnRzIiwiY2xhc3NMaXN0IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlJDEiLCJnbG9iYWwkMiIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJ3ZWxsS25vd25TeW1ib2wiLCJJVEVSQVRPUiIsIkFycmF5VmFsdWVzIiwiaGFuZGxlUHJvdG90eXBlIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkNPTExFQ1RJT05fTkFNRSIsIk1FVEhPRF9OQU1FIiwiREVTQ1JJUFRPUlMiLCJmYWlscyIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsInRvT2JqZWN0IiwiSW5kZXhlZE9iamVjdCIsIiRhc3NpZ24iLCJhc3NpZ24iLCJvYmplY3RBc3NpZ24iLCJCIiwiYWxwaGFiZXQiLCJjaHIiLCJUIiwiYXJndW1lbnRzTGVuZ3RoIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInRvU3RyaW5nJDEiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlJDEiLCJSYW5nZUVycm9yIiwidW5jdXJyeVRoaXMiLCJ0b0xlbmd0aCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJyZXBlYXQiLCJzdHJpbmdTbGljZSIsImNyZWF0ZU1ldGhvZCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsInN0cmluZ1BhZCIsInN0cmluZ1BhZFdlYmtpdEJ1ZyIsIiRwYWRTdGFydCIsInBhZFN0YXJ0IiwiZ2V0Q2VsbENvb3JkcyIsInRpbGVCQm94IiwiY2VsbCIsIm51bUNvbHMiLCJjb2wiLCJyb3ciLCJ3aWR0aCIsImhlaWdodCIsImdldEZlYXR1cmUiLCJmZWF0dXJlUGFyYW1zIiwiZ2VvbVR5cGUiLCJudW1Sb3dzIiwiYWRkTWV0YSIsIl9jb2wiLCJfcm93IiwiZ2V0UG9pbnRGZWF0dXJlIiwic3F1YXJlTWluWCIsInNxdWFyZU1pblkiLCJzcXVhcmVNYXhYIiwic3F1YXJlTWF4WSIsImdldFJlY3RhbmdsZUZlYXR1cmUiLCJ3cml0ZVZhbHVlVG9GZWF0dXJlIiwicXVhbnRpemVkVGFpbCIsInZhbHVlVG9Xcml0ZSIsInByb3BlcnRpZXNLZXkiLCJnZXRCdWNrZXRJbmRleCIsImJyZWFrcyIsImN1cnJlbnRCdWNrZXRJbmRleCIsImJ1Y2tldEluZGV4IiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJnZXRWYWx1ZSIsInJlYWxWYWx1ZXNTdW0iLCJnZXRDb21wYXJlVmFsdWUiLCJkYXRhc2V0c0hpZ2hlc3RSZWFsVmFsdWUiLCJkYXRhc2V0c0hpZ2hlc3RSZWFsVmFsdWVJbmRleCIsImdldEJpdmFyaWF0ZVZhbHVlIiwicmVhbFZhbHVlcyIsInZhbHVlQSIsImdldFRpbWVDb21wYXJlVmFsdWUiLCJkZWx0YSIsImdldEN1bXVsYXRpdmVWYWx1ZSIsImN1bXVsYXRpdmVWYWx1ZXNQYWRkZWRTdHJpbmdzIiwibXNnIiwiZDJyIiwicjJkIiwidGlsZVRvQkJPWCIsInRpbGUybG9uIiwidGlsZTJsYXQiLCJhdGFuIiwiZXhwIiwicG9pbnRUb1RpbGUiLCJsb24iLCJsYXQiLCJwb2ludFRvVGlsZUZyYWN0aW9uIiwiZ2V0Q2hpbGRyZW4iLCJnZXRQYXJlbnQiLCJnZXRTaWJsaW5ncyIsImhhc1RpbGUiLCJ0aWxlc0VxdWFsIiwidGlsZTEiLCJ0aWxlMiIsInRpbGVUb0dlb0pTT04iLCJoYXNTaWJsaW5ncyIsInNpYmxpbmdzIiwidGlsZVRvUXVhZGtleSIsIm1hc2siLCJxdWFka2V5VG9UaWxlIiwicXVhZGtleSIsImJib3hUb1RpbGUiLCJiYm94Q29vcmRzIiwiZ2V0QmJveFpvb20iLCJvYmplY3RFbnRyaWVzIiwib3duUHJvcHMiLCJyZXNBcnJheSIsIm9iamVjdEZyb21FbnRyaWVzIiwiZnJvbUVudHJpZXMiLCJTZWFyY2hQYXJhbXMiLCJxdWVyeSIsImdldFNlYXJjaE9iamVjdCIsInJlZHVjZSIsInBhcmFtIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiT01JVFRFRF9VUkxfUEFSQU1TIiwiZ2VvSlNPTnRvVmVjdG9yVGlsZSIsImdlb0pTT04iLCJnZW9qc29uVnQiLCJ0aWxlYmVsdCIsImludDE2QXJyYXlCdWZmZXIiLCJpbnRBcnJheSIsInJlYWRGaWVsZHMiLCJyZWFkUGFja2VkVmFyaW50IiwiZGVjb2RlUHJvdG8iLCJhZ2dyZWdhdGVkIiwicXVhbnRpemVPZmZzZXQiLCJyZWN0YW5nbGUiLCJzaW5nbGVGcmFtZSIsImludGVyYWN0aXZlIiwic3VibGF5ZXJCcmVha3MiLCJzdWJsYXllckNvdW50Iiwic3VibGF5ZXJDb21iaW5hdGlvbk1vZGUiLCJzdWJsYXllclZpc2liaWxpdHkiLCJhZ2dyZWdhdGlvbk9wZXJhdGlvbiIsIk5vbmUiLCJNYXgiLCJCaXZhcmlhdGUiLCJUaW1lQ29tcGFyZSIsIkFkZCIsImZlYXR1cmVzSW50ZXJhY3RpdmUiLCJjdXJyZW50RmVhdHVyZSIsImN1cnJlbnRGZWF0dXJlSW50ZXJhY3RpdmUiLCJjdXJyZW50RmVhdHVyZUNlbGwiLCJjdXJyZW50RmVhdHVyZU1pblRpbWVzdGFtcCIsImhlYWQiLCJ0YWlsIiwiYWdncmVnYXRpbmciLCJmaWxsIiwiY3VycmVudEFnZ3JlZ2F0ZWRWYWx1ZXMiLCJjdXJyZW50QWdncmVnYXRlZFZhbHVlc0xlbmd0aCIsImZlYXR1cmVCdWZmZXJWYWx1ZXNQb3MiLCJORUdBVElWRV9JTkZJTklUWSIsImxpdGVyYWxWYWx1ZXNTdHIiLCJmZWF0dXJlSW50QXJyYXlzIiwic3RhcnRGcmFtZSIsImVuZEZyYW1lIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiaW5kZXhJbkNlbGwiLCJwYWRWYWx1ZSIsIkF2ZyIsIk5hTiIsIm9yaWdpbmFsIiwicGFkZGVkIiwidW5pcXVlSWQiLCJmZWF0dXJlSW50QXJyYXkiLCJkYXRhc2V0SW5kZXgiLCJ0YWlsVmFsdWUiLCJzaGlmdCIsInJlYWxWYWx1ZUF0RnJhbWVGb3JEYXRhc2V0IiwicmVhbFZhbHVlQXRGcmFtZUZvckRhdGFzZXRXb3JraW5nVmFsdWUiLCJDdW11bGF0aXZlIiwiY3VtdWxhdGl2ZVZhbHVlUGFkZGVkU3RyaW5nIiwiTGl0ZXJhbCIsImZpbmFsVmFsdWUiLCJyYXdWYWx1ZXMiLCJnZW9KU09OcyIsIm1haW4iLCJhZ2dyZWdhdGUiLCJ0ZW1wb3JhbGdyaWQiLCJpbnRlcmFjdGl2ZVRpbGUiLCJ0ZW1wb3JhbGdyaWRfaW50ZXJhY3RpdmUiLCJnZW9qc29uV3JhcHBlciIsInZ0cGJmIiwiZnJvbUdlb2pzb25WdCIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsImFnZ3JlZ2F0aW9uUGFyYW1zIiwic2VhcmNoUGFyYW1zIiwiVVJMIiwidXJsIiwiZmluYWxQYXJhbXMiLCJ0aWxlSUQiLCJjYW5vbmljYWwiLCJpbnRlcnZhbCIsImZpbHRlciIsIl8iLCJnZXRBZ2dyZWdhdGlvblBhcmFtcyIsIm9yaWdpbmFsVXJsU3RyaW5nIiwib3JpZ2luYWxVcmwiLCJkZWxldGUiLCJmaW5hbFVybFN0ciIsIm9yaWdpbiIsInBhdGhuYW1lIiwiZGVjb2RlVVJJIiwiZ2V0RmluYWx1cmwiLCJyZXF1ZXN0UGFyYW1zIiwiVGVtcG9yYWxHcmlkVGlsZVdvcmtlclNvdXJjZSIsInN1cGVyIiwiUmFzdGVyREVNVGlsZVdvcmtlclNvdXJjZSIsImVuY29kaW5nIiwicmF3SW1hZ2VEYXRhIiwiaW1hZ2VQaXhlbHMiLCJpc0ltYWdlQml0bWFwIiwiZ2V0SW1hZ2VEYXRhIiwiZGVtIiwiREVNRGF0YSIsImltZ0JpdG1hcCIsIm9mZnNjcmVlbkNhbnZhcyIsIm9mZnNjcmVlbkNhbnZhc0NvbnRleHQiLCJPZmZzY3JlZW5DYW52YXMiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwiaW1nRGF0YSIsImNsZWFyUmVjdCIsIlJHQkFJbWFnZSIsImdqIiwib3V0ZXIiLCJyZXdpbmRSaW5ncyIsInJld2luZFJpbmciLCJkaXIiLCJyZXZlcnNlIiwic29ydEtEIiwiaWRzIiwibm9kZVNpemUiLCJkZXB0aCIsInNlbGVjdCIsImluYyIsInMiLCJzZCIsInN3YXBJdGVtIiwic3dhcCIsImFyciIsInRtcCIsInNxRGlzdCIsImRlZmF1bHRHZXRYIiwiZGVmYXVsdEdldFkiLCJLREJ1c2giLCJnZXRYIiwiZ2V0WSIsIkFycmF5VHlwZSIsIkZsb2F0NjRBcnJheSIsIkluZGV4QXJyYXlUeXBlIiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsInNvcnQiLCJyYW5nZSIsIm5leHRBeGlzIiwid2l0aGluIiwicXgiLCJxeSIsInIyIiwiZGVmYXVsdE9wdGlvbnMiLCJtaW5ab29tIiwibWluUG9pbnRzIiwicmFkaXVzIiwibWFwIiwiZnJvdW5kIiwiRmxvYXQzMkFycmF5IiwiU3VwZXJjbHVzdGVyIiwidHJlZXMiLCJsb2FkIiwidGltZXJJZCIsImNsdXN0ZXJzIiwiY3JlYXRlUG9pbnRDbHVzdGVyIiwibm93IiwiRGF0ZSIsIl9jbHVzdGVyIiwiZ2V0Q2x1c3RlcnMiLCJ6b29tIiwibWluTG5nIiwibWluTGF0IiwibWF4TG5nIiwibWF4TGF0IiwiZWFzdGVybkhlbSIsIndlc3Rlcm5IZW0iLCJ0cmVlIiwiX2xpbWl0Wm9vbSIsImxuZ1giLCJsYXRZIiwiYyIsImdldENsdXN0ZXJKU09OIiwiY2x1c3RlcklkIiwib3JpZ2luSWQiLCJfZ2V0T3JpZ2luSWQiLCJvcmlnaW5ab29tIiwiX2dldE9yaWdpblpvb20iLCJlcnJvck1zZyIsImNoaWxkcmVuIiwicGFyZW50SWQiLCJnZXRMZWF2ZXMiLCJsZWF2ZXMiLCJfYXBwZW5kTGVhdmVzIiwidG9wIiwiYm90dG9tIiwiX2FkZFRpbGVGZWF0dXJlcyIsImdldENsdXN0ZXJFeHBhbnNpb25ab29tIiwiZXhwYW5zaW9uWm9vbSIsImNsdXN0ZXJfaWQiLCJza2lwcGVkIiwiY2hpbGQiLCJjbHVzdGVyIiwicG9pbnRfY291bnQiLCJpc0NsdXN0ZXIiLCJnZXRDbHVzdGVyUHJvcGVydGllcyIsIm5laWdoYm9ySWRzIiwibnVtUG9pbnRzT3JpZ2luIiwibmVpZ2hib3JJZCIsInd4Iiwid3kiLCJjbHVzdGVyUHJvcGVydGllcyIsIl9tYXAiLCJudW1Qb2ludHMyIiwiY3JlYXRlQ2x1c3RlciIsImNsb25lIiwieUxhdCIsImFiYnJldiIsInBvaW50X2NvdW50X2FiYnJldmlhdGVkIiwibG5nIiwibG9hZEdlb0pTT05UaWxlIiwiX2dlb0pTT05JbmRleCIsImdlb0pTT05UaWxlIiwiR2VvSlNPTldvcmtlclNvdXJjZSIsImxvYWRHZW9KU09OIiwibG9hZERhdGEiLCJfcGVuZGluZ1JlcXVlc3QiLCJfcGVuZGluZ0NhbGxiYWNrIiwiYWJhbmRvbmVkIiwiY29tcGlsZWQiLCJjcmVhdGVFeHByZXNzaW9uIiwib3ZlcnJpZGFibGUiLCJ0cmFuc2l0aW9uIiwibWVzc2FnZSIsImV2YWx1YXRlIiwic3VwZXJjbHVzdGVyT3B0aW9ucyIsIm1hcEV4cHJlc3Npb25zIiwicmVkdWNlRXhwcmVzc2lvbnMiLCJnbG9iYWxzIiwiYWNjdW11bGF0ZWQiLCJwcm9wZXJ0eU5hbWVzIiwib3BlcmF0b3IiLCJtYXBFeHByZXNzaW9uIiwibWFwRXhwcmVzc2lvblBhcnNlZCIsInJlZHVjZUV4cHJlc3Npb25QYXJzZWQiLCJwb2ludFByb3BlcnRpZXMiLCJnZXRTdXBlcmNsdXN0ZXJPcHRpb25zIiwiZ2VvanNvblZ0T3B0aW9ucyIsImdldEpTT04iLCJyZW1vdmVTb3VyY2UiLCJnZXRDbHVzdGVyQ2hpbGRyZW4iLCJnZXRDbHVzdGVyTGVhdmVzIiwiV29ya2VyIiwiQWN0b3IiLCJsYXllckluZGV4ZXMiLCJ3b3JrZXJTb3VyY2VUeXBlcyIsInZlY3RvciIsIndvcmtlclNvdXJjZXMiLCJkZW1Xb3JrZXJTb3VyY2VzIiwicmVnaXN0ZXJXb3JrZXJTb3VyY2UiLCJXb3JrZXJTb3VyY2UiLCJyZWdpc3RlclJUTFRleHRQbHVnaW4iLCJydGxUZXh0UGx1Z2luIiwiZ2xvYmFsUlRMVGV4dFBsdWdpbiIsImlzUGFyc2VkIiwiYXBwbHlBcmFiaWNTaGFwaW5nIiwicHJvY2Vzc0JpZGlyZWN0aW9uYWxUZXh0IiwicHJvY2Vzc1N0eWxlZEJpZGlyZWN0aW9uYWxUZXh0Iiwic2V0UmVmZXJyZXIiLCJtYXBJRCIsInJlZmVycmVyIiwic2V0SW1hZ2VzIiwibWFwSWQiLCJpbWFnZXMiLCJ3b3JrZXJTb3VyY2UiLCJ3cyIsInNldExheWVycyIsImdldExheWVySW5kZXgiLCJ1cGRhdGVMYXllcnMiLCJ1cGRhdGUiLCJyZW1vdmVkSWRzIiwiZ2V0V29ya2VyU291cmNlIiwibG9hZERFTVRpbGUiLCJnZXRERU1Xb3JrZXJTb3VyY2UiLCJyZW1vdmVERU1UaWxlIiwid29ya2VyIiwibG9hZFdvcmtlclNvdXJjZSIsImltcG9ydFNjcmlwdHMiLCJzeW5jUlRMUGx1Z2luU3RhdGUiLCJzZXRTdGF0ZSIsInBsdWdpblVSTCIsImdldFBsdWdpblVSTCIsImlzTG9hZGVkIiwiY29tcGxldGUiLCJnZXRBdmFpbGFibGVJbWFnZXMiLCJTdHlsZUxheWVySW5kZXgiLCJzZW5kIiwiZW5mb3JjZUNhY2hlU2l6ZUxpbWl0IiwiV29ya2VyR2xvYmFsU2NvcGUiXSwibWFwcGluZ3MiOiI4Q0F3Q0EsU0FBU0EsRUFBZUMsRUFBOEJDLEdBQ2xELE1BQU1DLEVBQVVDLGlCQUFlSCxFQUFPRSxTQUFTLENBQUNFLEVBQW9CQyxFQUEyQkMsRUFBOEJDLEtBQ3JISCxFQUNBSCxF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
