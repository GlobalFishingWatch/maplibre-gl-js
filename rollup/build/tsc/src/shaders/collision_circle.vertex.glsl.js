export default "attribute vec2 a_pos;\nattribute float a_radius;\nattribute vec2 a_flags;\n\nuniform mat4 u_matrix;\nuniform mat4 u_inv_matrix;\nuniform vec2 u_viewport_size;\nuniform float u_camera_to_center_distance;\n\nvarying float v_radius;\nvarying vec2 v_extrude;\nvarying float v_perspective_ratio;\nvarying float v_collision;\n\nvec3 toTilePosition(vec2 screenPos) {\n    // Shoot a ray towards the ground to reconstruct the depth-value\n    vec4 rayStart = u_inv_matrix * vec4(screenPos, -1.0, 1.0);\n    vec4 rayEnd   = u_inv_matrix * vec4(screenPos,  1.0, 1.0);\n\n    rayStart.xyz /= rayStart.w;\n    rayEnd.xyz   /= rayEnd.w;\n\n    highp float t = (0.0 - rayStart.z) / (rayEnd.z - rayStart.z);\n    return mix(rayStart.xyz, rayEnd.xyz, t);\n}\n\nvoid main() {\n    vec2 quadCenterPos = a_pos;\n    float radius = a_radius;\n    float collision = a_flags.x;\n    float vertexIdx = a_flags.y;\n\n    vec2 quadVertexOffset = vec2(\n        mix(-1.0, 1.0, float(vertexIdx >= 2.0)),\n        mix(-1.0, 1.0, float(vertexIdx >= 1.0 && vertexIdx <= 2.0)));\n\n    vec2 quadVertexExtent = quadVertexOffset * radius;\n\n    // Screen position of the quad might have been computed with different camera parameters.\n    // Transform the point to a proper position on the current viewport\n    vec3 tilePos = toTilePosition(quadCenterPos);\n    vec4 clipPos = u_matrix * vec4(tilePos, 1.0);\n\n    highp float camera_to_anchor_distance = clipPos.w;\n    highp float collision_perspective_ratio = clamp(\n        0.5 + 0.5 * (u_camera_to_center_distance / camera_to_anchor_distance),\n        0.0, // Prevents oversized near-field circles in pitched/overzoomed tiles\n        4.0);\n\n    // Apply small padding for the anti-aliasing effect to fit the quad\n    // Note that v_radius and v_extrude are in screen coordinates already\n    float padding_factor = 1.2;\n    v_radius = radius;\n    v_extrude = quadVertexExtent * padding_factor;\n    v_perspective_ratio = collision_perspective_ratio;\n    v_collision = collision;\n\n    gl_Position = vec4(clipPos.xyz / clipPos.w, 1.0) + vec4(quadVertexExtent * padding_factor / u_viewport_size * 2.0, 0.0, 0.0);\n}\n";